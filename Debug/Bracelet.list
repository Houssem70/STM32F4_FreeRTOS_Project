
Bracelet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800cf80  0800cf80  0001cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6ac  0800d6ac  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6ac  0800d6ac  0001d6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6b4  0800d6b4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6b4  0800d6b4  0001d6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6b8  0800d6b8  0001d6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004640  200001e8  0800d8a4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004828  0800d8a4  00024828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196d0  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003995  00000000  00000000  0003992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001188  00000000  00000000  0003e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f0d  00000000  00000000  0003faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a942  00000000  00000000  000599b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c60f  00000000  00000000  000742f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007604  00000000  00000000  00110908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00117f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf68 	.word	0x0800cf68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800cf68 	.word	0x0800cf68

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <vApplicationGetIdleTaskMemory+0x2c>)
 8001030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <vApplicationGetIdleTaskMemory+0x30>)
 8001036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000204 	.word	0x20000204
 8001050:	200002a4 	.word	0x200002a4

08001054 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <strtoke+0x1a>
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <strtoke+0x60>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <strtoke+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <strtoke+0x26>
 8001076:	2300      	movs	r3, #0
 8001078:	e017      	b.n	80010aa <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <strtoke+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <strtoke+0x60>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fd93 	bl	8009bb2 <strpbrk>
 800108c:	4603      	mov	r3, r0
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <strtoke+0x60>)
 8001090:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <strtoke+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <strtoke+0x54>
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <strtoke+0x60>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	4904      	ldr	r1, [pc, #16]	; (80010b4 <strtoke+0x60>)
 80010a2:	600a      	str	r2, [r1, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200004a8 	.word	0x200004a8

080010b8 <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80010c6:	3301      	adds	r3, #1
 80010c8:	425a      	negs	r2, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	bf58      	it	pl
 80010d0:	4253      	negpl	r3, r2
 80010d2:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d02f      	beq.n	8001140 <NEO6_ReceiveUartChar+0x88>
		// Error handle?
		//
	}
	else
	{
		if(UartReceivedChar == 13)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b0d      	cmp	r3, #13
 80010e8:	d114      	bne.n	8001114 <NEO6_ReceiveUartChar+0x5c>
		{
			GpsStateHandler->UartBufferLines++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	b2d1      	uxtb	r1, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	711a      	strb	r2, [r3, #4]
 8001112:	e015      	b.n	8001140 <NEO6_ReceiveUartChar+0x88>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d010      	beq.n	8001140 <NEO6_ReceiveUartChar+0x88>
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b0a      	cmp	r3, #10
 8001126:	d00b      	beq.n	8001140 <NEO6_ReceiveUartChar+0x88>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	b2d1      	uxtb	r1, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	460a      	mov	r2, r1
 800113e:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	4904      	ldr	r1, [pc, #16]	; (8001158 <NEO6_ReceiveUartChar+0xa0>)
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fefc 	bl	8004f46 <HAL_UART_Receive_IT>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200004a4 	.word	0x200004a4

0800115c <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001170:	429a      	cmp	r2, r3
 8001172:	d102      	bne.n	800117a <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	e013      	b.n	80011a2 <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001180:	3301      	adds	r3, #1
 8001182:	425a      	negs	r2, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	bf58      	it	pl
 800118a:	4253      	negpl	r3, r2
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	791b      	ldrb	r3, [r3, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f203 1307 	addw	r3, r3, #263	; 0x107
 80011bc:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d01e      	beq.n	8001206 <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80011c8:	e008      	b.n	80011dc <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	2b0d      	cmp	r3, #13
 80011ce:	d00e      	beq.n	80011ee <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7afa      	ldrb	r2, [r7, #11]
 80011d4:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3301      	adds	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffbd 	bl	800115c <NEO6_GetCharFromBuffer>
 80011e2:	4603      	mov	r3, r0
 80011e4:	72fb      	strb	r3, [r7, #11]
 80011e6:	7afb      	ldrb	r3, [r7, #11]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ee      	bne.n	80011ca <NEO6_GetLineFromBuffer+0x1c>
 80011ec:	e000      	b.n	80011f0 <NEO6_GetLineFromBuffer+0x42>
				break;
 80011ee:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8001218:	4997      	ldr	r1, [pc, #604]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ff1a 	bl	8001054 <strtoke>
 8001220:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d033      	beq.n	8001292 <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f006 fe66 	bl	8007efc <atoi>
 8001230:	4603      	mov	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]
		GpsStateHandler->Second = Temp % 100;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4b91      	ldr	r3, [pc, #580]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 8001238:	fba3 1302 	umull	r1, r3, r3, r2
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	2164      	movs	r1, #100	; 0x64
 8001240:	fb01 f303 	mul.w	r3, r1, r3
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b2da      	uxtb	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a8a      	ldr	r2, [pc, #552]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	095a      	lsrs	r2, r3, #5
 8001258:	4b88      	ldr	r3, [pc, #544]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 800125a:	fba3 1302 	umull	r1, r3, r3, r2
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2164      	movs	r1, #100	; 0x64
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4a83      	ldr	r2, [pc, #524]	; (8001480 <NEO6_ParseGPRMC+0x270>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0b5a      	lsrs	r2, r3, #13
 800127a:	4b80      	ldr	r3, [pc, #512]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 800127c:	fba3 1302 	umull	r1, r3, r3, r2
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	2164      	movs	r1, #100	; 0x64
 8001284:	fb01 f303 	mul.w	r3, r1, r3
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 8001292:	4979      	ldr	r1, [pc, #484]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fedd 	bl	8001054 <strtoke>
 800129a:	61f8      	str	r0, [r7, #28]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 800129c:	4976      	ldr	r1, [pc, #472]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff fed8 	bl	8001054 <strtoke>
 80012a4:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <NEO6_ParseGPRMC+0x10c>
	{int latitude_degrees = (ParsePoiner[0] - '0') * 10 + (ParsePoiner[1] - '0');
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	461a      	mov	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	3301      	adds	r3, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	3b30      	subs	r3, #48	; 0x30
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
    int latitude_minutes = (ParsePoiner[2] - '0') * 10 + (ParsePoiner[3] - '0');
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	3302      	adds	r3, #2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	461a      	mov	r2, r3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3303      	adds	r3, #3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3b30      	subs	r3, #48	; 0x30
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    GpsStateHandler->Latitude = latitude_degrees + latitude_minutes / 60.0 ;
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f7ff f931 	bl	8000554 <__aeabi_i2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	6938      	ldr	r0, [r7, #16]
 80012f8:	f7ff f92c 	bl	8000554 <__aeabi_i2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b60      	ldr	r3, [pc, #384]	; (8001484 <NEO6_ParseGPRMC+0x274>)
 8001302:	f7ff fabb 	bl	800087c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7fe ffd5 	bl	80002bc <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190

	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 800131c:	4956      	ldr	r1, [pc, #344]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fe98 	bl	8001054 <strtoke>
 8001324:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <NEO6_ParseGPRMC+0x128>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 8001338:	494f      	ldr	r1, [pc, #316]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fe8a 	bl	8001054 <strtoke>
 8001340:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d03d      	beq.n	80013c6 <NEO6_ParseGPRMC+0x1b6>
	{
		int longitude_degrees = (ParsePoiner[0] - '0') * 100 + (ParsePoiner[1] - '0') * 10 + (ParsePoiner[2] - '0');
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b30      	subs	r3, #48	; 0x30
 8001350:	2264      	movs	r2, #100	; 0x64
 8001352:	fb02 f103 	mul.w	r1, r2, r3
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	18ca      	adds	r2, r1, r3
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3302      	adds	r3, #2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b30      	subs	r3, #48	; 0x30
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
		    int longitude_minutes = (ParsePoiner[3] - '0') * 10 + (ParsePoiner[4] - '0');
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3303      	adds	r3, #3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	461a      	mov	r2, r3
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3b30      	subs	r3, #48	; 0x30
 8001392:	4413      	add	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]

		    GpsStateHandler->Longitude= longitude_degrees + (double)longitude_minutes / 60.0 ;
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff f8dc 	bl	8000554 <__aeabi_i2d>
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f7ff f8d7 	bl	8000554 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <NEO6_ParseGPRMC+0x274>)
 80013ac:	f7ff fa66 	bl	800087c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4620      	mov	r0, r4
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7fe ff80 	bl	80002bc <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0

	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 80013c6:	492c      	ldr	r1, [pc, #176]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fe43 	bl	8001054 <strtoke>
 80013ce:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <NEO6_ParseGPRMC+0x1d2>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fe35 	bl	8001054 <strtoke>
 80013ea:	61f8      	str	r0, [r7, #28]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 80013ec:	4922      	ldr	r1, [pc, #136]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fe30 	bl	8001054 <strtoke>
 80013f4:	61f8      	str	r0, [r7, #28]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 80013f6:	4920      	ldr	r1, [pc, #128]	; (8001478 <NEO6_ParseGPRMC+0x268>)
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fe2b 	bl	8001054 <strtoke>
 80013fe:	61f8      	str	r0, [r7, #28]
	if(strlen(ParsePoiner) > 0)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d033      	beq.n	8001470 <NEO6_ParseGPRMC+0x260>
	{
		Temp = atoi(ParsePoiner);
 8001408:	69f8      	ldr	r0, [r7, #28]
 800140a:	f006 fd77 	bl	8007efc <atoi>
 800140e:	4603      	mov	r3, r0
 8001410:	61bb      	str	r3, [r7, #24]
		GpsStateHandler->Year = Temp % 100;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 8001416:	fba3 1302 	umull	r1, r3, r3, r2
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2164      	movs	r1, #100	; 0x64
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	4a13      	ldr	r2, [pc, #76]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	095a      	lsrs	r2, r3, #5
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 8001438:	fba3 1302 	umull	r1, r3, r3, r2
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	2164      	movs	r1, #100	; 0x64
 8001440:	fb01 f303 	mul.w	r3, r1, r3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <NEO6_ParseGPRMC+0x270>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0b5a      	lsrs	r2, r3, #13
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <NEO6_ParseGPRMC+0x26c>)
 800145a:	fba3 1302 	umull	r1, r3, r3, r2
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2164      	movs	r1, #100	; 0x64
 8001462:	fb01 f303 	mul.w	r3, r1, r3
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bdb0      	pop	{r4, r5, r7, pc}
 8001478:	0800cf80 	.word	0x0800cf80
 800147c:	51eb851f 	.word	0x51eb851f
 8001480:	d1b71759 	.word	0xd1b71759
 8001484:	404e0000 	.word	0x404e0000

08001488 <NEO6_ParseLine>:
	// Could be good for minimal system for LoRa device
}


void NEO6_ParseLine(NEO6_State *GpsStateHandler)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	// Nice website with NMEA commuincates description
	//	http://aprs.gids.nl/nmea
	//

	// Header
	char* ParsePoiner = strtoke((char*)GpsStateHandler->WorkingBuffer, ",");
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001496:	4909      	ldr	r1, [pc, #36]	; (80014bc <NEO6_ParseLine+0x34>)
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fddb 	bl	8001054 <strtoke>
 800149e:	60f8      	str	r0, [r7, #12]

	if(strcmp(ParsePoiner, "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <NEO6_ParseLine+0x38>)
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7fe fe9c 	bl	80001e0 <strcmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <NEO6_ParseLine+0x2c>
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff feae 	bl	8001210 <NEO6_ParseGPRMC>
//	else if(strcmp(ParsePoiner, "$GPVTG") == 0) NEO6_ParseGPVTG(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGGA") == 0) NEO6_ParseGPGGA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSA") == 0) NEO6_ParseGPGSA(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGSV") == 0) NEO6_ParseGPGSV(GpsStateHandler);
//	else if(strcmp(ParsePoiner, "$GPGLL") == 0) NEO6_ParseGPGLL(GpsStateHandler);
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800cf80 	.word	0x0800cf80
 80014c0:	0800cf84 	.word	0x0800cf84

080014c4 <NEO6_IsFix>:

uint8_t NEO6_IsFix(NEO6_State *GpsStateHandler)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return GpsStateHandler->Quality;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <NEO6_Task>:

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <NEO6_Task+0x1e>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fe5c 	bl	80011ae <NEO6_GetLineFromBuffer>
		NEO6_ParseLine(GpsStateHandler);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffc6 	bl	8001488 <NEO6_ParseLine>
	}
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2230      	movs	r2, #48	; 0x30
 800156e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2230      	movs	r2, #48	; 0x30
 8001584:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9c1 2370 	strd	r2, r3, [r1, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9c1 236e 	strd	r2, r3, [r1, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c1 2374 	strd	r2, r3, [r1, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4903      	ldr	r1, [pc, #12]	; (80015f4 <NEO6_Init+0xf0>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fcad 	bl	8004f46 <HAL_UART_Receive_IT>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200004a4 	.word	0x200004a4

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b0ba      	sub	sp, #232	; 0xe8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f001 f90b 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 f8eb 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 f9f9 	bl	80019fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800160a:	f000 f945 	bl	8001898 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800160e:	f000 f99b 	bl	8001948 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001612:	f000 f96f 	bl	80018f4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001616:	f000 f9c1 	bl	800199c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 800161a:	f000 fa69 	bl	8001af0 <ADXL345_Init>
  NEO6_Init(&GpsState, &huart1);
 800161e:	495a      	ldr	r1, [pc, #360]	; (8001788 <main+0x190>)
 8001620:	485a      	ldr	r0, [pc, #360]	; (800178c <main+0x194>)
 8001622:	f7ff ff6f 	bl	8001504 <NEO6_Init>
  GSM_Init();
 8001626:	f000 fabb 	bl	8001ba0 <GSM_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AccelQueue */
  osMessageQDef(AccelQueue, 1, uint16_t);
 800162a:	4b59      	ldr	r3, [pc, #356]	; (8001790 <main+0x198>)
 800162c:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8001630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AccelQueueHandle = osMessageCreate(osMessageQ(AccelQueue), NULL);
 8001636:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fc68 	bl	8005f12 <osMessageCreate>
 8001642:	4603      	mov	r3, r0
 8001644:	4a53      	ldr	r2, [pc, #332]	; (8001794 <main+0x19c>)
 8001646:	6013      	str	r3, [r2, #0]

  /* definition and creation of DetectChuteQueue */
  osMessageQDef(DetectChuteQueue, 1, uint8_t);
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <main+0x1a0>)
 800164a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800164e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DetectChuteQueueHandle = osMessageCreate(osMessageQ(DetectChuteQueue), NULL);
 8001654:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f004 fc59 	bl	8005f12 <osMessageCreate>
 8001660:	4603      	mov	r3, r0
 8001662:	4a4e      	ldr	r2, [pc, #312]	; (800179c <main+0x1a4>)
 8001664:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPSQueue */
  osMessageQDef(GPSQueue, 1, uint8_t*);
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <main+0x1a8>)
 8001668:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 800166c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GPSQueueHandle = osMessageCreate(osMessageQ(GPSQueue), NULL);
 8001672:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fc4a 	bl	8005f12 <osMessageCreate>
 800167e:	4603      	mov	r3, r0
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <main+0x1ac>)
 8001682:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonQueue */
  osMessageQDef(ButtonQueue, 1, uint8_t);
 8001684:	4b44      	ldr	r3, [pc, #272]	; (8001798 <main+0x1a0>)
 8001686:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800168a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ButtonQueueHandle = osMessageCreate(osMessageQ(ButtonQueue), NULL);
 8001690:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fc3b 	bl	8005f12 <osMessageCreate>
 800169c:	4603      	mov	r3, r0
 800169e:	4a42      	ldr	r2, [pc, #264]	; (80017a8 <main+0x1b0>)
 80016a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadAcceloTask */
  osThreadDef(ReadAcceloTask, ReadAcceleration, osPriorityLow, 0, 128);
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <main+0x1b4>)
 80016a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80016a8:	461d      	mov	r5, r3
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadAcceloTaskHandle = osThreadCreate(osThread(ReadAcceloTask), NULL);
 80016b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fbdc 	bl	8005e7a <osThreadCreate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a3a      	ldr	r2, [pc, #232]	; (80017b0 <main+0x1b8>)
 80016c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LedTask */
  osThreadDef(LedTask, led, osPriorityLow, 0, 128);
 80016c8:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <main+0x1bc>)
 80016ca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80016ce:	461d      	mov	r5, r3
 80016d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80016dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 fbc9 	bl	8005e7a <osThreadCreate>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <main+0x1c0>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadLocation */
  osThreadDef(ReadLocation, ReadLocalion, osPriorityLow, 0, 128);
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <main+0x1c4>)
 80016f0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80016f4:	461d      	mov	r5, r3
 80016f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadLocationHandle = osThreadCreate(osThread(ReadLocation), NULL);
 8001702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f004 fbb6 	bl	8005e7a <osThreadCreate>
 800170e:	4603      	mov	r3, r0
 8001710:	4a2b      	ldr	r2, [pc, #172]	; (80017c0 <main+0x1c8>)
 8001712:	6013      	str	r3, [r2, #0]

  /* definition and creation of DetectChuteTask */
  osThreadDef(DetectChuteTask, DetectChute, osPriorityLow, 0, 512);
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <main+0x1cc>)
 8001716:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800171a:	461d      	mov	r5, r3
 800171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001720:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DetectChuteTaskHandle = osThreadCreate(osThread(DetectChuteTask), NULL);
 8001728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fba3 	bl	8005e7a <osThreadCreate>
 8001734:	4603      	mov	r3, r0
 8001736:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <main+0x1d0>)
 8001738:	6013      	str	r3, [r2, #0]

  /* definition and creation of GSMTask */
  osThreadDef(GSMTask, GSM, osPriorityLow, 0, 128);
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <main+0x1d4>)
 800173c:	f107 041c 	add.w	r4, r7, #28
 8001740:	461d      	mov	r5, r3
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GSMTaskHandle = osThreadCreate(osThread(GSMTask), NULL);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fb90 	bl	8005e7a <osThreadCreate>
 800175a:	4603      	mov	r3, r0
 800175c:	4a1c      	ldr	r2, [pc, #112]	; (80017d0 <main+0x1d8>)
 800175e:	6013      	str	r3, [r2, #0]

  /* definition and creation of AlertButtonTask */
  osThreadDef(AlertButtonTask, AlertButton, osPriorityLow, 0, 128);
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <main+0x1dc>)
 8001762:	463c      	mov	r4, r7
 8001764:	461d      	mov	r5, r3
 8001766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800176e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlertButtonTaskHandle = osThreadCreate(osThread(AlertButtonTask), NULL);
 8001772:	463b      	mov	r3, r7
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f004 fb7f 	bl	8005e7a <osThreadCreate>
 800177c:	4603      	mov	r3, r0
 800177e:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <main+0x1e0>)
 8001780:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001782:	f004 fb73 	bl	8005e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x18e>
 8001788:	20000500 	.word	0x20000500
 800178c:	20000648 	.word	0x20000648
 8001790:	0800cf8c 	.word	0x0800cf8c
 8001794:	200005f0 	.word	0x200005f0
 8001798:	0800cf9c 	.word	0x0800cf9c
 800179c:	200005f4 	.word	0x200005f4
 80017a0:	0800cfac 	.word	0x0800cfac
 80017a4:	200005f8 	.word	0x200005f8
 80017a8:	200005fc 	.word	0x200005fc
 80017ac:	0800cfcc 	.word	0x0800cfcc
 80017b0:	200005d8 	.word	0x200005d8
 80017b4:	0800cff0 	.word	0x0800cff0
 80017b8:	200005dc 	.word	0x200005dc
 80017bc:	0800d01c 	.word	0x0800d01c
 80017c0:	200005e0 	.word	0x200005e0
 80017c4:	0800d048 	.word	0x0800d048
 80017c8:	200005e4 	.word	0x200005e4
 80017cc:	0800d06c 	.word	0x0800d06c
 80017d0:	200005e8 	.word	0x200005e8
 80017d4:	0800d098 	.word	0x0800d098
 80017d8:	200005ec 	.word	0x200005ec

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	2230      	movs	r2, #48	; 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f008 f9c7 	bl	8009b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <SystemClock_Config+0xb4>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <SystemClock_Config+0xb4>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <SystemClock_Config+0xb4>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <SystemClock_Config+0xb8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <SystemClock_Config+0xb8>)
 8001826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <SystemClock_Config+0xb8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001838:	2302      	movs	r3, #2
 800183a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800183c:	2301      	movs	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001840:	2310      	movs	r3, #16
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fba1 	bl	8003f94 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001858:	f000 fcfa 	bl	8002250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fe04 	bl	8004484 <HAL_RCC_ClockConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001882:	f000 fce5 	bl	8002250 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	3750      	adds	r7, #80	; 0x50
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f001 fb49 	bl	8002f6c <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 fcb6 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200004ac 	.word	0x200004ac
 80018ec:	40005400 	.word	0x40005400
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_USART1_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART1_UART_Init+0x4c>)
 800192c:	f003 fa30 	bl	8004d90 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 fc8b 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000500 	.word	0x20000500
 8001944:	40011000 	.word	0x40011000

08001948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_USART2_UART_Init+0x50>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_USART2_UART_Init+0x4c>)
 8001980:	f003 fa06 	bl	8004d90 <HAL_UART_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198a:	f000 fc61 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000548 	.word	0x20000548
 8001998:	40004400 	.word	0x40004400

0800199c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <MX_USART6_UART_Init+0x58>)
 80019a4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019ac:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019c2:	220c      	movs	r2, #12
 80019c4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019d4:	f003 f9dc 	bl	8004d90 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019de:	f000 fc37 	bl	8002250 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */
  // Start UART receive interrupt
      HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	4904      	ldr	r1, [pc, #16]	; (80019f8 <MX_USART6_UART_Init+0x5c>)
 80019e6:	4802      	ldr	r0, [pc, #8]	; (80019f0 <MX_USART6_UART_Init+0x54>)
 80019e8:	f003 faad 	bl	8004f46 <HAL_UART_Receive_IT>
  /* USER CODE END USART6_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000590 	.word	0x20000590
 80019f4:	40011400 	.word	0x40011400
 80019f8:	20000830 	.word	0x20000830

080019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_GPIO_Init+0xb0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <MX_GPIO_Init+0xb4>)
 8001a6c:	f001 fa4a 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a70:	2302      	movs	r3, #2
 8001a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_GPIO_Init+0xb8>)
 8001a84:	f001 f8a2 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <MX_GPIO_Init+0xb4>)
 8001aa0:	f001 f894 	bl	8002bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <adxl_write>:

/* USER CODE BEGIN 4 */

void adxl_write(uint8_t reg,uint8_t value){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg; // Address of the POWER_CTL register
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	733b      	strb	r3, [r7, #12]
	data[1] = value; // Enable the sensor
 8001acc:	79bb      	ldrb	r3, [r7, #6]
 8001ace:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS, data, 2, 200);
 8001ad0:	f107 020c 	add.w	r2, r7, #12
 8001ad4:	23c8      	movs	r3, #200	; 0xc8
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	21a6      	movs	r1, #166	; 0xa6
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <adxl_write+0x34>)
 8001ade:	f001 fb89 	bl	80031f4 <HAL_I2C_Master_Transmit>
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200004ac 	.word	0x200004ac

08001af0 <ADXL345_Init>:

void ADXL345_Init()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	  adxl_write(0x31,0x03); // Configure the measurement range to ±16+g
 8001af4:	2103      	movs	r1, #3
 8001af6:	2031      	movs	r0, #49	; 0x31
 8001af8:	f7ff ffde 	bl	8001ab8 <adxl_write>
	  // Enable the ADXL345 accelerometer by writing 0x08 to the POWER_CTL register (Address: 0x2D)
	  adxl_write(0x2d,0x00);
 8001afc:	2100      	movs	r1, #0
 8001afe:	202d      	movs	r0, #45	; 0x2d
 8001b00:	f7ff ffda 	bl	8001ab8 <adxl_write>
	  adxl_write(0x2d,0x08);
 8001b04:	2108      	movs	r1, #8
 8001b06:	202d      	movs	r0, #45	; 0x2d
 8001b08:	f7ff ffd6 	bl	8001ab8 <adxl_write>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if(huart == GpsState.neo6_huart)
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_UART_RxCpltCallback+0x74>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d103      	bne.n	8001b2a <HAL_UART_RxCpltCallback+0x1a>
	{
		NEO6_ReceiveUartChar(&GpsState);
 8001b22:	4818      	ldr	r0, [pc, #96]	; (8001b84 <HAL_UART_RxCpltCallback+0x74>)
 8001b24:	f7ff fac8 	bl	80010b8 <NEO6_ReceiveUartChar>
        }

        // Continue receiving data
        HAL_UART_Receive_IT(&huart6, &rx_data, 1);
    }
}
 8001b28:	e028      	b.n	8001b7c <HAL_UART_RxCpltCallback+0x6c>
	else if (huart->Instance == USART6)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_UART_RxCpltCallback+0x78>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d123      	bne.n	8001b7c <HAL_UART_RxCpltCallback+0x6c>
        rx_buffer[rx_index++] = rx_data;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_UART_RxCpltCallback+0x7c>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	b291      	uxth	r1, r2
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_UART_RxCpltCallback+0x7c>)
 8001b40:	8011      	strh	r1, [r2, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_UART_RxCpltCallback+0x80>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2d9      	uxtb	r1, r3
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_UART_RxCpltCallback+0x84>)
 8001b4c:	5499      	strb	r1, [r3, r2]
        if (rx_data == '\n')
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_UART_RxCpltCallback+0x80>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b0a      	cmp	r3, #10
 8001b56:	d10c      	bne.n	8001b72 <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0'; // Null-terminate the buffer
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <HAL_UART_RxCpltCallback+0x7c>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_UART_RxCpltCallback+0x84>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	5499      	strb	r1, [r3, r2]
            rx_index = 0; // Reset index for next message
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_UART_RxCpltCallback+0x7c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
            new_sms_received = 1; // Set flag to indicate a new message received
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_UART_RxCpltCallback+0x88>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	4906      	ldr	r1, [pc, #24]	; (8001b90 <HAL_UART_RxCpltCallback+0x80>)
 8001b76:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_UART_RxCpltCallback+0x8c>)
 8001b78:	f003 f9e5 	bl	8004f46 <HAL_UART_Receive_IT>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000648 	.word	0x20000648
 8001b88:	40011400 	.word	0x40011400
 8001b8c:	20000934 	.word	0x20000934
 8001b90:	20000830 	.word	0x20000830
 8001b94:	20000834 	.word	0x20000834
 8001b98:	20000936 	.word	0x20000936
 8001b9c:	20000590 	.word	0x20000590

08001ba0 <GSM_Init>:

void GSM_Init(void)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b098      	sub	sp, #96	; 0x60
 8001ba4:	af00      	add	r7, sp, #0
	char msg[50];
	char cnmi_cmd[] = "AT+CNMI=2,2,0,0,0\r\n";
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <GSM_Init+0xc8>)
 8001ba8:	f107 0418 	add.w	r4, r7, #24
 8001bac:	461d      	mov	r5, r3
 8001bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	6023      	str	r3, [r4, #0]
	char text_mode_cmd[] = "AT+CMGF=1\r\n";
 8001bb6:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <GSM_Init+0xcc>)
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char init_cmd[] = "AT\r\n";
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <GSM_Init+0xd0>)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bca:	6018      	str	r0, [r3, #0]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	7019      	strb	r1, [r3, #0]

	sprintf(msg,"\r\n Initializing the GSM module\r\n");
 8001bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd4:	4927      	ldr	r1, [pc, #156]	; (8001c74 <GSM_Init+0xd4>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f007 ff6e 	bl	8009ab8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fb5d 	bl	80002a0 <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <GSM_Init+0xd8>)
 8001bf4:	f003 f91c 	bl	8004e30 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)init_cmd, strlen(init_cmd), 1000);
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fb50 	bl	80002a0 <strlen>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	1d39      	adds	r1, r7, #4
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	481c      	ldr	r0, [pc, #112]	; (8001c7c <GSM_Init+0xdc>)
 8001c0c:	f003 f910 	bl	8004e30 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c14:	f000 fe42 	bl	800289c <HAL_Delay>

    // Set SMS text mode
    HAL_UART_Transmit(&huart6, (uint8_t*)text_mode_cmd, strlen(text_mode_cmd), 1000);
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fb3f 	bl	80002a0 <strlen>
 8001c22:	4603      	mov	r3, r0
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	f107 010c 	add.w	r1, r7, #12
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	4813      	ldr	r0, [pc, #76]	; (8001c7c <GSM_Init+0xdc>)
 8001c30:	f003 f8fe 	bl	8004e30 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c38:	f000 fe30 	bl	800289c <HAL_Delay>

    // Enable new message indications
    HAL_UART_Transmit(&huart6, (uint8_t*)cnmi_cmd, strlen(cnmi_cmd), 1000);
 8001c3c:	f107 0318 	add.w	r3, r7, #24
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb2d 	bl	80002a0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0118 	add.w	r1, r7, #24
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	480a      	ldr	r0, [pc, #40]	; (8001c7c <GSM_Init+0xdc>)
 8001c54:	f003 f8ec 	bl	8004e30 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5c:	f000 fe1e 	bl	800289c <HAL_Delay>

}
 8001c60:	bf00      	nop
 8001c62:	3760      	adds	r7, #96	; 0x60
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	0800d0d8 	.word	0x0800d0d8
 8001c6c:	0800d0ec 	.word	0x0800d0ec
 8001c70:	0800d0f8 	.word	0x0800d0f8
 8001c74:	0800d0b4 	.word	0x0800d0b4
 8001c78:	20000548 	.word	0x20000548
 8001c7c:	20000590 	.word	0x20000590

08001c80 <SendSms>:

void SendSms(char* message){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0c4      	sub	sp, #272	; 0x110
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c8e:	6018      	str	r0, [r3, #0]
	char cmd[256];

	// Send SMS command sequence
	        sprintf(cmd, "AT+CMGF=1\r\n");
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	492c      	ldr	r1, [pc, #176]	; (8001d48 <SendSms+0xc8>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 ff0e 	bl	8009ab8 <siprintf>
	        HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), 1000);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fafd 	bl	80002a0 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f107 0110 	add.w	r1, r7, #16
 8001cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb2:	4826      	ldr	r0, [pc, #152]	; (8001d4c <SendSms+0xcc>)
 8001cb4:	f003 f8bc 	bl	8004e30 <HAL_UART_Transmit>
	        HAL_Delay(1000);
 8001cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cbc:	f000 fdee 	bl	800289c <HAL_Delay>

	        sprintf(cmd, "AT+CMGS=\"%s\"\r\n", phone_number);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4a22      	ldr	r2, [pc, #136]	; (8001d50 <SendSms+0xd0>)
 8001cc6:	4923      	ldr	r1, [pc, #140]	; (8001d54 <SendSms+0xd4>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f007 fef5 	bl	8009ab8 <siprintf>
	        HAL_UART_Transmit(&huart6, (uint8_t*)cmd, strlen(cmd), 1000);
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fae4 	bl	80002a0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f107 0110 	add.w	r1, r7, #16
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	4819      	ldr	r0, [pc, #100]	; (8001d4c <SendSms+0xcc>)
 8001ce6:	f003 f8a3 	bl	8004e30 <HAL_UART_Transmit>
	        HAL_Delay(1000);
 8001cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cee:	f000 fdd5 	bl	800289c <HAL_Delay>

	        HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	f7fe fad0 	bl	80002a0 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d08:	f5a3 7186 	sub.w	r1, r3, #268	; 0x10c
 8001d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d10:	6809      	ldr	r1, [r1, #0]
 8001d12:	480e      	ldr	r0, [pc, #56]	; (8001d4c <SendSms+0xcc>)
 8001d14:	f003 f88c 	bl	8004e30 <HAL_UART_Transmit>
	        HAL_Delay(1000);
 8001d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d1c:	f000 fdbe 	bl	800289c <HAL_Delay>

	        // End of message character (Ctrl+Z or 0x1A in ASCII)
	        uint8_t end_char = 0x1A;
 8001d20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d24:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001d28:	221a      	movs	r2, #26
 8001d2a:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Transmit(&huart6, &end_char, 1, 1000);
 8001d2c:	f107 010f 	add.w	r1, r7, #15
 8001d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d34:	2201      	movs	r2, #1
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <SendSms+0xcc>)
 8001d38:	f003 f87a 	bl	8004e30 <HAL_UART_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	0800d0ec 	.word	0x0800d0ec
 8001d4c:	20000590 	.word	0x20000590
 8001d50:	20000000 	.word	0x20000000
 8001d54:	0800d100 	.word	0x0800d100

08001d58 <ReadAcceleration>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadAcceleration */
void ReadAcceleration(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	ed2d 8b02 	vpush	{d8}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6078      	str	r0, [r7, #4]
	float xg,yg,zg,a;
  /* Infinite loop */
  for(;;)
  {
	  // Read 6 bytes of data starting from the DATAX0 register (Address: 0x32)
	             HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDRESS, 0x32 , 1, (uint8_t *) data_rec, 6, 10);
 8001d64:	230a      	movs	r3, #10
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	2306      	movs	r3, #6
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	2232      	movs	r2, #50	; 0x32
 8001d76:	21a6      	movs	r1, #166	; 0xa6
 8001d78:	4841      	ldr	r0, [pc, #260]	; (8001e80 <ReadAcceleration+0x128>)
 8001d7a:	f001 fb39 	bl	80033f0 <HAL_I2C_Mem_Read>
	  	 	    // Combine the two bytes for each axis
	  	 	    x = ((data_rec[1] << 8) | data_rec[0]);
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	  	 	    y = ((data_rec[3] << 8) | data_rec[2]);
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	84bb      	strh	r3, [r7, #36]	; 0x24
	  	 	    z = ((data_rec[5] << 8) | data_rec[4]);
 8001d9a:	7c7b      	ldrb	r3, [r7, #17]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	7c3b      	ldrb	r3, [r7, #16]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	847b      	strh	r3, [r7, #34]	; 0x22
	        // convert into g
	  	 	   xg = x * 0.0312;
 8001da8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe fbd1 	bl	8000554 <__aeabi_i2d>
 8001db2:	a331      	add	r3, pc, #196	; (adr r3, 8001e78 <ReadAcceleration+0x120>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fc36 	bl	8000628 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe ff28 	bl	8000c18 <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	61fb      	str	r3, [r7, #28]
	  	 	   yg = y * 0.0312;
 8001dcc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbbf 	bl	8000554 <__aeabi_i2d>
 8001dd6:	a328      	add	r3, pc, #160	; (adr r3, 8001e78 <ReadAcceleration+0x120>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fc24 	bl	8000628 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe ff16 	bl	8000c18 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	61bb      	str	r3, [r7, #24]
	  	 	   zg = z * 0.0312;
 8001df0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fbad 	bl	8000554 <__aeabi_i2d>
 8001dfa:	a31f      	add	r3, pc, #124	; (adr r3, 8001e78 <ReadAcceleration+0x120>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fc12 	bl	8000628 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe ff04 	bl	8000c18 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	617b      	str	r3, [r7, #20]
        // calculate the magnitude
       	    a = sqrtf(powf(xg,2)+powf(yg,2)+powf(zg,2));
 8001e14:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e18:	ed97 0a07 	vldr	s0, [r7, #28]
 8001e1c:	f00a fcc4 	bl	800c7a8 <powf>
 8001e20:	eeb0 8a40 	vmov.f32	s16, s0
 8001e24:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e28:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e2c:	f00a fcbc 	bl	800c7a8 <powf>
 8001e30:	eef0 7a40 	vmov.f32	s15, s0
 8001e34:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001e38:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e3c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e40:	f00a fcb2 	bl	800c7a8 <powf>
 8001e44:	eef0 7a40 	vmov.f32	s15, s0
 8001e48:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f00a fd02 	bl	800c858 <sqrtf>
 8001e54:	eef0 7a40 	vmov.f32	s15, s0
 8001e58:	edc7 7a02 	vstr	s15, [r7, #8]


       // send data to queue
       xQueueSend(AccelQueueHandle,&a,10);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <ReadAcceleration+0x12c>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	f107 0108 	add.w	r1, r7, #8
 8001e64:	2300      	movs	r3, #0
 8001e66:	220a      	movs	r2, #10
 8001e68:	f004 fa6a 	bl	8006340 <xQueueGenericSend>
	   vTaskDelay(400/portTICK_RATE_MS);
 8001e6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e70:	f004 fefe 	bl	8006c70 <vTaskDelay>
	             HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDRESS, 0x32 , 1, (uint8_t *) data_rec, 6, 10);
 8001e74:	e776      	b.n	8001d64 <ReadAcceleration+0xc>
 8001e76:	bf00      	nop
 8001e78:	8e8a71de 	.word	0x8e8a71de
 8001e7c:	3f9ff2e4 	.word	0x3f9ff2e4
 8001e80:	200004ac 	.word	0x200004ac
 8001e84:	200005f0 	.word	0x200005f0

08001e88 <led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led */
void led(void const * argument)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led */
  /* Infinite loop */
  for(;;)
 8001e90:	e7fe      	b.n	8001e90 <led+0x8>
	...

08001e94 <ReadLocalion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadLocalion */
void ReadLocalion(void const * argument)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b09e      	sub	sp, #120	; 0x78
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	6078      	str	r0, [r7, #4]
	  uint8_t location[100];
  /* Infinite loop */
  for(;;)
  {

	  NEO6_Task(&GpsState);
 8001e9c:	482d      	ldr	r0, [pc, #180]	; (8001f54 <ReadLocalion+0xc0>)
 8001e9e:	f7ff fb1e 	bl	80014de <NEO6_Task>

	  vTaskDelay(1000/portTICK_RATE_MS);
 8001ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea6:	f004 fee3 	bl	8006c70 <vTaskDelay>
	  			if(NEO6_IsFix(&GpsState))
 8001eaa:	482a      	ldr	r0, [pc, #168]	; (8001f54 <ReadLocalion+0xc0>)
 8001eac:	f7ff fb0a 	bl	80014c4 <NEO6_IsFix>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d02e      	beq.n	8001f14 <ReadLocalion+0x80>
	  			{

	  			MessageLength = sprintf((char*)Message, "Latitude: %.2f %c\n\r", GpsState.Latitude, GpsState.LatitudeDirection);
 8001eb6:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <ReadLocalion+0xc0>)
 8001eb8:	e9d3 2364 	ldrd	r2, r3, [r3, #400]	; 0x190
 8001ebc:	4925      	ldr	r1, [pc, #148]	; (8001f54 <ReadLocalion+0xc0>)
 8001ebe:	f891 1198 	ldrb.w	r1, [r1, #408]	; 0x198
 8001ec2:	9100      	str	r1, [sp, #0]
 8001ec4:	4924      	ldr	r1, [pc, #144]	; (8001f58 <ReadLocalion+0xc4>)
 8001ec6:	4825      	ldr	r0, [pc, #148]	; (8001f5c <ReadLocalion+0xc8>)
 8001ec8:	f007 fdf6 	bl	8009ab8 <siprintf>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <ReadLocalion+0xcc>)
 8001ed2:	701a      	strb	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart2, Message, MessageLength, 100);
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <ReadLocalion+0xcc>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	491f      	ldr	r1, [pc, #124]	; (8001f5c <ReadLocalion+0xc8>)
 8001ede:	4821      	ldr	r0, [pc, #132]	; (8001f64 <ReadLocalion+0xd0>)
 8001ee0:	f002 ffa6 	bl	8004e30 <HAL_UART_Transmit>

	  			MessageLength = sprintf((char*)Message, "Longitude: %06.2f %c\n\r", GpsState.Longitude, GpsState.LongitudeDirection);
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <ReadLocalion+0xc0>)
 8001ee6:	e9d3 2368 	ldrd	r2, r3, [r3, #416]	; 0x1a0
 8001eea:	491a      	ldr	r1, [pc, #104]	; (8001f54 <ReadLocalion+0xc0>)
 8001eec:	f891 11a8 	ldrb.w	r1, [r1, #424]	; 0x1a8
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	491d      	ldr	r1, [pc, #116]	; (8001f68 <ReadLocalion+0xd4>)
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <ReadLocalion+0xc8>)
 8001ef6:	f007 fddf 	bl	8009ab8 <siprintf>
 8001efa:	4603      	mov	r3, r0
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <ReadLocalion+0xcc>)
 8001f00:	701a      	strb	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart2, Message, MessageLength, 100);
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <ReadLocalion+0xcc>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2364      	movs	r3, #100	; 0x64
 8001f0a:	4914      	ldr	r1, [pc, #80]	; (8001f5c <ReadLocalion+0xc8>)
 8001f0c:	4815      	ldr	r0, [pc, #84]	; (8001f64 <ReadLocalion+0xd0>)
 8001f0e:	f002 ff8f 	bl	8004e30 <HAL_UART_Transmit>
 8001f12:	e7c3      	b.n	8001e9c <ReadLocalion+0x8>
	  		    //sprintf(location, "Latitude: %.2f %c, Longitude: %06.2f %c", GpsState.Latitude, GpsState.LatitudeDirection, GpsState.Longitude, GpsState.LongitudeDirection);
	  		   //xQueueOverwrite( GPSQueueHandle, &location );
	  			}
	  	       else
	  				{
	  		   MessageLength = sprintf((char*)Message, "No Fix\n\r");
 8001f14:	4915      	ldr	r1, [pc, #84]	; (8001f6c <ReadLocalion+0xd8>)
 8001f16:	4811      	ldr	r0, [pc, #68]	; (8001f5c <ReadLocalion+0xc8>)
 8001f18:	f007 fdce 	bl	8009ab8 <siprintf>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <ReadLocalion+0xcc>)
 8001f22:	701a      	strb	r2, [r3, #0]
	  		   HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <ReadLocalion+0xcc>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	490b      	ldr	r1, [pc, #44]	; (8001f5c <ReadLocalion+0xc8>)
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <ReadLocalion+0xd0>)
 8001f32:	f002 ff7d 	bl	8004e30 <HAL_UART_Transmit>
	  		   sprintf(location, "Latitude: 35.7 N, Longitude: 10.67 E");
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <ReadLocalion+0xdc>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f007 fdbb 	bl	8009ab8 <siprintf>
	  		   xQueueOverwrite( GPSQueueHandle, &location );
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <ReadLocalion+0xe0>)
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f107 010c 	add.w	r1, r7, #12
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f004 f9f7 	bl	8006340 <xQueueGenericSend>
	  NEO6_Task(&GpsState);
 8001f52:	e7a3      	b.n	8001e9c <ReadLocalion+0x8>
 8001f54:	20000648 	.word	0x20000648
 8001f58:	0800d110 	.word	0x0800d110
 8001f5c:	20000600 	.word	0x20000600
 8001f60:	20000640 	.word	0x20000640
 8001f64:	20000548 	.word	0x20000548
 8001f68:	0800d124 	.word	0x0800d124
 8001f6c:	0800d13c 	.word	0x0800d13c
 8001f70:	0800d148 	.word	0x0800d148
 8001f74:	200005f8 	.word	0x200005f8

08001f78 <DetectChute>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DetectChute */
void DetectChute(void const * argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b09e      	sub	sp, #120	; 0x78
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  		// read acceleration value
	          xQueueReceive(AccelQueueHandle, &acc,10);
 8001f80:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <DetectChute+0x150>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001f88:	220a      	movs	r2, #10
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 fad6 	bl	800653c <xQueueReceive>
	        	         // Wait for 1 second before checking acceleration again
	        		  	 // detect a free fall
	        		          if(acc<FALL_THRESHOLD_MIN)
 8001f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe faf0 	bl	8000578 <__aeabi_f2d>
 8001f98:	a347      	add	r3, pc, #284	; (adr r3, 80020b8 <DetectChute+0x140>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fdb5 	bl	8000b0c <__aeabi_dcmplt>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8086 	beq.w	80020b6 <DetectChute+0x13e>
	        		          {


	        		             vTaskDelay(700/portTICK_RATE_MS);
 8001faa:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001fae:	f004 fe5f 	bl	8006c70 <vTaskDelay>
	        		             xQueueReceive(AccelQueueHandle, &acc,10);
 8001fb2:	4b45      	ldr	r3, [pc, #276]	; (80020c8 <DetectChute+0x150>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fba:	220a      	movs	r2, #10
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fabd 	bl	800653c <xQueueReceive>
	        		             //detect damage with the flour
	        		             if(acc>FALL_THRESHOLD_MAX){
 8001fc2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001fc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	dd6d      	ble.n	80020b0 <DetectChute+0x138>
	        		          	   vTaskDelay(2000/portTICK_RATE_MS);
 8001fd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fd8:	f004 fe4a 	bl	8006c70 <vTaskDelay>
	        		          	   int i=0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	677b      	str	r3, [r7, #116]	; 0x74
	        		          	   falldetected = 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	72fb      	strb	r3, [r7, #11]
	        		          	   while (falldetected || i<10) {
 8001fe4:	e040      	b.n	8002068 <DetectChute+0xf0>
	        		          		   sprintf(ch,"acc=%f \n", acc);
 8001fe6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fac5 	bl	8000578 <__aeabi_f2d>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	f107 000c 	add.w	r0, r7, #12
 8001ff6:	4935      	ldr	r1, [pc, #212]	; (80020cc <DetectChute+0x154>)
 8001ff8:	f007 fd5e 	bl	8009ab8 <siprintf>

	        		          		    // Send the formatted data via UART
	        		          		    HAL_UART_Transmit(&huart2, (uint8_t *)ch, strlen(ch), 10);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe f94d 	bl	80002a0 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f107 010c 	add.w	r1, r7, #12
 800200e:	230a      	movs	r3, #10
 8002010:	482f      	ldr	r0, [pc, #188]	; (80020d0 <DetectChute+0x158>)
 8002012:	f002 ff0d 	bl	8004e30 <HAL_UART_Transmit>
	        		              	   // Wait for 1 second before checking acceleration again
	        		              	   vTaskDelay(1000/portTICK_RATE_MS);
 8002016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800201a:	f004 fe29 	bl	8006c70 <vTaskDelay>
	        		          		   xQueueReceive(AccelQueueHandle, &acc,10);
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <DetectChute+0x150>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002026:	220a      	movs	r2, #10
 8002028:	4618      	mov	r0, r3
 800202a:	f004 fa87 	bl	800653c <xQueueReceive>

	        		          	        if (acc > 1.2 || acc < 0.8 ) {
 800202e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe faa1 	bl	8000578 <__aeabi_f2d>
 8002036:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <DetectChute+0x15c>)
 800203c:	f7fe fd84 	bl	8000b48 <__aeabi_dcmpgt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <DetectChute+0xe6>
 8002046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa95 	bl	8000578 <__aeabi_f2d>
 800204e:	a31c      	add	r3, pc, #112	; (adr r3, 80020c0 <DetectChute+0x148>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fd5a 	bl	8000b0c <__aeabi_dcmplt>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <DetectChute+0xea>
	        		          	        // If acceleration value exceeds 1.2 or 0.8, exit loop
	        		          	        	falldetected=0;
 800205e:	2300      	movs	r3, #0
 8002060:	72fb      	strb	r3, [r7, #11]
	        		          	        }
	        		          	        i++;
 8002062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002064:	3301      	adds	r3, #1
 8002066:	677b      	str	r3, [r7, #116]	; 0x74
	        		          	   while (falldetected || i<10) {
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1bb      	bne.n	8001fe6 <DetectChute+0x6e>
 800206e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002070:	2b09      	cmp	r3, #9
 8002072:	ddb8      	ble.n	8001fe6 <DetectChute+0x6e>
	        		          	      }
	        		          	  if(falldetected==1)
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d11a      	bne.n	80020b0 <DetectChute+0x138>
	        		          	   {
	        		          		   sprintf(ch,"fall detected");
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4916      	ldr	r1, [pc, #88]	; (80020d8 <DetectChute+0x160>)
 8002080:	4618      	mov	r0, r3
 8002082:	f007 fd19 	bl	8009ab8 <siprintf>
	        		         	       HAL_UART_Transmit(&huart2, (uint8_t *)ch, strlen(ch), 100);
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f908 	bl	80002a0 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	f107 010c 	add.w	r1, r7, #12
 8002098:	2364      	movs	r3, #100	; 0x64
 800209a:	480d      	ldr	r0, [pc, #52]	; (80020d0 <DetectChute+0x158>)
 800209c:	f002 fec8 	bl	8004e30 <HAL_UART_Transmit>
	        		     	           xQueueSend(DetectChuteQueueHandle,&falldetected,10);
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <DetectChute+0x164>)
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	f107 010b 	add.w	r1, r7, #11
 80020a8:	2300      	movs	r3, #0
 80020aa:	220a      	movs	r2, #10
 80020ac:	f004 f948 	bl	8006340 <xQueueGenericSend>
	        		          	   }
	        		             }
	        		          vTaskDelay(200/portTICK_RATE_MS);
 80020b0:	20c8      	movs	r0, #200	; 0xc8
 80020b2:	f004 fddd 	bl	8006c70 <vTaskDelay>
	          xQueueReceive(AccelQueueHandle, &acc,10);
 80020b6:	e763      	b.n	8001f80 <DetectChute+0x8>
 80020b8:	66666666 	.word	0x66666666
 80020bc:	3fe66666 	.word	0x3fe66666
 80020c0:	9999999a 	.word	0x9999999a
 80020c4:	3fe99999 	.word	0x3fe99999
 80020c8:	200005f0 	.word	0x200005f0
 80020cc:	0800d170 	.word	0x0800d170
 80020d0:	20000548 	.word	0x20000548
 80020d4:	3ff33333 	.word	0x3ff33333
 80020d8:	0800d17c 	.word	0x0800d17c
 80020dc:	200005f4 	.word	0x200005f4

080020e0 <GSM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GSM */
void GSM(void const * argument)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ce      	sub	sp, #312	; 0x138
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80020ea:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020ee:	6018      	str	r0, [r3, #0]
	char location[100];
  /* Infinite loop */
  for(;;)
  {

	  if( xQueueReceive( ButtonQueueHandle, &buttonPressed, 0 ))
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <GSM+0xe0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f107 016f 	add.w	r1, r7, #111	; 0x6f
 80020f8:	2200      	movs	r2, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 fa1e 	bl	800653c <xQueueReceive>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d014      	beq.n	8002130 <GSM+0x50>
	  		{
		  xQueueReceive(GPSQueueHandle,&location,0);
 8002106:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <GSM+0xe4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f107 0108 	add.w	r1, r7, #8
 800210e:	2200      	movs	r2, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fa13 	bl	800653c <xQueueReceive>
		  sprintf(msg,"Alerte ! Une situation critique s'est produite. Besoin d'assistance. Localisation: %s", location);
 8002116:	f107 0208 	add.w	r2, r7, #8
 800211a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800211e:	492a      	ldr	r1, [pc, #168]	; (80021c8 <GSM+0xe8>)
 8002120:	4618      	mov	r0, r3
 8002122:	f007 fcc9 	bl	8009ab8 <siprintf>
		  SendSms(msg);
 8002126:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff fda8 	bl	8001c80 <SendSms>
	  		}

	  if( xQueueReceive( DetectChuteQueueHandle, &falldetected, 0 )  == pdPASS)
 8002130:	4b26      	ldr	r3, [pc, #152]	; (80021cc <GSM+0xec>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f107 016e 	add.w	r1, r7, #110	; 0x6e
 8002138:	2200      	movs	r2, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f004 f9fe 	bl	800653c <xQueueReceive>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d114      	bne.n	8002170 <GSM+0x90>
	  		{
		  xQueueReceive(GPSQueueHandle,&location,0);
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <GSM+0xe4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f107 0108 	add.w	r1, r7, #8
 800214e:	2200      	movs	r2, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f004 f9f3 	bl	800653c <xQueueReceive>
		  sprintf(msg,"Urgence! détection de chute. Voici sa localisation: %s", location);
 8002156:	f107 0208 	add.w	r2, r7, #8
 800215a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800215e:	491c      	ldr	r1, [pc, #112]	; (80021d0 <GSM+0xf0>)
 8002160:	4618      	mov	r0, r3
 8002162:	f007 fca9 	bl	8009ab8 <siprintf>
		  SendSms(msg);
 8002166:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fd88 	bl	8001c80 <SendSms>
	  		}
	  if(new_sms_received)
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <GSM+0xf4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01e      	beq.n	80021b8 <GSM+0xd8>
	  	  		{
		  if (strcmp(rx_buffer, "localisation"))
 800217a:	4917      	ldr	r1, [pc, #92]	; (80021d8 <GSM+0xf8>)
 800217c:	4817      	ldr	r0, [pc, #92]	; (80021dc <GSM+0xfc>)
 800217e:	f7fe f82f 	bl	80001e0 <strcmp>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <GSM+0xd8>
		  {
	  		  xQueueReceive(GPSQueueHandle,&location,0);
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <GSM+0xe4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f107 0108 	add.w	r1, r7, #8
 8002190:	2200      	movs	r2, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f9d2 	bl	800653c <xQueueReceive>
	  		  sprintf(msg,"Voici sa localisation: %s", location);
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <GSM+0x100>)
 80021a2:	4618      	mov	r0, r3
 80021a4:	f007 fc88 	bl	8009ab8 <siprintf>
	  		  new_sms_received = 0; // Clear the flag
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <GSM+0xf4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
	  		  SendSms(msg);
 80021ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fd64 	bl	8001c80 <SendSms>
		  }
	  	  		}

	  vTaskDelay(100/portTICK_RATE_MS);
 80021b8:	2064      	movs	r0, #100	; 0x64
 80021ba:	f004 fd59 	bl	8006c70 <vTaskDelay>
	  if( xQueueReceive( ButtonQueueHandle, &buttonPressed, 0 ))
 80021be:	e797      	b.n	80020f0 <GSM+0x10>
 80021c0:	200005fc 	.word	0x200005fc
 80021c4:	200005f8 	.word	0x200005f8
 80021c8:	0800d18c 	.word	0x0800d18c
 80021cc:	200005f4 	.word	0x200005f4
 80021d0:	0800d1e4 	.word	0x0800d1e4
 80021d4:	20000936 	.word	0x20000936
 80021d8:	0800d21c 	.word	0x0800d21c
 80021dc:	20000834 	.word	0x20000834
 80021e0:	0800d22c 	.word	0x0800d22c

080021e4 <AlertButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AlertButton */
void AlertButton(void const * argument)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AlertButton */
	uint8_t buttonPressed=1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==0)
 80021f0:	2102      	movs	r1, #2
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <AlertButton+0x3c>)
 80021f4:	f000 fe6e 	bl	8002ed4 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f8      	bne.n	80021f0 <AlertButton+0xc>
	  {
		  xQueueSend(ButtonQueueHandle, &buttonPressed, portMAX_DELAY);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <AlertButton+0x40>)
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	f107 010f 	add.w	r1, r7, #15
 8002206:	2300      	movs	r3, #0
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	f004 f898 	bl	8006340 <xQueueGenericSend>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002210:	2110      	movs	r1, #16
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <AlertButton+0x44>)
 8002214:	f000 fe8f 	bl	8002f36 <HAL_GPIO_TogglePin>
		  vTaskDelay(100);
 8002218:	2064      	movs	r0, #100	; 0x64
 800221a:	f004 fd29 	bl	8006c70 <vTaskDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)==0)
 800221e:	e7e7      	b.n	80021f0 <AlertButton+0xc>
 8002220:	40020800 	.word	0x40020800
 8002224:	200005fc 	.word	0x200005fc
 8002228:	40020400 	.word	0x40020400

0800222c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800223e:	f000 fb0d 	bl	800285c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40010000 	.word	0x40010000

08002250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002258:	e7fe      	b.n	8002258 <Error_Handler+0x8>
	...

0800225c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_MspInit+0x54>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_MspInit+0x54>)
 800226c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_MspInit+0x54>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_MspInit+0x54>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_MspInit+0x54>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_MspInit+0x54>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	210f      	movs	r1, #15
 800229e:	f06f 0001 	mvn.w	r0, #1
 80022a2:	f000 fbd7 	bl	8002a54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_I2C_MspInit+0x84>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12c      	bne.n	8002330 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_I2C_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <HAL_I2C_MspInit+0x88>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_I2C_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002304:	2304      	movs	r3, #4
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	480c      	ldr	r0, [pc, #48]	; (8002340 <HAL_I2C_MspInit+0x8c>)
 8002310:	f000 fc5c 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_I2C_MspInit+0x88>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_I2C_MspInit+0x88>)
 800231e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_I2C_MspInit+0x88>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40005400 	.word	0x40005400
 800233c:	40023800 	.word	0x40023800
 8002340:	40020400 	.word	0x40020400

08002344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08e      	sub	sp, #56	; 0x38
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a53      	ldr	r2, [pc, #332]	; (80024b0 <HAL_UART_MspInit+0x16c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d135      	bne.n	80023d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <HAL_UART_MspInit+0x170>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a51      	ldr	r2, [pc, #324]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <HAL_UART_MspInit+0x170>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800239e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b0:	2307      	movs	r3, #7
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	483f      	ldr	r0, [pc, #252]	; (80024b8 <HAL_UART_MspInit+0x174>)
 80023bc:	f000 fc06 	bl	8002bcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2106      	movs	r1, #6
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f000 fb45 	bl	8002a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ca:	2025      	movs	r0, #37	; 0x25
 80023cc:	f000 fb5e 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023d0:	e06a      	b.n	80024a8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_UART_MspInit+0x178>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d12c      	bne.n	8002436 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_UART_MspInit+0x170>)
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	4a33      	ldr	r2, [pc, #204]	; (80024b4 <HAL_UART_MspInit+0x170>)
 80023e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ea:	6413      	str	r3, [r2, #64]	; 0x40
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_UART_MspInit+0x170>)
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <HAL_UART_MspInit+0x170>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a2c      	ldr	r2, [pc, #176]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_UART_MspInit+0x170>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002414:	230c      	movs	r3, #12
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002424:	2307      	movs	r3, #7
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	4619      	mov	r1, r3
 800242e:	4822      	ldr	r0, [pc, #136]	; (80024b8 <HAL_UART_MspInit+0x174>)
 8002430:	f000 fbcc 	bl	8002bcc <HAL_GPIO_Init>
}
 8002434:	e038      	b.n	80024a8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a21      	ldr	r2, [pc, #132]	; (80024c0 <HAL_UART_MspInit+0x17c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d133      	bne.n	80024a8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	4a1a      	ldr	r2, [pc, #104]	; (80024b4 <HAL_UART_MspInit+0x170>)
 800244a:	f043 0320 	orr.w	r3, r3, #32
 800244e:	6453      	str	r3, [r2, #68]	; 0x44
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <HAL_UART_MspInit+0x170>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_UART_MspInit+0x170>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002478:	23c0      	movs	r3, #192	; 0xc0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002488:	2308      	movs	r3, #8
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	480c      	ldr	r0, [pc, #48]	; (80024c4 <HAL_UART_MspInit+0x180>)
 8002494:	f000 fb9a 	bl	8002bcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2105      	movs	r1, #5
 800249c:	2047      	movs	r0, #71	; 0x47
 800249e:	f000 fad9 	bl	8002a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024a2:	2047      	movs	r0, #71	; 0x47
 80024a4:	f000 faf2 	bl	8002a8c <HAL_NVIC_EnableIRQ>
}
 80024a8:	bf00      	nop
 80024aa:	3738      	adds	r7, #56	; 0x38
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40011400 	.word	0x40011400
 80024c4:	40020800 	.word	0x40020800

080024c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_InitTick+0xd0>)
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <HAL_InitTick+0xd0>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6453      	str	r3, [r2, #68]	; 0x44
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_InitTick+0xd0>)
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 f9a0 	bl	8004844 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002504:	f002 f98a 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 8002508:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <HAL_InitTick+0xd4>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	3b01      	subs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_InitTick+0xd8>)
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_InitTick+0xdc>)
 800251c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_InitTick+0xd8>)
 8002520:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002524:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002526:	4a1e      	ldr	r2, [pc, #120]	; (80025a0 <HAL_InitTick+0xd8>)
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_InitTick+0xd8>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_InitTick+0xd8>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_InitTick+0xd8>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800253e:	4818      	ldr	r0, [pc, #96]	; (80025a0 <HAL_InitTick+0xd8>)
 8002540:	f002 f9b2 	bl	80048a8 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800254a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11b      	bne.n	800258a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002552:	4813      	ldr	r0, [pc, #76]	; (80025a0 <HAL_InitTick+0xd8>)
 8002554:	f002 fa02 	bl	800495c <HAL_TIM_Base_Start_IT>
 8002558:	4603      	mov	r3, r0
 800255a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800255e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002562:	2b00      	cmp	r3, #0
 8002564:	d111      	bne.n	800258a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002566:	2019      	movs	r0, #25
 8002568:	f000 fa90 	bl	8002a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	d808      	bhi.n	8002584 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002572:	2200      	movs	r2, #0
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	2019      	movs	r0, #25
 8002578:	f000 fa6c 	bl	8002a54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <HAL_InitTick+0xe0>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e002      	b.n	800258a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800258a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800258e:	4618      	mov	r0, r3
 8002590:	3730      	adds	r7, #48	; 0x30
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	20000938 	.word	0x20000938
 80025a4:	40010000 	.word	0x40010000
 80025a8:	20000014 	.word	0x20000014

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	e7fe      	b.n	80025b0 <NMI_Handler+0x4>

080025b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <HardFault_Handler+0x4>

080025b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <MemManage_Handler+0x4>

080025be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <UsageFault_Handler+0x4>

080025ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025de:	f002 fa1f 	bl	8004a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000938 	.word	0x20000938

080025ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <USART1_IRQHandler+0x10>)
 80025f2:	f002 fccd 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000500 	.word	0x20000500

08002600 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <USART6_IRQHandler+0x10>)
 8002606:	f002 fcc3 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000590 	.word	0x20000590

08002614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_kill>:

int _kill(int pid, int sig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800262e:	f007 fb7b 	bl	8009d28 <__errno>
 8002632:	4603      	mov	r3, r0
 8002634:	2216      	movs	r2, #22
 8002636:	601a      	str	r2, [r3, #0]
  return -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_exit>:

void _exit (int status)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ffe7 	bl	8002624 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002656:	e7fe      	b.n	8002656 <_exit+0x12>

08002658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00a      	b.n	8002680 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800266a:	f3af 8000 	nop.w
 800266e:	4601      	mov	r1, r0
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	60ba      	str	r2, [r7, #8]
 8002676:	b2ca      	uxtb	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbf0      	blt.n	800266a <_read+0x12>
  }

  return len;
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e009      	b.n	80026b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf1      	blt.n	80026a4 <_write+0x12>
  }
  return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_close>:

int _close(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f2:	605a      	str	r2, [r3, #4]
  return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <_isatty>:

int _isatty(int file)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <_sbrk+0x5c>)
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <_sbrk+0x60>)
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <_sbrk+0x64>)
 8002752:	4a12      	ldr	r2, [pc, #72]	; (800279c <_sbrk+0x68>)
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d207      	bcs.n	8002774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002764:	f007 fae0 	bl	8009d28 <__errno>
 8002768:	4603      	mov	r3, r0
 800276a:	220c      	movs	r2, #12
 800276c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e009      	b.n	8002788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <_sbrk+0x64>)
 8002784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20020000 	.word	0x20020000
 8002794:	00000400 	.word	0x00000400
 8002798:	20000980 	.word	0x20000980
 800279c:	20004828 	.word	0x20004828

080027a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <SystemInit+0x20>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <SystemInit+0x20>)
 80027ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c8:	f7ff ffea 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f2:	f007 fa9f 	bl	8009d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027f6:	f7fe feff 	bl	80015f8 <main>
  bx  lr    
 80027fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002808:	0800d6bc 	.word	0x0800d6bc
  ldr r2, =_sbss
 800280c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002810:	20004828 	.word	0x20004828

08002814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC_IRQHandler>
	...

08002818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800281c:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_Init+0x40>)
 8002822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_Init+0x40>)
 800282e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HAL_Init+0x40>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <HAL_Init+0x40>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002840:	2003      	movs	r0, #3
 8002842:	f000 f8fc 	bl	8002a3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002846:	2007      	movs	r0, #7
 8002848:	f7ff fe3e 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800284c:	f7ff fd06 	bl	800225c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023c00 	.word	0x40023c00

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000018 	.word	0x20000018
 8002880:	20000984 	.word	0x20000984

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000984 	.word	0x20000984

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000018 	.word	0x20000018

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff4c 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a66:	f7ff ff61 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002a6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	6978      	ldr	r0, [r7, #20]
 8002a72:	f7ff ffb1 	bl	80029d8 <NVIC_EncodePriority>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff80 	bl	8002984 <__NVIC_SetPriority>
}
 8002a84:	bf00      	nop
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff54 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ab6:	f7ff fee5 	bl	8002884 <HAL_GetTick>
 8002aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d008      	beq.n	8002ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e052      	b.n	8002b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0216 	bic.w	r2, r2, #22
 8002ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_DMA_Abort+0x62>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0208 	bic.w	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2a:	e013      	b.n	8002b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b2c:	f7ff feaa 	bl	8002884 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d90c      	bls.n	8002b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e015      	b.n	8002b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e4      	bne.n	8002b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	223f      	movs	r2, #63	; 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00c      	b.n	8002bc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2205      	movs	r2, #5
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e159      	b.n	8002e9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8148 	bne.w	8002e96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d130      	bne.n	8002c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0201 	and.w	r2, r3, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d017      	beq.n	8002cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a2 	beq.w	8002e96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a56      	ldr	r2, [pc, #344]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <HAL_GPIO_Init+0x2e8>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a49      	ldr	r2, [pc, #292]	; (8002ebc <HAL_GPIO_Init+0x2f0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x202>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a48      	ldr	r2, [pc, #288]	; (8002ec0 <HAL_GPIO_Init+0x2f4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x1fe>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a47      	ldr	r2, [pc, #284]	; (8002ec4 <HAL_GPIO_Init+0x2f8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x1fa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <HAL_GPIO_Init+0x2fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x1f6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <HAL_GPIO_Init+0x300>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x1f2>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x204>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x2ec>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_GPIO_Init+0x304>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f aea2 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	e001      	b.n	8002ef6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	041a      	lsls	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	400b      	ands	r3, r1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12b      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff f98e 	bl	80022b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f001 fc10 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a81      	ldr	r2, [pc, #516]	; (80031e0 <HAL_I2C_Init+0x274>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d807      	bhi.n	8002ff0 <HAL_I2C_Init+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_I2C_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	; (80031e8 <HAL_I2C_Init+0x27c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a78      	ldr	r2, [pc, #480]	; (80031ec <HAL_I2C_Init+0x280>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <HAL_I2C_Init+0xd4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	e009      	b.n	8003054 <HAL_I2C_Init+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_I2C_Init+0x284>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	495c      	ldr	r1, [pc, #368]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d819      	bhi.n	80030a8 <HAL_I2C_Init+0x13c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_I2C_Init+0x138>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	e051      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x168>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x18e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x196>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	461a      	mov	r2, r3
 8003200:	460b      	mov	r3, r1
 8003202:	817b      	strh	r3, [r7, #10]
 8003204:	4613      	mov	r3, r2
 8003206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff fb3c 	bl	8002884 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	f040 80e0 	bne.w	80033dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	4970      	ldr	r1, [pc, #448]	; (80033e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fc7e 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	e0d3      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2C_Master_Transmit+0x50>
 8003240:	2302      	movs	r3, #2
 8003242:	e0cc      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d007      	beq.n	800326a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	; 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a50      	ldr	r2, [pc, #320]	; (80033ec <HAL_I2C_Master_Transmit+0x1f8>)
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 face 	bl	8003854 <I2C_MasterRequestWrite>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e08d      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d8:	e066      	b.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fd3c 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06b      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d11b      	bne.n	800337c <HAL_I2C_Master_Transmit+0x188>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fd33 	bl	8003dec <I2C_WaitOnBTFFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01a      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d194      	bne.n	80032da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	; 0x30
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800340a:	f7ff fa3b 	bl	8002884 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b20      	cmp	r3, #32
 800341a:	f040 8214 	bne.w	8003846 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2319      	movs	r3, #25
 8003424:	2201      	movs	r2, #1
 8003426:	497b      	ldr	r1, [pc, #492]	; (8003614 <HAL_I2C_Mem_Read+0x224>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fb7d 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003434:	2302      	movs	r3, #2
 8003436:	e207      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Mem_Read+0x56>
 8003442:	2302      	movs	r3, #2
 8003444:	e200      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d007      	beq.n	800346c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2222      	movs	r2, #34	; 0x22
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_I2C_Mem_Read+0x228>)
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ae:	88f8      	ldrh	r0, [r7, #6]
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	8979      	ldrh	r1, [r7, #10]
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4603      	mov	r3, r0
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa4a 	bl	8003958 <I2C_RequestMemoryRead>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1bc      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d113      	bne.n	80034fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e190      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	2b01      	cmp	r3, #1
 8003504:	d11b      	bne.n	800353e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e170      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	2b02      	cmp	r3, #2
 8003544:	d11b      	bne.n	800357e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	e150      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003594:	e144      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b03      	cmp	r3, #3
 800359c:	f200 80f1 	bhi.w	8003782 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d123      	bne.n	80035f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fc65 	bl	8003e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e145      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ee:	e117      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d14e      	bne.n	8003696 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	2200      	movs	r2, #0
 8003600:	4906      	ldr	r1, [pc, #24]	; (800361c <HAL_I2C_Mem_Read+0x22c>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa90 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e11a      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
 8003612:	bf00      	nop
 8003614:	00100002 	.word	0x00100002
 8003618:	ffff0000 	.word	0xffff0000
 800361c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003694:	e0c4      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369c:	2200      	movs	r2, #0
 800369e:	496c      	ldr	r1, [pc, #432]	; (8003850 <HAL_I2C_Mem_Read+0x460>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa41 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cb      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f8:	2200      	movs	r2, #0
 80036fa:	4955      	ldr	r1, [pc, #340]	; (8003850 <HAL_I2C_Mem_Read+0x460>)
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa13 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e09d      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003780:	e04e      	b.n	8003820 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fb78 	bl	8003e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e058      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d124      	bne.n	8003820 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f aeb6 	bne.w	8003596 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	; 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010004 	.word	0x00010004

08003854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d006      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b12      	cmp	r3, #18
 8003896:	d107      	bne.n	80038a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f937 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d103      	bne.n	80038d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e035      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e01b      	b.n	8003930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	11db      	asrs	r3, r3, #7
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f063 030f 	orn	r3, r3, #15
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	490e      	ldr	r1, [pc, #56]	; (8003950 <I2C_MasterRequestWrite+0xfc>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f980 	bl	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e010      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4907      	ldr	r1, [pc, #28]	; (8003954 <I2C_MasterRequestWrite+0x100>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f970 	bl	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010008 	.word	0x00010008
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	461a      	mov	r2, r3
 8003966:	4603      	mov	r3, r0
 8003968:	817b      	strh	r3, [r7, #10]
 800396a:	460b      	mov	r3, r1
 800396c:	813b      	strh	r3, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003980:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003990:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2200      	movs	r2, #0
 800399a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f8c2 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b8:	d103      	bne.n	80039c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0aa      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	4952      	ldr	r1, [pc, #328]	; (8003b24 <I2C_RequestMemoryRead+0x1cc>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f91d 	bl	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e097      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f9a8 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e076      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a34:	893b      	ldrh	r3, [r7, #8]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	e021      	b.n	8003a84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	0a1b      	lsrs	r3, r3, #8
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	6a39      	ldr	r1, [r7, #32]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f982 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d107      	bne.n	8003a76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e050      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7a:	893b      	ldrh	r3, [r7, #8]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f967 	bl	8003d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00d      	beq.n	8003ab0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e035      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f82b 	bl	8003b28 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	d103      	bne.n	8003af0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e013      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	4906      	ldr	r1, [pc, #24]	; (8003b24 <I2C_RequestMemoryRead+0x1cc>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f886 	bl	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	00010002 	.word	0x00010002

08003b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b38:	e048      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d044      	beq.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fe fe9f 	bl	8002884 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d139      	bne.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10d      	bne.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	e00c      	b.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	43da      	mvns	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d116      	bne.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e023      	b.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10d      	bne.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	e00c      	b.n	8003c0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	bf0c      	ite	eq
 8003c04:	2301      	moveq	r3, #1
 8003c06:	2300      	movne	r3, #0
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d093      	beq.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c2a:	e071      	b.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d123      	bne.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e067      	b.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d041      	beq.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe fdfa 	bl	8002884 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d136      	bne.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10c      	bne.n	8003cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e00b      	b.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	43da      	mvns	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e021      	b.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10c      	bne.n	8003d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	43da      	mvns	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e00b      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f af6d 	bne.w	8003c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d68:	e034      	b.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8e3 	bl	8003f36 <I2C_IsAcknowledgeFailed>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e034      	b.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d028      	beq.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d82:	f7fe fd7f 	bl	8002884 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11d      	bne.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d016      	beq.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e007      	b.n	8003de4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d1c3      	bne.n	8003d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df8:	e034      	b.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 f89b 	bl	8003f36 <I2C_IsAcknowledgeFailed>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e034      	b.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d028      	beq.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fe fd37 	bl	8002884 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11d      	bne.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d016      	beq.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d1c3      	bne.n	8003dfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e88:	e049      	b.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d119      	bne.n	8003ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0210 	mvn.w	r2, #16
 8003ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e030      	b.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fe fcda 	bl	8002884 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d11d      	bne.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d016      	beq.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d1ae      	bne.n	8003e8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4c:	d11b      	bne.n	8003f86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e267      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d075      	beq.n	800409e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	4b88      	ldr	r3, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbe:	4b85      	ldr	r3, [pc, #532]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d112      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fca:	4b82      	ldr	r3, [pc, #520]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	4b7e      	ldr	r3, [pc, #504]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05b      	beq.n	800409c <HAL_RCC_OscConfig+0x108>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d157      	bne.n	800409c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e242      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x74>
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e01d      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004010:	d10c      	bne.n	800402c <HAL_RCC_OscConfig+0x98>
 8004012:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a6f      	ldr	r2, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b6d      	ldr	r3, [pc, #436]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6c      	ldr	r2, [pc, #432]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e00b      	b.n	8004044 <HAL_RCC_OscConfig+0xb0>
 800402c:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a68      	ldr	r2, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a65      	ldr	r2, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 800403e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d013      	beq.n	8004074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fe fc1a 	bl	8002884 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe fc16 	bl	8002884 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e207      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0xc0>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe fc06 	bl	8002884 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe fc02 	bl	8002884 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1f3      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0xe8>
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d063      	beq.n	8004172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b6:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d11c      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d116      	bne.n	80040fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1c7      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4937      	ldr	r1, [pc, #220]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	e03a      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d020      	beq.n	8004146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004104:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <HAL_RCC_OscConfig+0x244>)
 8004106:	2201      	movs	r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7fe fbbb 	bl	8002884 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004112:	f7fe fbb7 	bl	8002884 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1a8      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4925      	ldr	r1, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_RCC_OscConfig+0x244>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fb9a 	bl	8002884 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004154:	f7fe fb96 	bl	8002884 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e187      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d036      	beq.n	80041ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_RCC_OscConfig+0x248>)
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fe fb7a 	bl	8002884 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004194:	f7fe fb76 	bl	8002884 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e167      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x240>)
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0f0      	beq.n	8004194 <HAL_RCC_OscConfig+0x200>
 80041b2:	e01b      	b.n	80041ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_OscConfig+0x248>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe fb63 	bl	8002884 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	e00e      	b.n	80041e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe fb5f 	bl	8002884 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d907      	bls.n	80041e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e150      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	42470000 	.word	0x42470000
 80041dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ea      	bne.n	80041c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8097 	beq.w	8004328 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b81      	ldr	r3, [pc, #516]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10f      	bne.n	800422a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4a7c      	ldr	r2, [pc, #496]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	; 0x40
 800421a:	4b7a      	ldr	r3, [pc, #488]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004226:	2301      	movs	r3, #1
 8004228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b77      	ldr	r3, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x474>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004236:	4b74      	ldr	r3, [pc, #464]	; (8004408 <HAL_RCC_OscConfig+0x474>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a73      	ldr	r2, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0x474>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fe fb1f 	bl	8002884 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fe fb1b 	bl	8002884 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e10c      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x474>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x2ea>
 8004270:	4b64      	ldr	r3, [pc, #400]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a63      	ldr	r2, [pc, #396]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e01c      	b.n	80042b8 <HAL_RCC_OscConfig+0x324>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b05      	cmp	r3, #5
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x30c>
 8004286:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a5e      	ldr	r2, [pc, #376]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
 8004292:	4b5c      	ldr	r3, [pc, #368]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0x324>
 80042a0:	4b58      	ldr	r3, [pc, #352]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4a57      	ldr	r2, [pc, #348]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70
 80042ac:	4b55      	ldr	r3, [pc, #340]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a54      	ldr	r2, [pc, #336]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe fae0 	bl	8002884 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe fadc 	bl	8002884 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0cb      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b49      	ldr	r3, [pc, #292]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCC_OscConfig+0x334>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fe faca 	bl	8002884 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fe fac6 	bl	8002884 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0b5      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430a:	4b3e      	ldr	r3, [pc, #248]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ee      	bne.n	80042f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431c:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	4a38      	ldr	r2, [pc, #224]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a1 	beq.w	8004474 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b08      	cmp	r3, #8
 800433c:	d05c      	beq.n	80043f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d141      	bne.n	80043ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004346:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_OscConfig+0x478>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fe fa9a 	bl	8002884 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7fe fa96 	bl	8002884 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e087      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004366:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	491b      	ldr	r1, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x478>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fe fa6f 	bl	8002884 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043aa:	f7fe fa6b 	bl	8002884 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e05c      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x416>
 80043c8:	e054      	b.n	8004474 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_RCC_OscConfig+0x478>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fe fa58 	bl	8002884 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fe fa54 	bl	8002884 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e045      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_OscConfig+0x470>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x444>
 80043f6:	e03d      	b.n	8004474 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e038      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
 800440c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x4ec>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d028      	beq.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d121      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d11a      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004446:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004448:	4293      	cmp	r3, r2
 800444a:	d111      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d107      	bne.n	8004470 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0cc      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b68      	ldr	r3, [pc, #416]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d90c      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b8      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f0:	4b53      	ldr	r3, [pc, #332]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a52      	ldr	r2, [pc, #328]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	494d      	ldr	r1, [pc, #308]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d044      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d119      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e07f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3b      	ldr	r3, [pc, #236]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e067      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4934      	ldr	r1, [pc, #208]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fe f986 	bl	8002884 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fe f982 	bl	8002884 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e04f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20c      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e032      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4916      	ldr	r1, [pc, #88]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	490e      	ldr	r1, [pc, #56]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800460a:	f000 f821 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800460e:	4602      	mov	r2, r0
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	490a      	ldr	r1, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	5ccb      	ldrb	r3, [r1, r3]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd ff4c 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023c00 	.word	0x40023c00
 8004640:	40023800 	.word	0x40023800
 8004644:	0800d250 	.word	0x0800d250
 8004648:	20000010 	.word	0x20000010
 800464c:	20000014 	.word	0x20000014

08004650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b090      	sub	sp, #64	; 0x40
 8004656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
 800465c:	2300      	movs	r3, #0
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	2300      	movs	r3, #0
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b08      	cmp	r3, #8
 8004672:	d00d      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x40>
 8004674:	2b08      	cmp	r3, #8
 8004676:	f200 80a1 	bhi.w	80047bc <HAL_RCC_GetSysClockFreq+0x16c>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x34>
 800467e:	2b04      	cmp	r3, #4
 8004680:	d003      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x3a>
 8004682:	e09b      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004688:	e09b      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800468a:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800468c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800468e:	e098      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004690:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800469a:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a6:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	2200      	movs	r2, #0
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	627a      	str	r2, [r7, #36]	; 0x24
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b8:	2100      	movs	r1, #0
 80046ba:	4b47      	ldr	r3, [pc, #284]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046bc:	fb03 f201 	mul.w	r2, r3, r1
 80046c0:	2300      	movs	r3, #0
 80046c2:	fb00 f303 	mul.w	r3, r0, r3
 80046c6:	4413      	add	r3, r2
 80046c8:	4a43      	ldr	r2, [pc, #268]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ca:	fba0 1202 	umull	r1, r2, r0, r2
 80046ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d0:	460a      	mov	r2, r1
 80046d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80046d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d6:	4413      	add	r3, r2
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046dc:	2200      	movs	r2, #0
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	61fa      	str	r2, [r7, #28]
 80046e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046ea:	f7fc fae5 	bl	8000cb8 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4613      	mov	r3, r2
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f6:	e053      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f8:	4b35      	ldr	r3, [pc, #212]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	2200      	movs	r2, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	617a      	str	r2, [r7, #20]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800470a:	f04f 0b00 	mov.w	fp, #0
 800470e:	4652      	mov	r2, sl
 8004710:	465b      	mov	r3, fp
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	0159      	lsls	r1, r3, #5
 800471c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004720:	0150      	lsls	r0, r2, #5
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	ebb2 080a 	subs.w	r8, r2, sl
 800472a:	eb63 090b 	sbc.w	r9, r3, fp
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800473a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800473e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004742:	ebb2 0408 	subs.w	r4, r2, r8
 8004746:	eb63 0509 	sbc.w	r5, r3, r9
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	00eb      	lsls	r3, r5, #3
 8004754:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004758:	00e2      	lsls	r2, r4, #3
 800475a:	4614      	mov	r4, r2
 800475c:	461d      	mov	r5, r3
 800475e:	eb14 030a 	adds.w	r3, r4, sl
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	eb45 030b 	adc.w	r3, r5, fp
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004776:	4629      	mov	r1, r5
 8004778:	028b      	lsls	r3, r1, #10
 800477a:	4621      	mov	r1, r4
 800477c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004780:	4621      	mov	r1, r4
 8004782:	028a      	lsls	r2, r1, #10
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478a:	2200      	movs	r2, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	60fa      	str	r2, [r7, #12]
 8004790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004794:	f7fc fa90 	bl	8000cb8 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4613      	mov	r3, r2
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	3301      	adds	r3, #1
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3740      	adds	r7, #64	; 0x40
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	017d7840 	.word	0x017d7840

080047dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000010 	.word	0x20000010

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f8:	f7ff fff0 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4903      	ldr	r1, [pc, #12]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40023800 	.word	0x40023800
 8004818:	0800d260 	.word	0x0800d260

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004820:	f7ff ffdc 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0b5b      	lsrs	r3, r3, #13
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4903      	ldr	r1, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	0800d260 	.word	0x0800d260

08004844 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	220f      	movs	r2, #15
 8004852:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_RCC_GetClockConfig+0x5c>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <HAL_RCC_GetClockConfig+0x5c>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004886:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <HAL_RCC_GetClockConfig+0x60>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0207 	and.w	r2, r3, #7
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40023c00 	.word	0x40023c00

080048a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e041      	b.n	800493e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f839 	bl	8004946 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 f9b2 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e044      	b.n	80049fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIM_Base_Start_IT+0xb0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1a      	ldr	r2, [pc, #104]	; (8004a10 <HAL_TIM_Base_Start_IT+0xb4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <HAL_TIM_Base_Start_IT+0xb8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_TIM_Base_Start_IT+0xbc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <HAL_TIM_Base_Start_IT+0xc0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d111      	bne.n	80049ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b06      	cmp	r3, #6
 80049d8:	d010      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0201 	orr.w	r2, r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	e007      	b.n	80049fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40010000 	.word	0x40010000
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800
 8004a18:	40000c00 	.word	0x40000c00
 8004a1c:	40014000 	.word	0x40014000

08004a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0202 	mvn.w	r2, #2
 8004a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8d2 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8c4 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8d5 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01b      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0204 	mvn.w	r2, #4
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8ac 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f89e 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f8af 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0208 	mvn.w	r2, #8
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2204      	movs	r2, #4
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f886 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f878 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f889 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d020      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f860 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f852 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f863 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0201 	mvn.w	r2, #1
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fd fb50 	bl	800222c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8e6 	bl	8004d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f834 	bl	8004c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8b8 	bl	8004d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <TIM_Base_SetConfig+0xfc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a37      	ldr	r2, [pc, #220]	; (8004d50 <TIM_Base_SetConfig+0x100>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a36      	ldr	r2, [pc, #216]	; (8004d54 <TIM_Base_SetConfig+0x104>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a35      	ldr	r2, [pc, #212]	; (8004d58 <TIM_Base_SetConfig+0x108>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2b      	ldr	r2, [pc, #172]	; (8004d4c <TIM_Base_SetConfig+0xfc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d017      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <TIM_Base_SetConfig+0x100>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <TIM_Base_SetConfig+0x104>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <TIM_Base_SetConfig+0x108>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <TIM_Base_SetConfig+0x10c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <TIM_Base_SetConfig+0x110>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a23      	ldr	r2, [pc, #140]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0e      	ldr	r2, [pc, #56]	; (8004d4c <TIM_Base_SetConfig+0xfc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d105      	bne.n	8004d3e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f023 0201 	bic.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40000400 	.word	0x40000400
 8004d54:	40000800 	.word	0x40000800
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e042      	b.n	8004e28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd fac4 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fdbd 	bl	8005954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d175      	bne.n	8004f3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <HAL_UART_Transmit+0x2c>
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e06e      	b.n	8004f3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2221      	movs	r2, #33	; 0x21
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6e:	f7fd fd09 	bl	8002884 <HAL_GetTick>
 8004e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	88fa      	ldrh	r2, [r7, #6]
 8004e7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d108      	bne.n	8004e9c <HAL_UART_Transmit+0x6c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e003      	b.n	8004ea4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ea4:	e02e      	b.n	8004f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fb1f 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e03a      	b.n	8004f3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e007      	b.n	8004ef6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1cb      	bne.n	8004ea6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2140      	movs	r1, #64	; 0x40
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 faeb 	bl	80054f4 <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e000      	b.n	8004f3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f3c:	2302      	movs	r3, #2
  }
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d112      	bne.n	8004f86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive_IT+0x26>
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e00b      	b.n	8004f88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fb12 	bl	80055a6 <UART_Start_Receive_IT>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e000      	b.n	8004f88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0ba      	sub	sp, #232	; 0xe8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10f      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fbf2 	bl	80057d8 <UART_Receive_IT>
      return;
 8004ff4:	e25b      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 80de 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
 8005000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80d1 	beq.w	80051bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f043 0204 	orr.w	r2, r3, #4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d011      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800509e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f043 0208 	orr.w	r2, r3, #8
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 81f2 	beq.w	80054a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f003 0320 	and.w	r3, r3, #32
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
 80050cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb7d 	bl	80057d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_UART_IRQHandler+0x17a>
 8005102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa85 	bl	800561a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d141      	bne.n	80051a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3314      	adds	r3, #20
 8005146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800514a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800514e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1d9      	bne.n	800511e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005176:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <HAL_UART_IRQHandler+0x3e0>)
 8005178:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd fd02 	bl	8002b88 <HAL_DMA_Abort_IT>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d016      	beq.n	80051b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e00e      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f994 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	e00a      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f990 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a8:	e006      	b.n	80051b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f98c 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80051b6:	e175      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	bf00      	nop
    return;
 80051ba:	e173      	b.n	80054a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 814f 	bne.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 8148 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f003 0310 	and.w	r3, r3, #16
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8141 	beq.w	8005464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	f040 80b6 	bne.w	8005374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8145 	beq.w	80054a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005226:	429a      	cmp	r2, r3
 8005228:	f080 813e 	bcs.w	80054a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800523e:	f000 8088 	beq.w	8005352 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800525c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800526e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005272:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800527a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1d9      	bne.n	8005242 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800529e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e1      	bne.n	800528e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e3      	bne.n	80052ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	330c      	adds	r3, #12
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005322:	f023 0310 	bic.w	r3, r3, #16
 8005326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005334:	65ba      	str	r2, [r7, #88]	; 0x58
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800533a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e3      	bne.n	8005310 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	4618      	mov	r0, r3
 800534e:	f7fd fbab 	bl	8002aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005360:	b29b      	uxth	r3, r3
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	b29b      	uxth	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8b7 	bl	80054dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800536e:	e09b      	b.n	80054a8 <HAL_UART_IRQHandler+0x518>
 8005370:	080056e1 	.word	0x080056e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537c:	b29b      	uxth	r3, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 808e 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8089 	beq.w	80054ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053be:	647a      	str	r2, [r7, #68]	; 0x44
 80053c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e3      	bne.n	800539a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	623b      	str	r3, [r7, #32]
   return(result);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053f6:	633a      	str	r2, [r7, #48]	; 0x30
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e3      	bne.n	80053d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	60fb      	str	r3, [r7, #12]
   return(result);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0310 	bic.w	r3, r3, #16
 800542e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800543c:	61fa      	str	r2, [r7, #28]
 800543e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	69b9      	ldr	r1, [r7, #24]
 8005442:	69fa      	ldr	r2, [r7, #28]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	617b      	str	r3, [r7, #20]
   return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e3      	bne.n	8005418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f83d 	bl	80054dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005462:	e023      	b.n	80054ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f943 	bl	8005708 <UART_Transmit_IT>
    return;
 8005482:	e014      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f983 	bl	80057a8 <UART_EndTransmit_IT>
    return;
 80054a2:	e004      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
    return;
 80054a4:	bf00      	nop
 80054a6:	e002      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <HAL_UART_IRQHandler+0x51e>
      return;
 80054ac:	bf00      	nop
  }
}
 80054ae:	37e8      	adds	r7, #232	; 0xe8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	4613      	mov	r3, r2
 8005502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	e03b      	b.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d037      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fd f9b9 	bl	8002884 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <UART_WaitOnFlagUntilTimeout+0x30>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e03a      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d023      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d020      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d01d      	beq.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b08      	cmp	r3, #8
 800554e:	d116      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 f857 	bl	800561a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2208      	movs	r2, #8
 8005570:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e00f      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4013      	ands	r3, r2
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	429a      	cmp	r2, r3
 800559a:	d0b4      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	4613      	mov	r3, r2
 80055b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2222      	movs	r2, #34	; 0x22
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0220 	orr.w	r2, r2, #32
 800560a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800561a:	b480      	push	{r7}
 800561c:	b095      	sub	sp, #84	; 0x54
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005642:	643a      	str	r2, [r7, #64]	; 0x40
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e5      	bne.n	8005622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	61fb      	str	r3, [r7, #28]
   return(result);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800567c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e5      	bne.n	8005656 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	2b01      	cmp	r3, #1
 8005690:	d119      	bne.n	80056c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 0310 	bic.w	r3, r3, #16
 80056a8:	647b      	str	r3, [r7, #68]	; 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056b2:	61ba      	str	r2, [r7, #24]
 80056b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6979      	ldr	r1, [r7, #20]
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	613b      	str	r3, [r7, #16]
   return(result);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056d4:	bf00      	nop
 80056d6:	3754      	adds	r7, #84	; 0x54
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fee4 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b21      	cmp	r3, #33	; 0x21
 800571a:	d13e      	bne.n	800579a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d114      	bne.n	8005750 <UART_Transmit_IT+0x48>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d110      	bne.n	8005750 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005742:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	621a      	str	r2, [r3, #32]
 800574e:	e008      	b.n	8005762 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6211      	str	r1, [r2, #32]
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29b      	uxth	r3, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4619      	mov	r1, r3
 8005770:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10f      	bne.n	8005796 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005784:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005794:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800579a:	2302      	movs	r3, #2
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fe73 	bl	80054b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	; 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b22      	cmp	r3, #34	; 0x22
 80057ea:	f040 80ae 	bne.w	800594a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d117      	bne.n	8005828 <UART_Receive_IT+0x50>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	b29a      	uxth	r2, r3
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
 8005826:	e026      	b.n	8005876 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d007      	beq.n	800584c <UART_Receive_IT+0x74>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <UART_Receive_IT+0x82>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e008      	b.n	800586c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005866:	b2da      	uxtb	r2, r3
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29b      	uxth	r3, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	4619      	mov	r1, r3
 8005884:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005886:	2b00      	cmp	r3, #0
 8005888:	d15d      	bne.n	8005946 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0220 	bic.w	r2, r2, #32
 8005898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d135      	bne.n	800593c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f023 0310 	bic.w	r3, r3, #16
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f6:	623a      	str	r2, [r7, #32]
 80058f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	61bb      	str	r3, [r7, #24]
   return(result);
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b10      	cmp	r3, #16
 8005916:	d10a      	bne.n	800592e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fdd1 	bl	80054dc <HAL_UARTEx_RxEventCallback>
 800593a:	e002      	b.n	8005942 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fc f8e7 	bl	8001b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e002      	b.n	800594c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e000      	b.n	800594c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800594a:	2302      	movs	r3, #2
  }
}
 800594c:	4618      	mov	r0, r3
 800594e:	3730      	adds	r7, #48	; 0x30
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005958:	b0c0      	sub	sp, #256	; 0x100
 800595a:	af00      	add	r7, sp, #0
 800595c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	68d9      	ldr	r1, [r3, #12]
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	ea40 0301 	orr.w	r3, r0, r1
 800597c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	431a      	orrs	r2, r3
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	431a      	orrs	r2, r3
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059ac:	f021 010c 	bic.w	r1, r1, #12
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059ba:	430b      	orrs	r3, r1
 80059bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ce:	6999      	ldr	r1, [r3, #24]
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	ea40 0301 	orr.w	r3, r0, r1
 80059da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b8f      	ldr	r3, [pc, #572]	; (8005c20 <UART_SetConfig+0x2cc>)
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d005      	beq.n	80059f4 <UART_SetConfig+0xa0>
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b8d      	ldr	r3, [pc, #564]	; (8005c24 <UART_SetConfig+0x2d0>)
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d104      	bne.n	80059fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059f4:	f7fe ff12 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 80059f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80059fc:	e003      	b.n	8005a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059fe:	f7fe fef9 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8005a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a10:	f040 810c 	bne.w	8005c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a36:	4621      	mov	r1, r4
 8005a38:	eb12 0801 	adds.w	r8, r2, r1
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	eb43 0901 	adc.w	r9, r3, r1
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a56:	4690      	mov	r8, r2
 8005a58:	4699      	mov	r9, r3
 8005a5a:	4623      	mov	r3, r4
 8005a5c:	eb18 0303 	adds.w	r3, r8, r3
 8005a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a64:	462b      	mov	r3, r5
 8005a66:	eb49 0303 	adc.w	r3, r9, r3
 8005a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a82:	460b      	mov	r3, r1
 8005a84:	18db      	adds	r3, r3, r3
 8005a86:	653b      	str	r3, [r7, #80]	; 0x50
 8005a88:	4613      	mov	r3, r2
 8005a8a:	eb42 0303 	adc.w	r3, r2, r3
 8005a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a98:	f7fb f90e 	bl	8000cb8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4b61      	ldr	r3, [pc, #388]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	011c      	lsls	r4, r3, #4
 8005aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005abc:	4642      	mov	r2, r8
 8005abe:	464b      	mov	r3, r9
 8005ac0:	1891      	adds	r1, r2, r2
 8005ac2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ac4:	415b      	adcs	r3, r3
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005acc:	4641      	mov	r1, r8
 8005ace:	eb12 0a01 	adds.w	sl, r2, r1
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aec:	4692      	mov	sl, r2
 8005aee:	469b      	mov	fp, r3
 8005af0:	4643      	mov	r3, r8
 8005af2:	eb1a 0303 	adds.w	r3, sl, r3
 8005af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005afa:	464b      	mov	r3, r9
 8005afc:	eb4b 0303 	adc.w	r3, fp, r3
 8005b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	18db      	adds	r3, r3, r3
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1e:	4613      	mov	r3, r2
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	647b      	str	r3, [r7, #68]	; 0x44
 8005b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b2e:	f7fb f8c3 	bl	8000cb8 <__aeabi_uldivmod>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	4b3b      	ldr	r3, [pc, #236]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2264      	movs	r2, #100	; 0x64
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	1acb      	subs	r3, r1, r3
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005b50:	fba3 2302 	umull	r2, r3, r3, r2
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b5c:	441c      	add	r4, r3
 8005b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	1891      	adds	r1, r2, r2
 8005b76:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b78:	415b      	adcs	r3, r3
 8005b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b80:	4641      	mov	r1, r8
 8005b82:	1851      	adds	r1, r2, r1
 8005b84:	6339      	str	r1, [r7, #48]	; 0x30
 8005b86:	4649      	mov	r1, r9
 8005b88:	414b      	adcs	r3, r1
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b98:	4659      	mov	r1, fp
 8005b9a:	00cb      	lsls	r3, r1, #3
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	00ca      	lsls	r2, r1, #3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	4642      	mov	r2, r8
 8005bae:	189b      	adds	r3, r3, r2
 8005bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	18db      	adds	r3, r3, r3
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bda:	4613      	mov	r3, r2
 8005bdc:	eb42 0303 	adc.w	r3, r2, r3
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bea:	f7fb f865 	bl	8000cb8 <__aeabi_uldivmod>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	2164      	movs	r1, #100	; 0x64
 8005bfc:	fb01 f303 	mul.w	r3, r1, r3
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	3332      	adds	r3, #50	; 0x32
 8005c06:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <UART_SetConfig+0x2d4>)
 8005c08:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	f003 0207 	and.w	r2, r3, #7
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4422      	add	r2, r4
 8005c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c1c:	e106      	b.n	8005e2c <UART_SetConfig+0x4d8>
 8005c1e:	bf00      	nop
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c3e:	4642      	mov	r2, r8
 8005c40:	464b      	mov	r3, r9
 8005c42:	1891      	adds	r1, r2, r2
 8005c44:	6239      	str	r1, [r7, #32]
 8005c46:	415b      	adcs	r3, r3
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c4e:	4641      	mov	r1, r8
 8005c50:	1854      	adds	r4, r2, r1
 8005c52:	4649      	mov	r1, r9
 8005c54:	eb43 0501 	adc.w	r5, r3, r1
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	00eb      	lsls	r3, r5, #3
 8005c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c66:	00e2      	lsls	r2, r4, #3
 8005c68:	4614      	mov	r4, r2
 8005c6a:	461d      	mov	r5, r3
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	18e3      	adds	r3, r4, r3
 8005c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c74:	464b      	mov	r3, r9
 8005c76:	eb45 0303 	adc.w	r3, r5, r3
 8005c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	008b      	lsls	r3, r1, #2
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	008a      	lsls	r2, r1, #2
 8005ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cac:	f7fb f804 	bl	8000cb8 <__aeabi_uldivmod>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4b60      	ldr	r3, [pc, #384]	; (8005e38 <UART_SetConfig+0x4e4>)
 8005cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	011c      	lsls	r4, r3, #4
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	61b9      	str	r1, [r7, #24]
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	1851      	adds	r1, r2, r1
 8005ce4:	6139      	str	r1, [r7, #16]
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	414b      	adcs	r3, r1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	00cb      	lsls	r3, r1, #3
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d02:	4651      	mov	r1, sl
 8005d04:	00ca      	lsls	r2, r1, #3
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d14:	464b      	mov	r3, r9
 8005d16:	460a      	mov	r2, r1
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d38:	4649      	mov	r1, r9
 8005d3a:	008b      	lsls	r3, r1, #2
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d42:	4641      	mov	r1, r8
 8005d44:	008a      	lsls	r2, r1, #2
 8005d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d4a:	f7fa ffb5 	bl	8000cb8 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	4b38      	ldr	r3, [pc, #224]	; (8005e38 <UART_SetConfig+0x4e4>)
 8005d56:	fba3 2301 	umull	r2, r3, r3, r1
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2264      	movs	r2, #100	; 0x64
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	1acb      	subs	r3, r1, r3
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	3332      	adds	r3, #50	; 0x32
 8005d68:	4a33      	ldr	r2, [pc, #204]	; (8005e38 <UART_SetConfig+0x4e4>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d74:	441c      	add	r4, r3
 8005d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8005d7e:	677a      	str	r2, [r7, #116]	; 0x74
 8005d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	1891      	adds	r1, r2, r2
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	415b      	adcs	r3, r3
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d94:	4641      	mov	r1, r8
 8005d96:	1851      	adds	r1, r2, r1
 8005d98:	6039      	str	r1, [r7, #0]
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	414b      	adcs	r3, r1
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dac:	4659      	mov	r1, fp
 8005dae:	00cb      	lsls	r3, r1, #3
 8005db0:	4651      	mov	r1, sl
 8005db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005db6:	4651      	mov	r1, sl
 8005db8:	00ca      	lsls	r2, r1, #3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	460a      	mov	r2, r1
 8005dca:	eb42 0303 	adc.w	r3, r2, r3
 8005dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dda:	667a      	str	r2, [r7, #100]	; 0x64
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005de8:	4649      	mov	r1, r9
 8005dea:	008b      	lsls	r3, r1, #2
 8005dec:	4641      	mov	r1, r8
 8005dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df2:	4641      	mov	r1, r8
 8005df4:	008a      	lsls	r2, r1, #2
 8005df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005dfa:	f7fa ff5d 	bl	8000cb8 <__aeabi_uldivmod>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <UART_SetConfig+0x4e4>)
 8005e04:	fba3 1302 	umull	r1, r3, r3, r2
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	2164      	movs	r1, #100	; 0x64
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	3332      	adds	r3, #50	; 0x32
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <UART_SetConfig+0x4e4>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4422      	add	r2, r4
 8005e2a:	609a      	str	r2, [r3, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e32:	46bd      	mov	sp, r7
 8005e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e38:	51eb851f 	.word	0x51eb851f

08005e3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e4e:	2b84      	cmp	r3, #132	; 0x84
 8005e50:	d005      	beq.n	8005e5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	3303      	adds	r3, #3
 8005e5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e70:	f000 ff32 	bl	8006cd8 <vTaskStartScheduler>
  
  return osOK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7c:	b089      	sub	sp, #36	; 0x24
 8005e7e:	af04      	add	r7, sp, #16
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <osThreadCreate+0x54>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d01c      	beq.n	8005ece <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685c      	ldr	r4, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691e      	ldr	r6, [r3, #16]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ffc8 	bl	8005e3c <makeFreeRtosPriority>
 8005eac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	9100      	str	r1, [sp, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fd2a 	bl	800691c <xTaskCreateStatic>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e01c      	b.n	8005f08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685c      	ldr	r4, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eda:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ffaa 	bl	8005e3c <makeFreeRtosPriority>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	9200      	str	r2, [sp, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	4632      	mov	r2, r6
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fd6c 	bl	80069d6 <xTaskCreate>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d001      	beq.n	8005f08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e000      	b.n	8005f0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f08:	68fb      	ldr	r3, [r7, #12]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f12 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005f12:	b590      	push	{r4, r7, lr}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af02      	add	r7, sp, #8
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d011      	beq.n	8005f48 <osMessageCreate+0x36>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2400      	movs	r4, #0
 8005f3e:	9400      	str	r4, [sp, #0]
 8005f40:	f000 f92c 	bl	800619c <xQueueGenericCreateStatic>
 8005f44:	4603      	mov	r3, r0
 8005f46:	e008      	b.n	8005f5a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	4619      	mov	r1, r3
 8005f54:	f000 f99a 	bl	800628c <xQueueGenericCreate>
 8005f58:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd90      	pop	{r4, r7, pc}

08005f62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f103 0208 	add.w	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f103 0208 	add.w	r2, r3, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
}
 8005ff8:	bf00      	nop
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d103      	bne.n	8006024 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e00c      	b.n	800603e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3308      	adds	r3, #8
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e002      	b.n	8006032 <vListInsert+0x2e>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d2f6      	bcs.n	800602c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	601a      	str	r2, [r3, #0]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6892      	ldr	r2, [r2, #8]
 800608c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6852      	ldr	r2, [r2, #4]
 8006096:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d103      	bne.n	80060aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	1e5a      	subs	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060f6:	f001 fc35 	bl	8007964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	3b01      	subs	r3, #1
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	441a      	add	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22ff      	movs	r2, #255	; 0xff
 8006142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d114      	bne.n	8006176 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01a      	beq.n	800618a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3310      	adds	r3, #16
 8006158:	4618      	mov	r0, r3
 800615a:	f001 f80f 	bl	800717c <xTaskRemoveFromEventList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d012      	beq.n	800618a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <xQueueGenericReset+0xcc>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	e009      	b.n	800618a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3310      	adds	r3, #16
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fef1 	bl	8005f62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff feec 	bl	8005f62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800618a:	f001 fc1b 	bl	80079c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800618e:	2301      	movs	r3, #1
}
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <xQueueGenericCreateStatic+0x52>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <xQueueGenericCreateStatic+0x56>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericCreateStatic+0x58>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	623b      	str	r3, [r7, #32]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <xQueueGenericCreateStatic+0x7e>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <xQueueGenericCreateStatic+0x82>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueGenericCreateStatic+0x84>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	61fb      	str	r3, [r7, #28]
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623a:	2348      	movs	r3, #72	; 0x48
 800623c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b48      	cmp	r3, #72	; 0x48
 8006242:	d00a      	beq.n	800625a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61bb      	str	r3, [r7, #24]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800625a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800626e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f83f 	bl	8006300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006284:	4618      	mov	r0, r3
 8006286:	3730      	adds	r7, #48	; 0x30
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	3348      	adds	r3, #72	; 0x48
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fc2f 	bl	8007b28 <pvPortMalloc>
 80062ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	3348      	adds	r3, #72	; 0x48
 80062da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062e4:	79fa      	ldrb	r2, [r7, #7]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	4613      	mov	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f805 	bl	8006300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062f6:	69bb      	ldr	r3, [r7, #24]
	}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3720      	adds	r7, #32
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e002      	b.n	8006322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800632e:	2101      	movs	r1, #1
 8006330:	69b8      	ldr	r0, [r7, #24]
 8006332:	f7ff fecb 	bl	80060cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <xQueueGenericSend+0x32>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <xQueueGenericSend+0x40>
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <xQueueGenericSend+0x44>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <xQueueGenericSend+0x46>
 8006384:	2300      	movs	r3, #0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10a      	bne.n	80063a0 <xQueueGenericSend+0x60>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSend+0x6e>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <xQueueGenericSend+0x72>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xQueueGenericSend+0x74>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10a      	bne.n	80063ce <xQueueGenericSend+0x8e>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	623b      	str	r3, [r7, #32]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ce:	f001 f895 	bl	80074fc <xTaskGetSchedulerState>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <xQueueGenericSend+0x9e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <xQueueGenericSend+0xa2>
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <xQueueGenericSend+0xa4>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <xQueueGenericSend+0xbe>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	61fb      	str	r3, [r7, #28]
}
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063fe:	f001 fab1 	bl	8007964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <xQueueGenericSend+0xd4>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d129      	bne.n	8006468 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641a:	f000 f96f 	bl	80066fc <prvCopyDataToQueue>
 800641e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d010      	beq.n	800644a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fea5 	bl	800717c <xTaskRemoveFromEventList>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d013      	beq.n	8006460 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006438:	4b3f      	ldr	r3, [pc, #252]	; (8006538 <xQueueGenericSend+0x1f8>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	e00a      	b.n	8006460 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006450:	4b39      	ldr	r3, [pc, #228]	; (8006538 <xQueueGenericSend+0x1f8>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006460:	f001 fab0 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 8006464:	2301      	movs	r3, #1
 8006466:	e063      	b.n	8006530 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800646e:	f001 faa9 	bl	80079c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006472:	2300      	movs	r3, #0
 8006474:	e05c      	b.n	8006530 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800647c:	f107 0314 	add.w	r3, r7, #20
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fedd 	bl	8007240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006486:	2301      	movs	r3, #1
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800648a:	f001 fa9b 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800648e:	f000 fc8d 	bl	8006dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006492:	f001 fa67 	bl	8007964 <vPortEnterCritical>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649c:	b25b      	sxtb	r3, r3
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d103      	bne.n	80064ac <xQueueGenericSend+0x16c>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b2:	b25b      	sxtb	r3, r3
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d103      	bne.n	80064c2 <xQueueGenericSend+0x182>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c2:	f001 fa7f 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c6:	1d3a      	adds	r2, r7, #4
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	4611      	mov	r1, r2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fecc 	bl	800726c <xTaskCheckForTimeOut>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d124      	bne.n	8006524 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064dc:	f000 fa06 	bl	80068ec <prvIsQueueFull>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	3310      	adds	r3, #16
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fe20 	bl	8007134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f6:	f000 f991 	bl	800681c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064fa:	f000 fc65 	bl	8006dc8 <xTaskResumeAll>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	f47f af7c 	bne.w	80063fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006506:	4b0c      	ldr	r3, [pc, #48]	; (8006538 <xQueueGenericSend+0x1f8>)
 8006508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	e772      	b.n	80063fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800651a:	f000 f97f 	bl	800681c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800651e:	f000 fc53 	bl	8006dc8 <xTaskResumeAll>
 8006522:	e76c      	b.n	80063fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006526:	f000 f979 	bl	800681c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800652a:	f000 fc4d 	bl	8006dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800652e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006530:	4618      	mov	r0, r3
 8006532:	3738      	adds	r7, #56	; 0x38
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08c      	sub	sp, #48	; 0x30
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006548:	2300      	movs	r3, #0
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <xQueueReceive+0x30>
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	623b      	str	r3, [r7, #32]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <xQueueReceive+0x3e>
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <xQueueReceive+0x42>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueReceive+0x44>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <xQueueReceive+0x5e>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800659a:	f000 ffaf 	bl	80074fc <xTaskGetSchedulerState>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <xQueueReceive+0x6e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <xQueueReceive+0x72>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueReceive+0x74>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xQueueReceive+0x8e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	61bb      	str	r3, [r7, #24]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ca:	f001 f9cb 	bl	8007964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01f      	beq.n	800661a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065de:	f000 f8f7 	bl	80067d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00f      	beq.n	8006612 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	3310      	adds	r3, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fdc0 	bl	800717c <xTaskRemoveFromEventList>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006602:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <xQueueReceive+0x1bc>)
 8006604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006612:	f001 f9d7 	bl	80079c4 <vPortExitCritical>
				return pdPASS;
 8006616:	2301      	movs	r3, #1
 8006618:	e069      	b.n	80066ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006620:	f001 f9d0 	bl	80079c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006624:	2300      	movs	r3, #0
 8006626:	e062      	b.n	80066ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662e:	f107 0310 	add.w	r3, r7, #16
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fe04 	bl	8007240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006638:	2301      	movs	r3, #1
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663c:	f001 f9c2 	bl	80079c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006640:	f000 fbb4 	bl	8006dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006644:	f001 f98e 	bl	8007964 <vPortEnterCritical>
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800664e:	b25b      	sxtb	r3, r3
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d103      	bne.n	800665e <xQueueReceive+0x122>
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006664:	b25b      	sxtb	r3, r3
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	d103      	bne.n	8006674 <xQueueReceive+0x138>
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006674:	f001 f9a6 	bl	80079c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006678:	1d3a      	adds	r2, r7, #4
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	4611      	mov	r1, r2
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fdf3 	bl	800726c <xTaskCheckForTimeOut>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d123      	bne.n	80066d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668e:	f000 f917 	bl	80068c0 <prvIsQueueEmpty>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d017      	beq.n	80066c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fd47 	bl	8007134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a8:	f000 f8b8 	bl	800681c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066ac:	f000 fb8c 	bl	8006dc8 <xTaskResumeAll>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d189      	bne.n	80065ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <xQueueReceive+0x1bc>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	e780      	b.n	80065ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ca:	f000 f8a7 	bl	800681c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ce:	f000 fb7b 	bl	8006dc8 <xTaskResumeAll>
 80066d2:	e77a      	b.n	80065ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066d6:	f000 f8a1 	bl	800681c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066da:	f000 fb75 	bl	8006dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e0:	f000 f8ee 	bl	80068c0 <prvIsQueueEmpty>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f43f af6f 	beq.w	80065ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3730      	adds	r7, #48	; 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10d      	bne.n	8006736 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d14d      	bne.n	80067be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 ff06 	bl	8007538 <xTaskPriorityDisinherit>
 800672c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	609a      	str	r2, [r3, #8]
 8006734:	e043      	b.n	80067be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d119      	bne.n	8006770 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6858      	ldr	r0, [r3, #4]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	461a      	mov	r2, r3
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	f003 fb1b 	bl	8009d82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	429a      	cmp	r2, r3
 8006764:	d32b      	bcc.n	80067be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	605a      	str	r2, [r3, #4]
 800676e:	e026      	b.n	80067be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68d8      	ldr	r0, [r3, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	461a      	mov	r2, r3
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	f003 fb01 	bl	8009d82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	425b      	negs	r3, r3
 800678a:	441a      	add	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d207      	bcs.n	80067ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	425b      	negs	r3, r3
 80067a6:	441a      	add	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d105      	bne.n	80067be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067c6:	697b      	ldr	r3, [r7, #20]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d018      	beq.n	8006814 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	441a      	add	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d303      	bcc.n	8006804 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68d9      	ldr	r1, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	461a      	mov	r2, r3
 800680e:	6838      	ldr	r0, [r7, #0]
 8006810:	f003 fab7 	bl	8009d82 <memcpy>
	}
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006824:	f001 f89e 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800682e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006830:	e011      	b.n	8006856 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d012      	beq.n	8006860 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3324      	adds	r3, #36	; 0x24
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fc9c 	bl	800717c <xTaskRemoveFromEventList>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800684a:	f000 fd71 	bl	8007330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	3b01      	subs	r3, #1
 8006852:	b2db      	uxtb	r3, r3
 8006854:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	dce9      	bgt.n	8006832 <prvUnlockQueue+0x16>
 800685e:	e000      	b.n	8006862 <prvUnlockQueue+0x46>
					break;
 8006860:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800686a:	f001 f8ab 	bl	80079c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800686e:	f001 f879 	bl	8007964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006878:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800687a:	e011      	b.n	80068a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d012      	beq.n	80068aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3310      	adds	r3, #16
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fc77 	bl	800717c <xTaskRemoveFromEventList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006894:	f000 fd4c 	bl	8007330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	3b01      	subs	r3, #1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dce9      	bgt.n	800687c <prvUnlockQueue+0x60>
 80068a8:	e000      	b.n	80068ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	22ff      	movs	r2, #255	; 0xff
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068b4:	f001 f886 	bl	80079c4 <vPortExitCritical>
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068c8:	f001 f84c 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068d4:	2301      	movs	r3, #1
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e001      	b.n	80068de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068de:	f001 f871 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 80068e2:	68fb      	ldr	r3, [r7, #12]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f4:	f001 f836 	bl	8007964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	429a      	cmp	r2, r3
 8006902:	d102      	bne.n	800690a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e001      	b.n	800690e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800690e:	f001 f859 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08e      	sub	sp, #56	; 0x38
 8006920:	af04      	add	r7, sp, #16
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10a      	bne.n	8006946 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	623b      	str	r3, [r7, #32]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xTaskCreateStatic+0x46>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61fb      	str	r3, [r7, #28]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006962:	23a0      	movs	r3, #160	; 0xa0
 8006964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2ba0      	cmp	r3, #160	; 0xa0
 800696a:	d00a      	beq.n	8006982 <xTaskCreateStatic+0x66>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	61bb      	str	r3, [r7, #24]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006982:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01e      	beq.n	80069c8 <xTaskCreateStatic+0xac>
 800698a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01b      	beq.n	80069c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006998:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	2202      	movs	r2, #2
 800699e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069a2:	2300      	movs	r3, #0
 80069a4:	9303      	str	r3, [sp, #12]
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	9302      	str	r3, [sp, #8]
 80069aa:	f107 0314 	add.w	r3, r7, #20
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f850 	bl	8006a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c2:	f000 f8eb 	bl	8006b9c <prvAddNewTaskToReadyList>
 80069c6:	e001      	b.n	80069cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069cc:	697b      	ldr	r3, [r7, #20]
	}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3728      	adds	r7, #40	; 0x28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b08c      	sub	sp, #48	; 0x30
 80069da:	af04      	add	r7, sp, #16
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f001 f89c 	bl	8007b28 <pvPortMalloc>
 80069f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069f8:	20a0      	movs	r0, #160	; 0xa0
 80069fa:	f001 f895 	bl	8007b28 <pvPortMalloc>
 80069fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a0c:	e005      	b.n	8006a1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f001 f956 	bl	8007cc0 <vPortFree>
 8006a14:	e001      	b.n	8006a1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d017      	beq.n	8006a50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	9302      	str	r3, [sp, #8]
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	9301      	str	r3, [sp, #4]
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f80e 	bl	8006a60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a44:	69f8      	ldr	r0, [r7, #28]
 8006a46:	f000 f8a9 	bl	8006b9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e002      	b.n	8006a56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a56:	69bb      	ldr	r3, [r7, #24]
	}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f023 0307 	bic.w	r3, r3, #7
 8006a86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
 8006aa2:	617b      	str	r3, [r7, #20]
}
 8006aa4:	bf00      	nop
 8006aa6:	e7fe      	b.n	8006aa6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01f      	beq.n	8006aee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	e012      	b.n	8006ada <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	7819      	ldrb	r1, [r3, #0]
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3334      	adds	r3, #52	; 0x34
 8006ac4:	460a      	mov	r2, r1
 8006ac6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	2b0f      	cmp	r3, #15
 8006ade:	d9e9      	bls.n	8006ab4 <prvInitialiseNewTask+0x54>
 8006ae0:	e000      	b.n	8006ae4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006ae2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aec:	e003      	b.n	8006af6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	2b06      	cmp	r3, #6
 8006afa:	d901      	bls.n	8006b00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006afc:	2306      	movs	r3, #6
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2200      	movs	r2, #0
 8006b10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	3304      	adds	r3, #4
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fa43 	bl	8005fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	3318      	adds	r3, #24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fa3e 	bl	8005fa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	f1c3 0207 	rsb	r2, r3, #7
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	334c      	adds	r3, #76	; 0x4c
 8006b50:	224c      	movs	r2, #76	; 0x4c
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f003 f812 	bl	8009b7e <memset>
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	4a0c      	ldr	r2, [pc, #48]	; (8006b90 <prvInitialiseNewTask+0x130>)
 8006b5e:	651a      	str	r2, [r3, #80]	; 0x50
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <prvInitialiseNewTask+0x134>)
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	4a0b      	ldr	r2, [pc, #44]	; (8006b98 <prvInitialiseNewTask+0x138>)
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	69b8      	ldr	r0, [r7, #24]
 8006b72:	f000 fdcd 	bl	8007710 <pxPortInitialiseStack>
 8006b76:	4602      	mov	r2, r0
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b88:	bf00      	nop
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	200046dc 	.word	0x200046dc
 8006b94:	20004744 	.word	0x20004744
 8006b98:	200047ac 	.word	0x200047ac

08006b9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ba4:	f000 fede 	bl	8007964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	; (8006c54 <prvAddNewTaskToReadyList+0xb8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3301      	adds	r3, #1
 8006bae:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <prvAddNewTaskToReadyList+0xb8>)
 8006bb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <prvAddNewTaskToReadyList+0xbc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bba:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <prvAddNewTaskToReadyList+0xbc>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <prvAddNewTaskToReadyList+0xb8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d110      	bne.n	8006bea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bc8:	f000 fbd6 	bl	8007378 <prvInitialiseTaskLists>
 8006bcc:	e00d      	b.n	8006bea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bce:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <prvAddNewTaskToReadyList+0xc0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bd6:	4b20      	ldr	r3, [pc, #128]	; (8006c58 <prvAddNewTaskToReadyList+0xbc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d802      	bhi.n	8006bea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006be4:	4a1c      	ldr	r2, [pc, #112]	; (8006c58 <prvAddNewTaskToReadyList+0xbc>)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bea:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <prvAddNewTaskToReadyList+0xc4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <prvAddNewTaskToReadyList+0xc4>)
 8006bf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	4b19      	ldr	r3, [pc, #100]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <prvAddNewTaskToReadyList+0xc8>)
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <prvAddNewTaskToReadyList+0xcc>)
 8006c14:	441a      	add	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7ff f9cd 	bl	8005fbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c22:	f000 fecf 	bl	80079c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <prvAddNewTaskToReadyList+0xc0>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00e      	beq.n	8006c4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <prvAddNewTaskToReadyList+0xbc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d207      	bcs.n	8006c4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <prvAddNewTaskToReadyList+0xd0>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	20000a88 	.word	0x20000a88
 8006c58:	20000988 	.word	0x20000988
 8006c5c:	20000a94 	.word	0x20000a94
 8006c60:	20000aa4 	.word	0x20000aa4
 8006c64:	20000a90 	.word	0x20000a90
 8006c68:	2000098c 	.word	0x2000098c
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d017      	beq.n	8006cb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <vTaskDelay+0x60>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <vTaskDelay+0x30>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	60bb      	str	r3, [r7, #8]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ca0:	f000 f884 	bl	8006dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fccc 	bl	8007644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cac:	f000 f88c 	bl	8006dc8 <xTaskResumeAll>
 8006cb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d107      	bne.n	8006cc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <vTaskDelay+0x64>)
 8006cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000ab0 	.word	0x20000ab0
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	1d39      	adds	r1, r7, #4
 8006cea:	f107 0308 	add.w	r3, r7, #8
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fa f996 	bl	8001020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	9202      	str	r2, [sp, #8]
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	2300      	movs	r3, #0
 8006d04:	460a      	mov	r2, r1
 8006d06:	4921      	ldr	r1, [pc, #132]	; (8006d8c <vTaskStartScheduler+0xb4>)
 8006d08:	4821      	ldr	r0, [pc, #132]	; (8006d90 <vTaskStartScheduler+0xb8>)
 8006d0a:	f7ff fe07 	bl	800691c <xTaskCreateStatic>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <vTaskStartScheduler+0xbc>)
 8006d12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d14:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <vTaskStartScheduler+0xbc>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e001      	b.n	8006d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11b      	bne.n	8006d64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d40:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <vTaskStartScheduler+0xc0>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	334c      	adds	r3, #76	; 0x4c
 8006d46:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <vTaskStartScheduler+0xc4>)
 8006d48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <vTaskStartScheduler+0xc8>)
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d52:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <vTaskStartScheduler+0xcc>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <vTaskStartScheduler+0xd0>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d5e:	f000 fd5f 	bl	8007820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d62:	e00e      	b.n	8006d82 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d10a      	bne.n	8006d82 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vTaskStartScheduler+0xa8>
}
 8006d82:	bf00      	nop
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	0800d248 	.word	0x0800d248
 8006d90:	08007349 	.word	0x08007349
 8006d94:	20000aac 	.word	0x20000aac
 8006d98:	20000988 	.word	0x20000988
 8006d9c:	200001e4 	.word	0x200001e4
 8006da0:	20000aa8 	.word	0x20000aa8
 8006da4:	20000a94 	.word	0x20000a94
 8006da8:	20000a8c 	.word	0x20000a8c

08006dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <vTaskSuspendAll+0x18>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	4a03      	ldr	r2, [pc, #12]	; (8006dc4 <vTaskSuspendAll+0x18>)
 8006db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000ab0 	.word	0x20000ab0

08006dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dd6:	4b41      	ldr	r3, [pc, #260]	; (8006edc <xTaskResumeAll+0x114>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	603b      	str	r3, [r7, #0]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006df4:	f000 fdb6 	bl	8007964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006df8:	4b38      	ldr	r3, [pc, #224]	; (8006edc <xTaskResumeAll+0x114>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a37      	ldr	r2, [pc, #220]	; (8006edc <xTaskResumeAll+0x114>)
 8006e00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b36      	ldr	r3, [pc, #216]	; (8006edc <xTaskResumeAll+0x114>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d161      	bne.n	8006ece <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e0a:	4b35      	ldr	r3, [pc, #212]	; (8006ee0 <xTaskResumeAll+0x118>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d05d      	beq.n	8006ece <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e12:	e02e      	b.n	8006e72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b33      	ldr	r3, [pc, #204]	; (8006ee4 <xTaskResumeAll+0x11c>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3318      	adds	r3, #24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff f928 	bl	8006076 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff f923 	bl	8006076 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	2201      	movs	r2, #1
 8006e36:	409a      	lsls	r2, r3
 8006e38:	4b2b      	ldr	r3, [pc, #172]	; (8006ee8 <xTaskResumeAll+0x120>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <xTaskResumeAll+0x120>)
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4a27      	ldr	r2, [pc, #156]	; (8006eec <xTaskResumeAll+0x124>)
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f7ff f8af 	bl	8005fbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4b23      	ldr	r3, [pc, #140]	; (8006ef0 <xTaskResumeAll+0x128>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e6c:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <xTaskResumeAll+0x12c>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e72:	4b1c      	ldr	r3, [pc, #112]	; (8006ee4 <xTaskResumeAll+0x11c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1cc      	bne.n	8006e14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e80:	f000 fb1c 	bl	80074bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <xTaskResumeAll+0x130>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d010      	beq.n	8006eb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e90:	f000 f836 	bl	8006f00 <xTaskIncrementTick>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e9a:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <xTaskResumeAll+0x12c>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f1      	bne.n	8006e90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <xTaskResumeAll+0x130>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eb2:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <xTaskResumeAll+0x12c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ebe:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <xTaskResumeAll+0x134>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ece:	f000 fd79 	bl	80079c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000ab0 	.word	0x20000ab0
 8006ee0:	20000a88 	.word	0x20000a88
 8006ee4:	20000a48 	.word	0x20000a48
 8006ee8:	20000a90 	.word	0x20000a90
 8006eec:	2000098c 	.word	0x2000098c
 8006ef0:	20000988 	.word	0x20000988
 8006ef4:	20000a9c 	.word	0x20000a9c
 8006ef8:	20000a98 	.word	0x20000a98
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f0a:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <xTaskIncrementTick+0x144>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f040 808e 	bne.w	8007030 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f14:	4b4c      	ldr	r3, [pc, #304]	; (8007048 <xTaskIncrementTick+0x148>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f1c:	4a4a      	ldr	r2, [pc, #296]	; (8007048 <xTaskIncrementTick+0x148>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d120      	bne.n	8006f6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f28:	4b48      	ldr	r3, [pc, #288]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	603b      	str	r3, [r7, #0]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <xTaskIncrementTick+0x46>
 8006f48:	4b40      	ldr	r3, [pc, #256]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	4b40      	ldr	r3, [pc, #256]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3e      	ldr	r2, [pc, #248]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4a3e      	ldr	r2, [pc, #248]	; (8007050 <xTaskIncrementTick+0x150>)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	4b3d      	ldr	r3, [pc, #244]	; (8007054 <xTaskIncrementTick+0x154>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <xTaskIncrementTick+0x154>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	f000 faa9 	bl	80074bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	; (8007058 <xTaskIncrementTick+0x158>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d348      	bcc.n	8007006 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f74:	4b35      	ldr	r3, [pc, #212]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7e:	4b36      	ldr	r3, [pc, #216]	; (8007058 <xTaskIncrementTick+0x158>)
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	601a      	str	r2, [r3, #0]
					break;
 8006f86:	e03e      	b.n	8007006 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b30      	ldr	r3, [pc, #192]	; (800704c <xTaskIncrementTick+0x14c>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d203      	bcs.n	8006fa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fa0:	4a2d      	ldr	r2, [pc, #180]	; (8007058 <xTaskIncrementTick+0x158>)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fa6:	e02e      	b.n	8007006 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff f862 	bl	8006076 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff f859 	bl	8006076 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	2201      	movs	r2, #1
 8006fca:	409a      	lsls	r2, r3
 8006fcc:	4b23      	ldr	r3, [pc, #140]	; (800705c <xTaskIncrementTick+0x15c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	4a22      	ldr	r2, [pc, #136]	; (800705c <xTaskIncrementTick+0x15c>)
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <xTaskIncrementTick+0x160>)
 8006fe4:	441a      	add	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7fe ffe5 	bl	8005fbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <xTaskIncrementTick+0x164>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d3b9      	bcc.n	8006f74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007004:	e7b6      	b.n	8006f74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <xTaskIncrementTick+0x164>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700c:	4914      	ldr	r1, [pc, #80]	; (8007060 <xTaskIncrementTick+0x160>)
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d901      	bls.n	8007022 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800701e:	2301      	movs	r3, #1
 8007020:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007022:	4b11      	ldr	r3, [pc, #68]	; (8007068 <xTaskIncrementTick+0x168>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d007      	beq.n	800703a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e004      	b.n	800703a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <xTaskIncrementTick+0x16c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	4a0d      	ldr	r2, [pc, #52]	; (800706c <xTaskIncrementTick+0x16c>)
 8007038:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800703a:	697b      	ldr	r3, [r7, #20]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000ab0 	.word	0x20000ab0
 8007048:	20000a8c 	.word	0x20000a8c
 800704c:	20000a40 	.word	0x20000a40
 8007050:	20000a44 	.word	0x20000a44
 8007054:	20000aa0 	.word	0x20000aa0
 8007058:	20000aa8 	.word	0x20000aa8
 800705c:	20000a90 	.word	0x20000a90
 8007060:	2000098c 	.word	0x2000098c
 8007064:	20000988 	.word	0x20000988
 8007068:	20000a9c 	.word	0x20000a9c
 800706c:	20000a98 	.word	0x20000a98

08007070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007076:	4b29      	ldr	r3, [pc, #164]	; (800711c <vTaskSwitchContext+0xac>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800707e:	4b28      	ldr	r3, [pc, #160]	; (8007120 <vTaskSwitchContext+0xb0>)
 8007080:	2201      	movs	r2, #1
 8007082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007084:	e044      	b.n	8007110 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <vTaskSwitchContext+0xb0>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <vTaskSwitchContext+0xb4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	fab3 f383 	clz	r3, r3
 8007098:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	f1c3 031f 	rsb	r3, r3, #31
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	4921      	ldr	r1, [pc, #132]	; (8007128 <vTaskSwitchContext+0xb8>)
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	607b      	str	r3, [r7, #4]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <vTaskSwitchContext+0x5a>
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4a14      	ldr	r2, [pc, #80]	; (8007128 <vTaskSwitchContext+0xb8>)
 80070d8:	4413      	add	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3308      	adds	r3, #8
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d104      	bne.n	80070fc <vTaskSwitchContext+0x8c>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4a0a      	ldr	r2, [pc, #40]	; (800712c <vTaskSwitchContext+0xbc>)
 8007104:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <vTaskSwitchContext+0xbc>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	334c      	adds	r3, #76	; 0x4c
 800710c:	4a08      	ldr	r2, [pc, #32]	; (8007130 <vTaskSwitchContext+0xc0>)
 800710e:	6013      	str	r3, [r2, #0]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20000ab0 	.word	0x20000ab0
 8007120:	20000a9c 	.word	0x20000a9c
 8007124:	20000a90 	.word	0x20000a90
 8007128:	2000098c 	.word	0x2000098c
 800712c:	20000988 	.word	0x20000988
 8007130:	200001e4 	.word	0x200001e4

08007134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	60fb      	str	r3, [r7, #12]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <vTaskPlaceOnEventList+0x44>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3318      	adds	r3, #24
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fe ff4e 	bl	8006004 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007168:	2101      	movs	r1, #1
 800716a:	6838      	ldr	r0, [r7, #0]
 800716c:	f000 fa6a 	bl	8007644 <prvAddCurrentTaskToDelayedList>
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000988 	.word	0x20000988

0800717c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	60fb      	str	r3, [r7, #12]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3318      	adds	r3, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe ff62 	bl	8006076 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b2:	4b1d      	ldr	r3, [pc, #116]	; (8007228 <xTaskRemoveFromEventList+0xac>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d11c      	bne.n	80071f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3304      	adds	r3, #4
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe ff59 	bl	8006076 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	4b17      	ldr	r3, [pc, #92]	; (800722c <xTaskRemoveFromEventList+0xb0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	4a16      	ldr	r2, [pc, #88]	; (800722c <xTaskRemoveFromEventList+0xb0>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4a13      	ldr	r2, [pc, #76]	; (8007230 <xTaskRemoveFromEventList+0xb4>)
 80071e4:	441a      	add	r2, r3
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7fe fee5 	bl	8005fbc <vListInsertEnd>
 80071f2:	e005      	b.n	8007200 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	3318      	adds	r3, #24
 80071f8:	4619      	mov	r1, r3
 80071fa:	480e      	ldr	r0, [pc, #56]	; (8007234 <xTaskRemoveFromEventList+0xb8>)
 80071fc:	f7fe fede 	bl	8005fbc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <xTaskRemoveFromEventList+0xbc>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d905      	bls.n	800721a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <xTaskRemoveFromEventList+0xc0>)
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e001      	b.n	800721e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800721e:	697b      	ldr	r3, [r7, #20]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000ab0 	.word	0x20000ab0
 800722c:	20000a90 	.word	0x20000a90
 8007230:	2000098c 	.word	0x2000098c
 8007234:	20000a48 	.word	0x20000a48
 8007238:	20000988 	.word	0x20000988
 800723c:	20000a9c 	.word	0x20000a9c

08007240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007248:	4b06      	ldr	r3, [pc, #24]	; (8007264 <vTaskInternalSetTimeOutState+0x24>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007250:	4b05      	ldr	r3, [pc, #20]	; (8007268 <vTaskInternalSetTimeOutState+0x28>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	605a      	str	r2, [r3, #4]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	20000aa0 	.word	0x20000aa0
 8007268:	20000a8c 	.word	0x20000a8c

0800726c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	613b      	str	r3, [r7, #16]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60fb      	str	r3, [r7, #12]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072ae:	f000 fb59 	bl	8007964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072b2:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <xTaskCheckForTimeOut+0xbc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d102      	bne.n	80072d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072cc:	2300      	movs	r3, #0
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e023      	b.n	800731a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <xTaskCheckForTimeOut+0xc0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d007      	beq.n	80072ee <xTaskCheckForTimeOut+0x82>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d302      	bcc.n	80072ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072e8:	2301      	movs	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	e015      	b.n	800731a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d20b      	bcs.n	8007310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ff9b 	bl	8007240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800730a:	2300      	movs	r3, #0
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	e004      	b.n	800731a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007316:	2301      	movs	r3, #1
 8007318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800731a:	f000 fb53 	bl	80079c4 <vPortExitCritical>

	return xReturn;
 800731e:	69fb      	ldr	r3, [r7, #28]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	20000a8c 	.word	0x20000a8c
 800732c:	20000aa0 	.word	0x20000aa0

08007330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <vTaskMissedYield+0x14>)
 8007336:	2201      	movs	r2, #1
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	bf00      	nop
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	20000a9c 	.word	0x20000a9c

08007348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007350:	f000 f852 	bl	80073f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <prvIdleTask+0x28>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d9f9      	bls.n	8007350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800735c:	4b05      	ldr	r3, [pc, #20]	; (8007374 <prvIdleTask+0x2c>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800736c:	e7f0      	b.n	8007350 <prvIdleTask+0x8>
 800736e:	bf00      	nop
 8007370:	2000098c 	.word	0x2000098c
 8007374:	e000ed04 	.word	0xe000ed04

08007378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800737e:	2300      	movs	r3, #0
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	e00c      	b.n	800739e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4a12      	ldr	r2, [pc, #72]	; (80073d8 <prvInitialiseTaskLists+0x60>)
 8007390:	4413      	add	r3, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fde5 	bl	8005f62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3301      	adds	r3, #1
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b06      	cmp	r3, #6
 80073a2:	d9ef      	bls.n	8007384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073a4:	480d      	ldr	r0, [pc, #52]	; (80073dc <prvInitialiseTaskLists+0x64>)
 80073a6:	f7fe fddc 	bl	8005f62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073aa:	480d      	ldr	r0, [pc, #52]	; (80073e0 <prvInitialiseTaskLists+0x68>)
 80073ac:	f7fe fdd9 	bl	8005f62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073b0:	480c      	ldr	r0, [pc, #48]	; (80073e4 <prvInitialiseTaskLists+0x6c>)
 80073b2:	f7fe fdd6 	bl	8005f62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073b6:	480c      	ldr	r0, [pc, #48]	; (80073e8 <prvInitialiseTaskLists+0x70>)
 80073b8:	f7fe fdd3 	bl	8005f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073bc:	480b      	ldr	r0, [pc, #44]	; (80073ec <prvInitialiseTaskLists+0x74>)
 80073be:	f7fe fdd0 	bl	8005f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <prvInitialiseTaskLists+0x78>)
 80073c4:	4a05      	ldr	r2, [pc, #20]	; (80073dc <prvInitialiseTaskLists+0x64>)
 80073c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073c8:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <prvInitialiseTaskLists+0x7c>)
 80073ca:	4a05      	ldr	r2, [pc, #20]	; (80073e0 <prvInitialiseTaskLists+0x68>)
 80073cc:	601a      	str	r2, [r3, #0]
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	2000098c 	.word	0x2000098c
 80073dc:	20000a18 	.word	0x20000a18
 80073e0:	20000a2c 	.word	0x20000a2c
 80073e4:	20000a48 	.word	0x20000a48
 80073e8:	20000a5c 	.word	0x20000a5c
 80073ec:	20000a74 	.word	0x20000a74
 80073f0:	20000a40 	.word	0x20000a40
 80073f4:	20000a44 	.word	0x20000a44

080073f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073fe:	e019      	b.n	8007434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007400:	f000 fab0 	bl	8007964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007404:	4b10      	ldr	r3, [pc, #64]	; (8007448 <prvCheckTasksWaitingTermination+0x50>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7fe fe30 	bl	8006076 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <prvCheckTasksWaitingTermination+0x54>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	4a0b      	ldr	r2, [pc, #44]	; (800744c <prvCheckTasksWaitingTermination+0x54>)
 800741e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3b01      	subs	r3, #1
 8007426:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800742a:	f000 facb 	bl	80079c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f810 	bl	8007454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <prvCheckTasksWaitingTermination+0x58>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e1      	bne.n	8007400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000a5c 	.word	0x20000a5c
 800744c:	20000a88 	.word	0x20000a88
 8007450:	20000a70 	.word	0x20000a70

08007454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	334c      	adds	r3, #76	; 0x4c
 8007460:	4618      	mov	r0, r3
 8007462:	f002 fbd5 	bl	8009c10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fc23 	bl	8007cc0 <vPortFree>
				vPortFree( pxTCB );
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fc20 	bl	8007cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007480:	e018      	b.n	80074b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007488:	2b01      	cmp	r3, #1
 800748a:	d103      	bne.n	8007494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc17 	bl	8007cc0 <vPortFree>
	}
 8007492:	e00f      	b.n	80074b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800749a:	2b02      	cmp	r3, #2
 800749c:	d00a      	beq.n	80074b4 <prvDeleteTCB+0x60>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	60fb      	str	r3, [r7, #12]
}
 80074b0:	bf00      	nop
 80074b2:	e7fe      	b.n	80074b2 <prvDeleteTCB+0x5e>
	}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <prvResetNextTaskUnblockTime+0x38>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d104      	bne.n	80074d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <prvResetNextTaskUnblockTime+0x3c>)
 80074ce:	f04f 32ff 	mov.w	r2, #4294967295
 80074d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074d4:	e008      	b.n	80074e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d6:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <prvResetNextTaskUnblockTime+0x38>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4a04      	ldr	r2, [pc, #16]	; (80074f8 <prvResetNextTaskUnblockTime+0x3c>)
 80074e6:	6013      	str	r3, [r2, #0]
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	20000a40 	.word	0x20000a40
 80074f8:	20000aa8 	.word	0x20000aa8

080074fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007502:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <xTaskGetSchedulerState+0x34>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800750a:	2301      	movs	r3, #1
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	e008      	b.n	8007522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007510:	4b08      	ldr	r3, [pc, #32]	; (8007534 <xTaskGetSchedulerState+0x38>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007518:	2302      	movs	r3, #2
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e001      	b.n	8007522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007522:	687b      	ldr	r3, [r7, #4]
	}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	20000a94 	.word	0x20000a94
 8007534:	20000ab0 	.word	0x20000ab0

08007538 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d06e      	beq.n	800762c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800754e:	4b3a      	ldr	r3, [pc, #232]	; (8007638 <xTaskPriorityDisinherit+0x100>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	429a      	cmp	r2, r3
 8007556:	d00a      	beq.n	800756e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
 800758a:	e7fe      	b.n	800758a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007590:	1e5a      	subs	r2, r3, #1
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	429a      	cmp	r2, r3
 80075a0:	d044      	beq.n	800762c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d140      	bne.n	800762c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd61 	bl	8006076 <uxListRemove>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d115      	bne.n	80075e6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075be:	491f      	ldr	r1, [pc, #124]	; (800763c <xTaskPriorityDisinherit+0x104>)
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	440b      	add	r3, r1
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <xTaskPriorityDisinherit+0xae>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	2201      	movs	r2, #1
 80075d6:	fa02 f303 	lsl.w	r3, r2, r3
 80075da:	43da      	mvns	r2, r3
 80075dc:	4b18      	ldr	r3, [pc, #96]	; (8007640 <xTaskPriorityDisinherit+0x108>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4013      	ands	r3, r2
 80075e2:	4a17      	ldr	r2, [pc, #92]	; (8007640 <xTaskPriorityDisinherit+0x108>)
 80075e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	f1c3 0207 	rsb	r2, r3, #7
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	2201      	movs	r2, #1
 8007600:	409a      	lsls	r2, r3
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <xTaskPriorityDisinherit+0x108>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4313      	orrs	r3, r2
 8007608:	4a0d      	ldr	r2, [pc, #52]	; (8007640 <xTaskPriorityDisinherit+0x108>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a08      	ldr	r2, [pc, #32]	; (800763c <xTaskPriorityDisinherit+0x104>)
 800761a:	441a      	add	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fe fcca 	bl	8005fbc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800762c:	697b      	ldr	r3, [r7, #20]
	}
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000988 	.word	0x20000988
 800763c:	2000098c 	.word	0x2000098c
 8007640:	20000a90 	.word	0x20000a90

08007644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800764e:	4b29      	ldr	r3, [pc, #164]	; (80076f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007654:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3304      	adds	r3, #4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fd0b 	bl	8006076 <uxListRemove>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007666:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	2201      	movs	r2, #1
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	4b21      	ldr	r3, [pc, #132]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4013      	ands	r3, r2
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800767c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d10a      	bne.n	800769c <prvAddCurrentTaskToDelayedList+0x58>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d007      	beq.n	800769c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3304      	adds	r3, #4
 8007692:	4619      	mov	r1, r3
 8007694:	481a      	ldr	r0, [pc, #104]	; (8007700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007696:	f7fe fc91 	bl	8005fbc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800769a:	e026      	b.n	80076ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4413      	add	r3, r2
 80076a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076a4:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d209      	bcs.n	80076c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b4:	4b13      	ldr	r3, [pc, #76]	; (8007704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fe fc9f 	bl	8006004 <vListInsert>
}
 80076c6:	e010      	b.n	80076ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7fe fc95 	bl	8006004 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <prvAddCurrentTaskToDelayedList+0xc8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d202      	bcs.n	80076ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076e4:	4a09      	ldr	r2, [pc, #36]	; (800770c <prvAddCurrentTaskToDelayedList+0xc8>)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6013      	str	r3, [r2, #0]
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000a8c 	.word	0x20000a8c
 80076f8:	20000988 	.word	0x20000988
 80076fc:	20000a90 	.word	0x20000a90
 8007700:	20000a74 	.word	0x20000a74
 8007704:	20000a44 	.word	0x20000a44
 8007708:	20000a40 	.word	0x20000a40
 800770c:	20000aa8 	.word	0x20000aa8

08007710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3b04      	subs	r3, #4
 8007720:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3b04      	subs	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f023 0201 	bic.w	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3b04      	subs	r3, #4
 800773e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007740:	4a0c      	ldr	r2, [pc, #48]	; (8007774 <pxPortInitialiseStack+0x64>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b14      	subs	r3, #20
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3b04      	subs	r3, #4
 8007756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f06f 0202 	mvn.w	r2, #2
 800775e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3b20      	subs	r3, #32
 8007764:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	08007779 	.word	0x08007779

08007778 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <prvTaskExitError+0x54>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d00a      	beq.n	80077a2 <prvTaskExitError+0x2a>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60fb      	str	r3, [r7, #12]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <prvTaskExitError+0x28>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60bb      	str	r3, [r7, #8]
}
 80077b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077b6:	bf00      	nop
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0fc      	beq.n	80077b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077be:	bf00      	nop
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	2000001c 	.word	0x2000001c

080077d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <pxCurrentTCBConst2>)
 80077d2:	6819      	ldr	r1, [r3, #0]
 80077d4:	6808      	ldr	r0, [r1, #0]
 80077d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077da:	f380 8809 	msr	PSP, r0
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8811 	msr	BASEPRI, r0
 80077ea:	4770      	bx	lr
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst2>:
 80077f0:	20000988 	.word	0x20000988
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <prvPortStartFirstTask+0x24>)
 80077fa:	6800      	ldr	r0, [r0, #0]
 80077fc:	6800      	ldr	r0, [r0, #0]
 80077fe:	f380 8808 	msr	MSP, r0
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8814 	msr	CONTROL, r0
 800780a:	b662      	cpsie	i
 800780c:	b661      	cpsie	f
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	df00      	svc	0
 8007818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800781a:	bf00      	nop
 800781c:	e000ed08 	.word	0xe000ed08

08007820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007826:	4b46      	ldr	r3, [pc, #280]	; (8007940 <xPortStartScheduler+0x120>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a46      	ldr	r2, [pc, #280]	; (8007944 <xPortStartScheduler+0x124>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10a      	bne.n	8007846 <xPortStartScheduler+0x26>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007846:	4b3e      	ldr	r3, [pc, #248]	; (8007940 <xPortStartScheduler+0x120>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a3f      	ldr	r2, [pc, #252]	; (8007948 <xPortStartScheduler+0x128>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10a      	bne.n	8007866 <xPortStartScheduler+0x46>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007866:	4b39      	ldr	r3, [pc, #228]	; (800794c <xPortStartScheduler+0x12c>)
 8007868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <xPortStartScheduler+0x130>)
 800788c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800788e:	4b31      	ldr	r3, [pc, #196]	; (8007954 <xPortStartScheduler+0x134>)
 8007890:	2207      	movs	r2, #7
 8007892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007894:	e009      	b.n	80078aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007896:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <xPortStartScheduler+0x134>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	4a2d      	ldr	r2, [pc, #180]	; (8007954 <xPortStartScheduler+0x134>)
 800789e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078aa:	78fb      	ldrb	r3, [r7, #3]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	2b80      	cmp	r3, #128	; 0x80
 80078b4:	d0ef      	beq.n	8007896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078b6:	4b27      	ldr	r3, [pc, #156]	; (8007954 <xPortStartScheduler+0x134>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f1c3 0307 	rsb	r3, r3, #7
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d00a      	beq.n	80078d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60bb      	str	r3, [r7, #8]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	; (8007954 <xPortStartScheduler+0x134>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	021b      	lsls	r3, r3, #8
 80078de:	4a1d      	ldr	r2, [pc, #116]	; (8007954 <xPortStartScheduler+0x134>)
 80078e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078e2:	4b1c      	ldr	r3, [pc, #112]	; (8007954 <xPortStartScheduler+0x134>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <xPortStartScheduler+0x134>)
 80078ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078f6:	4b18      	ldr	r3, [pc, #96]	; (8007958 <xPortStartScheduler+0x138>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <xPortStartScheduler+0x138>)
 80078fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007902:	4b15      	ldr	r3, [pc, #84]	; (8007958 <xPortStartScheduler+0x138>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a14      	ldr	r2, [pc, #80]	; (8007958 <xPortStartScheduler+0x138>)
 8007908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800790c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800790e:	f000 f8dd 	bl	8007acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007912:	4b12      	ldr	r3, [pc, #72]	; (800795c <xPortStartScheduler+0x13c>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007918:	f000 f8fc 	bl	8007b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800791c:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xPortStartScheduler+0x140>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0f      	ldr	r2, [pc, #60]	; (8007960 <xPortStartScheduler+0x140>)
 8007922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007928:	f7ff ff66 	bl	80077f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800792c:	f7ff fba0 	bl	8007070 <vTaskSwitchContext>
	prvTaskExitError();
 8007930:	f7ff ff22 	bl	8007778 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed00 	.word	0xe000ed00
 8007944:	410fc271 	.word	0x410fc271
 8007948:	410fc270 	.word	0x410fc270
 800794c:	e000e400 	.word	0xe000e400
 8007950:	20000ab4 	.word	0x20000ab4
 8007954:	20000ab8 	.word	0x20000ab8
 8007958:	e000ed20 	.word	0xe000ed20
 800795c:	2000001c 	.word	0x2000001c
 8007960:	e000ef34 	.word	0xe000ef34

08007964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
}
 800797c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <vPortEnterCritical+0x58>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a0d      	ldr	r2, [pc, #52]	; (80079bc <vPortEnterCritical+0x58>)
 8007986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <vPortEnterCritical+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortEnterCritical+0x5c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortEnterCritical+0x4a>
	}
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	2000001c 	.word	0x2000001c
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <vPortExitCritical+0x50>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <vPortExitCritical+0x24>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <vPortExitCritical+0x50>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortExitCritical+0x50>)
 80079f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vPortExitCritical+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <vPortExitCritical+0x42>
 80079fa:	2300      	movs	r3, #0
 80079fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	2000001c 	.word	0x2000001c
	...

08007a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <pxCurrentTCBConst>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f01e 0f10 	tst.w	lr, #16
 8007a30:	bf08      	it	eq
 8007a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	6010      	str	r0, [r2, #0]
 8007a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a44:	f380 8811 	msr	BASEPRI, r0
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f7ff fb0e 	bl	8007070 <vTaskSwitchContext>
 8007a54:	f04f 0000 	mov.w	r0, #0
 8007a58:	f380 8811 	msr	BASEPRI, r0
 8007a5c:	bc09      	pop	{r0, r3}
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	f01e 0f10 	tst.w	lr, #16
 8007a6a:	bf08      	it	eq
 8007a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a70:	f380 8809 	msr	PSP, r0
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst>:
 8007a80:	20000988 	.word	0x20000988
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
}
 8007aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f7ff fa2d 	bl	8006f00 <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <SysTick_Handler+0x40>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	f383 8811 	msr	BASEPRI, r3
}
 8007abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <vPortSetupTimerInterrupt+0x38>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <vPortSetupTimerInterrupt+0x3c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <vPortSetupTimerInterrupt+0x40>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	099b      	lsrs	r3, r3, #6
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <vPortSetupTimerInterrupt+0x44>)
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aee:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vPortSetupTimerInterrupt+0x34>)
 8007af0:	2207      	movs	r2, #7
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	e000e010 	.word	0xe000e010
 8007b04:	e000e018 	.word	0xe000e018
 8007b08:	20000010 	.word	0x20000010
 8007b0c:	10624dd3 	.word	0x10624dd3
 8007b10:	e000e014 	.word	0xe000e014

08007b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b24 <vPortEnableVFP+0x10>
 8007b18:	6801      	ldr	r1, [r0, #0]
 8007b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b1e:	6001      	str	r1, [r0, #0]
 8007b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b22:	bf00      	nop
 8007b24:	e000ed88 	.word	0xe000ed88

08007b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b34:	f7ff f93a 	bl	8006dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b38:	4b5b      	ldr	r3, [pc, #364]	; (8007ca8 <pvPortMalloc+0x180>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b40:	f000 f920 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b44:	4b59      	ldr	r3, [pc, #356]	; (8007cac <pvPortMalloc+0x184>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f040 8093 	bne.w	8007c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d01d      	beq.n	8007b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b58:	2208      	movs	r2, #8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d014      	beq.n	8007b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
 8007b70:	3308      	adds	r3, #8
 8007b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <pvPortMalloc+0x6c>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	617b      	str	r3, [r7, #20]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d06e      	beq.n	8007c78 <pvPortMalloc+0x150>
 8007b9a:	4b45      	ldr	r3, [pc, #276]	; (8007cb0 <pvPortMalloc+0x188>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d869      	bhi.n	8007c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ba4:	4b43      	ldr	r3, [pc, #268]	; (8007cb4 <pvPortMalloc+0x18c>)
 8007ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ba8:	4b42      	ldr	r3, [pc, #264]	; (8007cb4 <pvPortMalloc+0x18c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bae:	e004      	b.n	8007bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <pvPortMalloc+0xa4>
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f1      	bne.n	8007bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bcc:	4b36      	ldr	r3, [pc, #216]	; (8007ca8 <pvPortMalloc+0x180>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d050      	beq.n	8007c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2208      	movs	r2, #8
 8007bdc:	4413      	add	r3, r2
 8007bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	005b      	lsls	r3, r3, #1
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d91f      	bls.n	8007c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <pvPortMalloc+0xf8>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	613b      	str	r3, [r7, #16]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	1ad2      	subs	r2, r2, r3
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c32:	69b8      	ldr	r0, [r7, #24]
 8007c34:	f000 f908 	bl	8007e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c38:	4b1d      	ldr	r3, [pc, #116]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	4a1b      	ldr	r2, [pc, #108]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c46:	4b1a      	ldr	r3, [pc, #104]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <pvPortMalloc+0x190>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d203      	bcs.n	8007c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c52:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <pvPortMalloc+0x188>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a18      	ldr	r2, [pc, #96]	; (8007cb8 <pvPortMalloc+0x190>)
 8007c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4b13      	ldr	r3, [pc, #76]	; (8007cac <pvPortMalloc+0x184>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <pvPortMalloc+0x194>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3301      	adds	r3, #1
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <pvPortMalloc+0x194>)
 8007c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c78:	f7ff f8a6 	bl	8006dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	f003 0307 	and.w	r3, r3, #7
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <pvPortMalloc+0x174>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <pvPortMalloc+0x172>
	return pvReturn;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3728      	adds	r7, #40	; 0x28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200046c4 	.word	0x200046c4
 8007cac:	200046d8 	.word	0x200046d8
 8007cb0:	200046c8 	.word	0x200046c8
 8007cb4:	200046bc 	.word	0x200046bc
 8007cb8:	200046cc 	.word	0x200046cc
 8007cbc:	200046d0 	.word	0x200046d0

08007cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04d      	beq.n	8007d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	425b      	negs	r3, r3
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <vPortFree+0xb8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <vPortFree+0x44>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00a      	beq.n	8007d22 <vPortFree+0x62>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	60bb      	str	r3, [r7, #8]
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <vPortFree+0xb8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01e      	beq.n	8007d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11a      	bne.n	8007d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	; (8007d78 <vPortFree+0xb8>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d48:	f7ff f830 	bl	8006dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <vPortFree+0xbc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <vPortFree+0xbc>)
 8007d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f000 f874 	bl	8007e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d60:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <vPortFree+0xc0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a06      	ldr	r2, [pc, #24]	; (8007d80 <vPortFree+0xc0>)
 8007d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d6a:	f7ff f82d 	bl	8006dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	200046d8 	.word	0x200046d8
 8007d7c:	200046c8 	.word	0x200046c8
 8007d80:	200046d4 	.word	0x200046d4

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b27      	ldr	r3, [pc, #156]	; (8007e30 <prvHeapInit+0xac>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1f      	ldr	r2, [pc, #124]	; (8007e30 <prvHeapInit+0xac>)
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <prvHeapInit+0xb0>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <prvHeapInit+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <prvHeapInit+0xb4>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de6:	4b14      	ldr	r3, [pc, #80]	; (8007e38 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <prvHeapInit+0xb4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <prvHeapInit+0xb8>)
 8007e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <prvHeapInit+0xbc>)
 8007e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <prvHeapInit+0xc0>)
 8007e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	20000abc 	.word	0x20000abc
 8007e34:	200046bc 	.word	0x200046bc
 8007e38:	200046c4 	.word	0x200046c4
 8007e3c:	200046cc 	.word	0x200046cc
 8007e40:	200046c8 	.word	0x200046c8
 8007e44:	200046d8 	.word	0x200046d8

08007e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x14>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d8f7      	bhi.n	8007e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d118      	bne.n	8007ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00d      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e008      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d002      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	200046bc 	.word	0x200046bc
 8007ef8:	200046c4 	.word	0x200046c4

08007efc <atoi>:
 8007efc:	220a      	movs	r2, #10
 8007efe:	2100      	movs	r1, #0
 8007f00:	f000 be98 	b.w	8008c34 <strtol>

08007f04 <sulp>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4604      	mov	r4, r0
 8007f08:	460d      	mov	r5, r1
 8007f0a:	ec45 4b10 	vmov	d0, r4, r5
 8007f0e:	4616      	mov	r6, r2
 8007f10:	f003 fda6 	bl	800ba60 <__ulp>
 8007f14:	ec51 0b10 	vmov	r0, r1, d0
 8007f18:	b17e      	cbz	r6, 8007f3a <sulp+0x36>
 8007f1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd09      	ble.n	8007f3a <sulp+0x36>
 8007f26:	051b      	lsls	r3, r3, #20
 8007f28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f2c:	2400      	movs	r4, #0
 8007f2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f32:	4622      	mov	r2, r4
 8007f34:	462b      	mov	r3, r5
 8007f36:	f7f8 fb77 	bl	8000628 <__aeabi_dmul>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	0000      	movs	r0, r0
	...

08007f40 <_strtod_l>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	ed2d 8b02 	vpush	{d8}
 8007f48:	b09b      	sub	sp, #108	; 0x6c
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f4e:	2200      	movs	r2, #0
 8007f50:	9216      	str	r2, [sp, #88]	; 0x58
 8007f52:	460d      	mov	r5, r1
 8007f54:	f04f 0800 	mov.w	r8, #0
 8007f58:	f04f 0900 	mov.w	r9, #0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	9215      	str	r2, [sp, #84]	; 0x54
 8007f60:	7811      	ldrb	r1, [r2, #0]
 8007f62:	292b      	cmp	r1, #43	; 0x2b
 8007f64:	d04c      	beq.n	8008000 <_strtod_l+0xc0>
 8007f66:	d83a      	bhi.n	8007fde <_strtod_l+0x9e>
 8007f68:	290d      	cmp	r1, #13
 8007f6a:	d834      	bhi.n	8007fd6 <_strtod_l+0x96>
 8007f6c:	2908      	cmp	r1, #8
 8007f6e:	d834      	bhi.n	8007fda <_strtod_l+0x9a>
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d03d      	beq.n	8007ff0 <_strtod_l+0xb0>
 8007f74:	2200      	movs	r2, #0
 8007f76:	920a      	str	r2, [sp, #40]	; 0x28
 8007f78:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007f7a:	7832      	ldrb	r2, [r6, #0]
 8007f7c:	2a30      	cmp	r2, #48	; 0x30
 8007f7e:	f040 80b4 	bne.w	80080ea <_strtod_l+0x1aa>
 8007f82:	7872      	ldrb	r2, [r6, #1]
 8007f84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007f88:	2a58      	cmp	r2, #88	; 0x58
 8007f8a:	d170      	bne.n	800806e <_strtod_l+0x12e>
 8007f8c:	9302      	str	r3, [sp, #8]
 8007f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	ab16      	add	r3, sp, #88	; 0x58
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	4a8e      	ldr	r2, [pc, #568]	; (80081d0 <_strtod_l+0x290>)
 8007f98:	ab17      	add	r3, sp, #92	; 0x5c
 8007f9a:	a915      	add	r1, sp, #84	; 0x54
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f002 fe3d 	bl	800ac1c <__gethex>
 8007fa2:	f010 070f 	ands.w	r7, r0, #15
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	d005      	beq.n	8007fb6 <_strtod_l+0x76>
 8007faa:	2f06      	cmp	r7, #6
 8007fac:	d12a      	bne.n	8008004 <_strtod_l+0xc4>
 8007fae:	3601      	adds	r6, #1
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9615      	str	r6, [sp, #84]	; 0x54
 8007fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 857f 	bne.w	8008abc <_strtod_l+0xb7c>
 8007fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc0:	b1db      	cbz	r3, 8007ffa <_strtod_l+0xba>
 8007fc2:	4642      	mov	r2, r8
 8007fc4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007fc8:	ec43 2b10 	vmov	d0, r2, r3
 8007fcc:	b01b      	add	sp, #108	; 0x6c
 8007fce:	ecbd 8b02 	vpop	{d8}
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	2920      	cmp	r1, #32
 8007fd8:	d1cc      	bne.n	8007f74 <_strtod_l+0x34>
 8007fda:	3201      	adds	r2, #1
 8007fdc:	e7bf      	b.n	8007f5e <_strtod_l+0x1e>
 8007fde:	292d      	cmp	r1, #45	; 0x2d
 8007fe0:	d1c8      	bne.n	8007f74 <_strtod_l+0x34>
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	910a      	str	r1, [sp, #40]	; 0x28
 8007fe6:	1c51      	adds	r1, r2, #1
 8007fe8:	9115      	str	r1, [sp, #84]	; 0x54
 8007fea:	7852      	ldrb	r2, [r2, #1]
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d1c3      	bne.n	8007f78 <_strtod_l+0x38>
 8007ff0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ff2:	9515      	str	r5, [sp, #84]	; 0x54
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 855f 	bne.w	8008ab8 <_strtod_l+0xb78>
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	e7e3      	b.n	8007fc8 <_strtod_l+0x88>
 8008000:	2100      	movs	r1, #0
 8008002:	e7ef      	b.n	8007fe4 <_strtod_l+0xa4>
 8008004:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008006:	b13a      	cbz	r2, 8008018 <_strtod_l+0xd8>
 8008008:	2135      	movs	r1, #53	; 0x35
 800800a:	a818      	add	r0, sp, #96	; 0x60
 800800c:	f003 fe25 	bl	800bc5a <__copybits>
 8008010:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008012:	4620      	mov	r0, r4
 8008014:	f003 f9f8 	bl	800b408 <_Bfree>
 8008018:	3f01      	subs	r7, #1
 800801a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800801c:	2f04      	cmp	r7, #4
 800801e:	d806      	bhi.n	800802e <_strtod_l+0xee>
 8008020:	e8df f007 	tbb	[pc, r7]
 8008024:	201d0314 	.word	0x201d0314
 8008028:	14          	.byte	0x14
 8008029:	00          	.byte	0x00
 800802a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800802e:	05e9      	lsls	r1, r5, #23
 8008030:	bf48      	it	mi
 8008032:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008036:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800803a:	0d1b      	lsrs	r3, r3, #20
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1b9      	bne.n	8007fb6 <_strtod_l+0x76>
 8008042:	f001 fe71 	bl	8009d28 <__errno>
 8008046:	2322      	movs	r3, #34	; 0x22
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	e7b4      	b.n	8007fb6 <_strtod_l+0x76>
 800804c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008050:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008054:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008058:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800805c:	e7e7      	b.n	800802e <_strtod_l+0xee>
 800805e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80081d8 <_strtod_l+0x298>
 8008062:	e7e4      	b.n	800802e <_strtod_l+0xee>
 8008064:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008068:	f04f 38ff 	mov.w	r8, #4294967295
 800806c:	e7df      	b.n	800802e <_strtod_l+0xee>
 800806e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	9215      	str	r2, [sp, #84]	; 0x54
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b30      	cmp	r3, #48	; 0x30
 8008078:	d0f9      	beq.n	800806e <_strtod_l+0x12e>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d09b      	beq.n	8007fb6 <_strtod_l+0x76>
 800807e:	2301      	movs	r3, #1
 8008080:	f04f 0a00 	mov.w	sl, #0
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008088:	930b      	str	r3, [sp, #44]	; 0x2c
 800808a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800808e:	46d3      	mov	fp, sl
 8008090:	220a      	movs	r2, #10
 8008092:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008094:	7806      	ldrb	r6, [r0, #0]
 8008096:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800809a:	b2d9      	uxtb	r1, r3
 800809c:	2909      	cmp	r1, #9
 800809e:	d926      	bls.n	80080ee <_strtod_l+0x1ae>
 80080a0:	494c      	ldr	r1, [pc, #304]	; (80081d4 <_strtod_l+0x294>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	f001 fd73 	bl	8009b8e <strncmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d030      	beq.n	800810e <_strtod_l+0x1ce>
 80080ac:	2000      	movs	r0, #0
 80080ae:	4632      	mov	r2, r6
 80080b0:	9005      	str	r0, [sp, #20]
 80080b2:	465e      	mov	r6, fp
 80080b4:	4603      	mov	r3, r0
 80080b6:	2a65      	cmp	r2, #101	; 0x65
 80080b8:	d001      	beq.n	80080be <_strtod_l+0x17e>
 80080ba:	2a45      	cmp	r2, #69	; 0x45
 80080bc:	d113      	bne.n	80080e6 <_strtod_l+0x1a6>
 80080be:	b91e      	cbnz	r6, 80080c8 <_strtod_l+0x188>
 80080c0:	9a04      	ldr	r2, [sp, #16]
 80080c2:	4302      	orrs	r2, r0
 80080c4:	d094      	beq.n	8007ff0 <_strtod_l+0xb0>
 80080c6:	2600      	movs	r6, #0
 80080c8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80080ca:	1c6a      	adds	r2, r5, #1
 80080cc:	9215      	str	r2, [sp, #84]	; 0x54
 80080ce:	786a      	ldrb	r2, [r5, #1]
 80080d0:	2a2b      	cmp	r2, #43	; 0x2b
 80080d2:	d074      	beq.n	80081be <_strtod_l+0x27e>
 80080d4:	2a2d      	cmp	r2, #45	; 0x2d
 80080d6:	d078      	beq.n	80081ca <_strtod_l+0x28a>
 80080d8:	f04f 0c00 	mov.w	ip, #0
 80080dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80080e0:	2909      	cmp	r1, #9
 80080e2:	d97f      	bls.n	80081e4 <_strtod_l+0x2a4>
 80080e4:	9515      	str	r5, [sp, #84]	; 0x54
 80080e6:	2700      	movs	r7, #0
 80080e8:	e09e      	b.n	8008228 <_strtod_l+0x2e8>
 80080ea:	2300      	movs	r3, #0
 80080ec:	e7c8      	b.n	8008080 <_strtod_l+0x140>
 80080ee:	f1bb 0f08 	cmp.w	fp, #8
 80080f2:	bfd8      	it	le
 80080f4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80080f6:	f100 0001 	add.w	r0, r0, #1
 80080fa:	bfda      	itte	le
 80080fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008100:	9309      	strle	r3, [sp, #36]	; 0x24
 8008102:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008106:	f10b 0b01 	add.w	fp, fp, #1
 800810a:	9015      	str	r0, [sp, #84]	; 0x54
 800810c:	e7c1      	b.n	8008092 <_strtod_l+0x152>
 800810e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	9215      	str	r2, [sp, #84]	; 0x54
 8008114:	785a      	ldrb	r2, [r3, #1]
 8008116:	f1bb 0f00 	cmp.w	fp, #0
 800811a:	d037      	beq.n	800818c <_strtod_l+0x24c>
 800811c:	9005      	str	r0, [sp, #20]
 800811e:	465e      	mov	r6, fp
 8008120:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008124:	2b09      	cmp	r3, #9
 8008126:	d912      	bls.n	800814e <_strtod_l+0x20e>
 8008128:	2301      	movs	r3, #1
 800812a:	e7c4      	b.n	80080b6 <_strtod_l+0x176>
 800812c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	9215      	str	r2, [sp, #84]	; 0x54
 8008132:	785a      	ldrb	r2, [r3, #1]
 8008134:	3001      	adds	r0, #1
 8008136:	2a30      	cmp	r2, #48	; 0x30
 8008138:	d0f8      	beq.n	800812c <_strtod_l+0x1ec>
 800813a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800813e:	2b08      	cmp	r3, #8
 8008140:	f200 84c1 	bhi.w	8008ac6 <_strtod_l+0xb86>
 8008144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008146:	9005      	str	r0, [sp, #20]
 8008148:	2000      	movs	r0, #0
 800814a:	930b      	str	r3, [sp, #44]	; 0x2c
 800814c:	4606      	mov	r6, r0
 800814e:	3a30      	subs	r2, #48	; 0x30
 8008150:	f100 0301 	add.w	r3, r0, #1
 8008154:	d014      	beq.n	8008180 <_strtod_l+0x240>
 8008156:	9905      	ldr	r1, [sp, #20]
 8008158:	4419      	add	r1, r3
 800815a:	9105      	str	r1, [sp, #20]
 800815c:	4633      	mov	r3, r6
 800815e:	eb00 0c06 	add.w	ip, r0, r6
 8008162:	210a      	movs	r1, #10
 8008164:	4563      	cmp	r3, ip
 8008166:	d113      	bne.n	8008190 <_strtod_l+0x250>
 8008168:	1833      	adds	r3, r6, r0
 800816a:	2b08      	cmp	r3, #8
 800816c:	f106 0601 	add.w	r6, r6, #1
 8008170:	4406      	add	r6, r0
 8008172:	dc1a      	bgt.n	80081aa <_strtod_l+0x26a>
 8008174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008176:	230a      	movs	r3, #10
 8008178:	fb03 2301 	mla	r3, r3, r1, r2
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	2300      	movs	r3, #0
 8008180:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008182:	1c51      	adds	r1, r2, #1
 8008184:	9115      	str	r1, [sp, #84]	; 0x54
 8008186:	7852      	ldrb	r2, [r2, #1]
 8008188:	4618      	mov	r0, r3
 800818a:	e7c9      	b.n	8008120 <_strtod_l+0x1e0>
 800818c:	4658      	mov	r0, fp
 800818e:	e7d2      	b.n	8008136 <_strtod_l+0x1f6>
 8008190:	2b08      	cmp	r3, #8
 8008192:	f103 0301 	add.w	r3, r3, #1
 8008196:	dc03      	bgt.n	80081a0 <_strtod_l+0x260>
 8008198:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800819a:	434f      	muls	r7, r1
 800819c:	9709      	str	r7, [sp, #36]	; 0x24
 800819e:	e7e1      	b.n	8008164 <_strtod_l+0x224>
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	bfd8      	it	le
 80081a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80081a8:	e7dc      	b.n	8008164 <_strtod_l+0x224>
 80081aa:	2e10      	cmp	r6, #16
 80081ac:	bfdc      	itt	le
 80081ae:	230a      	movle	r3, #10
 80081b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80081b4:	e7e3      	b.n	800817e <_strtod_l+0x23e>
 80081b6:	2300      	movs	r3, #0
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	2301      	movs	r3, #1
 80081bc:	e780      	b.n	80080c0 <_strtod_l+0x180>
 80081be:	f04f 0c00 	mov.w	ip, #0
 80081c2:	1caa      	adds	r2, r5, #2
 80081c4:	9215      	str	r2, [sp, #84]	; 0x54
 80081c6:	78aa      	ldrb	r2, [r5, #2]
 80081c8:	e788      	b.n	80080dc <_strtod_l+0x19c>
 80081ca:	f04f 0c01 	mov.w	ip, #1
 80081ce:	e7f8      	b.n	80081c2 <_strtod_l+0x282>
 80081d0:	0800d26c 	.word	0x0800d26c
 80081d4:	0800d268 	.word	0x0800d268
 80081d8:	7ff00000 	.word	0x7ff00000
 80081dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081de:	1c51      	adds	r1, r2, #1
 80081e0:	9115      	str	r1, [sp, #84]	; 0x54
 80081e2:	7852      	ldrb	r2, [r2, #1]
 80081e4:	2a30      	cmp	r2, #48	; 0x30
 80081e6:	d0f9      	beq.n	80081dc <_strtod_l+0x29c>
 80081e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80081ec:	2908      	cmp	r1, #8
 80081ee:	f63f af7a 	bhi.w	80080e6 <_strtod_l+0x1a6>
 80081f2:	3a30      	subs	r2, #48	; 0x30
 80081f4:	9208      	str	r2, [sp, #32]
 80081f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081f8:	920c      	str	r2, [sp, #48]	; 0x30
 80081fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081fc:	1c57      	adds	r7, r2, #1
 80081fe:	9715      	str	r7, [sp, #84]	; 0x54
 8008200:	7852      	ldrb	r2, [r2, #1]
 8008202:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008206:	f1be 0f09 	cmp.w	lr, #9
 800820a:	d938      	bls.n	800827e <_strtod_l+0x33e>
 800820c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800820e:	1a7f      	subs	r7, r7, r1
 8008210:	2f08      	cmp	r7, #8
 8008212:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008216:	dc03      	bgt.n	8008220 <_strtod_l+0x2e0>
 8008218:	9908      	ldr	r1, [sp, #32]
 800821a:	428f      	cmp	r7, r1
 800821c:	bfa8      	it	ge
 800821e:	460f      	movge	r7, r1
 8008220:	f1bc 0f00 	cmp.w	ip, #0
 8008224:	d000      	beq.n	8008228 <_strtod_l+0x2e8>
 8008226:	427f      	negs	r7, r7
 8008228:	2e00      	cmp	r6, #0
 800822a:	d14f      	bne.n	80082cc <_strtod_l+0x38c>
 800822c:	9904      	ldr	r1, [sp, #16]
 800822e:	4301      	orrs	r1, r0
 8008230:	f47f aec1 	bne.w	8007fb6 <_strtod_l+0x76>
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f aedb 	bne.w	8007ff0 <_strtod_l+0xb0>
 800823a:	2a69      	cmp	r2, #105	; 0x69
 800823c:	d029      	beq.n	8008292 <_strtod_l+0x352>
 800823e:	dc26      	bgt.n	800828e <_strtod_l+0x34e>
 8008240:	2a49      	cmp	r2, #73	; 0x49
 8008242:	d026      	beq.n	8008292 <_strtod_l+0x352>
 8008244:	2a4e      	cmp	r2, #78	; 0x4e
 8008246:	f47f aed3 	bne.w	8007ff0 <_strtod_l+0xb0>
 800824a:	499b      	ldr	r1, [pc, #620]	; (80084b8 <_strtod_l+0x578>)
 800824c:	a815      	add	r0, sp, #84	; 0x54
 800824e:	f002 ff25 	bl	800b09c <__match>
 8008252:	2800      	cmp	r0, #0
 8008254:	f43f aecc 	beq.w	8007ff0 <_strtod_l+0xb0>
 8008258:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b28      	cmp	r3, #40	; 0x28
 800825e:	d12f      	bne.n	80082c0 <_strtod_l+0x380>
 8008260:	4996      	ldr	r1, [pc, #600]	; (80084bc <_strtod_l+0x57c>)
 8008262:	aa18      	add	r2, sp, #96	; 0x60
 8008264:	a815      	add	r0, sp, #84	; 0x54
 8008266:	f002 ff2d 	bl	800b0c4 <__hexnan>
 800826a:	2805      	cmp	r0, #5
 800826c:	d128      	bne.n	80082c0 <_strtod_l+0x380>
 800826e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008270:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008274:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008278:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800827c:	e69b      	b.n	8007fb6 <_strtod_l+0x76>
 800827e:	9f08      	ldr	r7, [sp, #32]
 8008280:	210a      	movs	r1, #10
 8008282:	fb01 2107 	mla	r1, r1, r7, r2
 8008286:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800828a:	9208      	str	r2, [sp, #32]
 800828c:	e7b5      	b.n	80081fa <_strtod_l+0x2ba>
 800828e:	2a6e      	cmp	r2, #110	; 0x6e
 8008290:	e7d9      	b.n	8008246 <_strtod_l+0x306>
 8008292:	498b      	ldr	r1, [pc, #556]	; (80084c0 <_strtod_l+0x580>)
 8008294:	a815      	add	r0, sp, #84	; 0x54
 8008296:	f002 ff01 	bl	800b09c <__match>
 800829a:	2800      	cmp	r0, #0
 800829c:	f43f aea8 	beq.w	8007ff0 <_strtod_l+0xb0>
 80082a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082a2:	4988      	ldr	r1, [pc, #544]	; (80084c4 <_strtod_l+0x584>)
 80082a4:	3b01      	subs	r3, #1
 80082a6:	a815      	add	r0, sp, #84	; 0x54
 80082a8:	9315      	str	r3, [sp, #84]	; 0x54
 80082aa:	f002 fef7 	bl	800b09c <__match>
 80082ae:	b910      	cbnz	r0, 80082b6 <_strtod_l+0x376>
 80082b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b2:	3301      	adds	r3, #1
 80082b4:	9315      	str	r3, [sp, #84]	; 0x54
 80082b6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80084d4 <_strtod_l+0x594>
 80082ba:	f04f 0800 	mov.w	r8, #0
 80082be:	e67a      	b.n	8007fb6 <_strtod_l+0x76>
 80082c0:	4881      	ldr	r0, [pc, #516]	; (80084c8 <_strtod_l+0x588>)
 80082c2:	f001 fd6d 	bl	8009da0 <nan>
 80082c6:	ec59 8b10 	vmov	r8, r9, d0
 80082ca:	e674      	b.n	8007fb6 <_strtod_l+0x76>
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d0:	1afb      	subs	r3, r7, r3
 80082d2:	f1bb 0f00 	cmp.w	fp, #0
 80082d6:	bf08      	it	eq
 80082d8:	46b3      	moveq	fp, r6
 80082da:	2e10      	cmp	r6, #16
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	4635      	mov	r5, r6
 80082e0:	bfa8      	it	ge
 80082e2:	2510      	movge	r5, #16
 80082e4:	f7f8 f926 	bl	8000534 <__aeabi_ui2d>
 80082e8:	2e09      	cmp	r6, #9
 80082ea:	4680      	mov	r8, r0
 80082ec:	4689      	mov	r9, r1
 80082ee:	dd13      	ble.n	8008318 <_strtod_l+0x3d8>
 80082f0:	4b76      	ldr	r3, [pc, #472]	; (80084cc <_strtod_l+0x58c>)
 80082f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80082f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082fa:	f7f8 f995 	bl	8000628 <__aeabi_dmul>
 80082fe:	4680      	mov	r8, r0
 8008300:	4650      	mov	r0, sl
 8008302:	4689      	mov	r9, r1
 8008304:	f7f8 f916 	bl	8000534 <__aeabi_ui2d>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f7 ffd4 	bl	80002bc <__adddf3>
 8008314:	4680      	mov	r8, r0
 8008316:	4689      	mov	r9, r1
 8008318:	2e0f      	cmp	r6, #15
 800831a:	dc38      	bgt.n	800838e <_strtod_l+0x44e>
 800831c:	9b08      	ldr	r3, [sp, #32]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f43f ae49 	beq.w	8007fb6 <_strtod_l+0x76>
 8008324:	dd24      	ble.n	8008370 <_strtod_l+0x430>
 8008326:	2b16      	cmp	r3, #22
 8008328:	dc0b      	bgt.n	8008342 <_strtod_l+0x402>
 800832a:	4968      	ldr	r1, [pc, #416]	; (80084cc <_strtod_l+0x58c>)
 800832c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	f7f8 f976 	bl	8000628 <__aeabi_dmul>
 800833c:	4680      	mov	r8, r0
 800833e:	4689      	mov	r9, r1
 8008340:	e639      	b.n	8007fb6 <_strtod_l+0x76>
 8008342:	9a08      	ldr	r2, [sp, #32]
 8008344:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008348:	4293      	cmp	r3, r2
 800834a:	db20      	blt.n	800838e <_strtod_l+0x44e>
 800834c:	4c5f      	ldr	r4, [pc, #380]	; (80084cc <_strtod_l+0x58c>)
 800834e:	f1c6 060f 	rsb	r6, r6, #15
 8008352:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008356:	4642      	mov	r2, r8
 8008358:	464b      	mov	r3, r9
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	f7f8 f963 	bl	8000628 <__aeabi_dmul>
 8008362:	9b08      	ldr	r3, [sp, #32]
 8008364:	1b9e      	subs	r6, r3, r6
 8008366:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800836a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800836e:	e7e3      	b.n	8008338 <_strtod_l+0x3f8>
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	3316      	adds	r3, #22
 8008374:	db0b      	blt.n	800838e <_strtod_l+0x44e>
 8008376:	9b05      	ldr	r3, [sp, #20]
 8008378:	1bdf      	subs	r7, r3, r7
 800837a:	4b54      	ldr	r3, [pc, #336]	; (80084cc <_strtod_l+0x58c>)
 800837c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 fa78 	bl	800087c <__aeabi_ddiv>
 800838c:	e7d6      	b.n	800833c <_strtod_l+0x3fc>
 800838e:	9b08      	ldr	r3, [sp, #32]
 8008390:	1b75      	subs	r5, r6, r5
 8008392:	441d      	add	r5, r3
 8008394:	2d00      	cmp	r5, #0
 8008396:	dd70      	ble.n	800847a <_strtod_l+0x53a>
 8008398:	f015 030f 	ands.w	r3, r5, #15
 800839c:	d00a      	beq.n	80083b4 <_strtod_l+0x474>
 800839e:	494b      	ldr	r1, [pc, #300]	; (80084cc <_strtod_l+0x58c>)
 80083a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083a4:	4642      	mov	r2, r8
 80083a6:	464b      	mov	r3, r9
 80083a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ac:	f7f8 f93c 	bl	8000628 <__aeabi_dmul>
 80083b0:	4680      	mov	r8, r0
 80083b2:	4689      	mov	r9, r1
 80083b4:	f035 050f 	bics.w	r5, r5, #15
 80083b8:	d04d      	beq.n	8008456 <_strtod_l+0x516>
 80083ba:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80083be:	dd22      	ble.n	8008406 <_strtod_l+0x4c6>
 80083c0:	2500      	movs	r5, #0
 80083c2:	46ab      	mov	fp, r5
 80083c4:	9509      	str	r5, [sp, #36]	; 0x24
 80083c6:	9505      	str	r5, [sp, #20]
 80083c8:	2322      	movs	r3, #34	; 0x22
 80083ca:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80084d4 <_strtod_l+0x594>
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	f04f 0800 	mov.w	r8, #0
 80083d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f43f aded 	beq.w	8007fb6 <_strtod_l+0x76>
 80083dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80083de:	4620      	mov	r0, r4
 80083e0:	f003 f812 	bl	800b408 <_Bfree>
 80083e4:	9905      	ldr	r1, [sp, #20]
 80083e6:	4620      	mov	r0, r4
 80083e8:	f003 f80e 	bl	800b408 <_Bfree>
 80083ec:	4659      	mov	r1, fp
 80083ee:	4620      	mov	r0, r4
 80083f0:	f003 f80a 	bl	800b408 <_Bfree>
 80083f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083f6:	4620      	mov	r0, r4
 80083f8:	f003 f806 	bl	800b408 <_Bfree>
 80083fc:	4629      	mov	r1, r5
 80083fe:	4620      	mov	r0, r4
 8008400:	f003 f802 	bl	800b408 <_Bfree>
 8008404:	e5d7      	b.n	8007fb6 <_strtod_l+0x76>
 8008406:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <_strtod_l+0x590>)
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	2300      	movs	r3, #0
 800840c:	112d      	asrs	r5, r5, #4
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	469a      	mov	sl, r3
 8008414:	2d01      	cmp	r5, #1
 8008416:	dc21      	bgt.n	800845c <_strtod_l+0x51c>
 8008418:	b10b      	cbz	r3, 800841e <_strtod_l+0x4de>
 800841a:	4680      	mov	r8, r0
 800841c:	4689      	mov	r9, r1
 800841e:	492c      	ldr	r1, [pc, #176]	; (80084d0 <_strtod_l+0x590>)
 8008420:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008424:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008428:	4642      	mov	r2, r8
 800842a:	464b      	mov	r3, r9
 800842c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008430:	f7f8 f8fa 	bl	8000628 <__aeabi_dmul>
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <_strtod_l+0x594>)
 8008436:	460a      	mov	r2, r1
 8008438:	400b      	ands	r3, r1
 800843a:	4927      	ldr	r1, [pc, #156]	; (80084d8 <_strtod_l+0x598>)
 800843c:	428b      	cmp	r3, r1
 800843e:	4680      	mov	r8, r0
 8008440:	d8be      	bhi.n	80083c0 <_strtod_l+0x480>
 8008442:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008446:	428b      	cmp	r3, r1
 8008448:	bf86      	itte	hi
 800844a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80084dc <_strtod_l+0x59c>
 800844e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008452:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008456:	2300      	movs	r3, #0
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	e07b      	b.n	8008554 <_strtod_l+0x614>
 800845c:	07ea      	lsls	r2, r5, #31
 800845e:	d505      	bpl.n	800846c <_strtod_l+0x52c>
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	f7f8 f8df 	bl	8000628 <__aeabi_dmul>
 800846a:	2301      	movs	r3, #1
 800846c:	9a04      	ldr	r2, [sp, #16]
 800846e:	3208      	adds	r2, #8
 8008470:	f10a 0a01 	add.w	sl, sl, #1
 8008474:	106d      	asrs	r5, r5, #1
 8008476:	9204      	str	r2, [sp, #16]
 8008478:	e7cc      	b.n	8008414 <_strtod_l+0x4d4>
 800847a:	d0ec      	beq.n	8008456 <_strtod_l+0x516>
 800847c:	426d      	negs	r5, r5
 800847e:	f015 020f 	ands.w	r2, r5, #15
 8008482:	d00a      	beq.n	800849a <_strtod_l+0x55a>
 8008484:	4b11      	ldr	r3, [pc, #68]	; (80084cc <_strtod_l+0x58c>)
 8008486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f8 f9f3 	bl	800087c <__aeabi_ddiv>
 8008496:	4680      	mov	r8, r0
 8008498:	4689      	mov	r9, r1
 800849a:	112d      	asrs	r5, r5, #4
 800849c:	d0db      	beq.n	8008456 <_strtod_l+0x516>
 800849e:	2d1f      	cmp	r5, #31
 80084a0:	dd1e      	ble.n	80084e0 <_strtod_l+0x5a0>
 80084a2:	2500      	movs	r5, #0
 80084a4:	46ab      	mov	fp, r5
 80084a6:	9509      	str	r5, [sp, #36]	; 0x24
 80084a8:	9505      	str	r5, [sp, #20]
 80084aa:	2322      	movs	r3, #34	; 0x22
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	f04f 0900 	mov.w	r9, #0
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	e78d      	b.n	80083d4 <_strtod_l+0x494>
 80084b8:	0800d3ce 	.word	0x0800d3ce
 80084bc:	0800d280 	.word	0x0800d280
 80084c0:	0800d3c6 	.word	0x0800d3c6
 80084c4:	0800d405 	.word	0x0800d405
 80084c8:	0800d690 	.word	0x0800d690
 80084cc:	0800d570 	.word	0x0800d570
 80084d0:	0800d548 	.word	0x0800d548
 80084d4:	7ff00000 	.word	0x7ff00000
 80084d8:	7ca00000 	.word	0x7ca00000
 80084dc:	7fefffff 	.word	0x7fefffff
 80084e0:	f015 0310 	ands.w	r3, r5, #16
 80084e4:	bf18      	it	ne
 80084e6:	236a      	movne	r3, #106	; 0x6a
 80084e8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800888c <_strtod_l+0x94c>
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	4640      	mov	r0, r8
 80084f0:	4649      	mov	r1, r9
 80084f2:	2300      	movs	r3, #0
 80084f4:	07ea      	lsls	r2, r5, #31
 80084f6:	d504      	bpl.n	8008502 <_strtod_l+0x5c2>
 80084f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80084fc:	f7f8 f894 	bl	8000628 <__aeabi_dmul>
 8008500:	2301      	movs	r3, #1
 8008502:	106d      	asrs	r5, r5, #1
 8008504:	f10a 0a08 	add.w	sl, sl, #8
 8008508:	d1f4      	bne.n	80084f4 <_strtod_l+0x5b4>
 800850a:	b10b      	cbz	r3, 8008510 <_strtod_l+0x5d0>
 800850c:	4680      	mov	r8, r0
 800850e:	4689      	mov	r9, r1
 8008510:	9b04      	ldr	r3, [sp, #16]
 8008512:	b1bb      	cbz	r3, 8008544 <_strtod_l+0x604>
 8008514:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008518:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800851c:	2b00      	cmp	r3, #0
 800851e:	4649      	mov	r1, r9
 8008520:	dd10      	ble.n	8008544 <_strtod_l+0x604>
 8008522:	2b1f      	cmp	r3, #31
 8008524:	f340 811e 	ble.w	8008764 <_strtod_l+0x824>
 8008528:	2b34      	cmp	r3, #52	; 0x34
 800852a:	bfde      	ittt	le
 800852c:	f04f 33ff 	movle.w	r3, #4294967295
 8008530:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008534:	4093      	lslle	r3, r2
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	bfcc      	ite	gt
 800853c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008540:	ea03 0901 	andle.w	r9, r3, r1
 8008544:	2200      	movs	r2, #0
 8008546:	2300      	movs	r3, #0
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 fad4 	bl	8000af8 <__aeabi_dcmpeq>
 8008550:	2800      	cmp	r0, #0
 8008552:	d1a6      	bne.n	80084a2 <_strtod_l+0x562>
 8008554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800855a:	4633      	mov	r3, r6
 800855c:	465a      	mov	r2, fp
 800855e:	4620      	mov	r0, r4
 8008560:	f002 ffba 	bl	800b4d8 <__s2b>
 8008564:	9009      	str	r0, [sp, #36]	; 0x24
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f af2a 	beq.w	80083c0 <_strtod_l+0x480>
 800856c:	9a08      	ldr	r2, [sp, #32]
 800856e:	9b05      	ldr	r3, [sp, #20]
 8008570:	2a00      	cmp	r2, #0
 8008572:	eba3 0307 	sub.w	r3, r3, r7
 8008576:	bfa8      	it	ge
 8008578:	2300      	movge	r3, #0
 800857a:	930c      	str	r3, [sp, #48]	; 0x30
 800857c:	2500      	movs	r5, #0
 800857e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008582:	9312      	str	r3, [sp, #72]	; 0x48
 8008584:	46ab      	mov	fp, r5
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	4620      	mov	r0, r4
 800858a:	6859      	ldr	r1, [r3, #4]
 800858c:	f002 fefc 	bl	800b388 <_Balloc>
 8008590:	9005      	str	r0, [sp, #20]
 8008592:	2800      	cmp	r0, #0
 8008594:	f43f af18 	beq.w	80083c8 <_strtod_l+0x488>
 8008598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859a:	691a      	ldr	r2, [r3, #16]
 800859c:	3202      	adds	r2, #2
 800859e:	f103 010c 	add.w	r1, r3, #12
 80085a2:	0092      	lsls	r2, r2, #2
 80085a4:	300c      	adds	r0, #12
 80085a6:	f001 fbec 	bl	8009d82 <memcpy>
 80085aa:	ec49 8b10 	vmov	d0, r8, r9
 80085ae:	aa18      	add	r2, sp, #96	; 0x60
 80085b0:	a917      	add	r1, sp, #92	; 0x5c
 80085b2:	4620      	mov	r0, r4
 80085b4:	f003 fac4 	bl	800bb40 <__d2b>
 80085b8:	ec49 8b18 	vmov	d8, r8, r9
 80085bc:	9016      	str	r0, [sp, #88]	; 0x58
 80085be:	2800      	cmp	r0, #0
 80085c0:	f43f af02 	beq.w	80083c8 <_strtod_l+0x488>
 80085c4:	2101      	movs	r1, #1
 80085c6:	4620      	mov	r0, r4
 80085c8:	f003 f81e 	bl	800b608 <__i2b>
 80085cc:	4683      	mov	fp, r0
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f43f aefa 	beq.w	80083c8 <_strtod_l+0x488>
 80085d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80085d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085d8:	2e00      	cmp	r6, #0
 80085da:	bfab      	itete	ge
 80085dc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80085de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80085e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80085e2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80085e6:	bfac      	ite	ge
 80085e8:	eb06 0a03 	addge.w	sl, r6, r3
 80085ec:	1b9f      	sublt	r7, r3, r6
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	1af6      	subs	r6, r6, r3
 80085f2:	4416      	add	r6, r2
 80085f4:	4ba0      	ldr	r3, [pc, #640]	; (8008878 <_strtod_l+0x938>)
 80085f6:	3e01      	subs	r6, #1
 80085f8:	429e      	cmp	r6, r3
 80085fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085fe:	f280 80c4 	bge.w	800878a <_strtod_l+0x84a>
 8008602:	1b9b      	subs	r3, r3, r6
 8008604:	2b1f      	cmp	r3, #31
 8008606:	eba2 0203 	sub.w	r2, r2, r3
 800860a:	f04f 0101 	mov.w	r1, #1
 800860e:	f300 80b0 	bgt.w	8008772 <_strtod_l+0x832>
 8008612:	fa01 f303 	lsl.w	r3, r1, r3
 8008616:	930e      	str	r3, [sp, #56]	; 0x38
 8008618:	2300      	movs	r3, #0
 800861a:	930d      	str	r3, [sp, #52]	; 0x34
 800861c:	eb0a 0602 	add.w	r6, sl, r2
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	45b2      	cmp	sl, r6
 8008624:	4417      	add	r7, r2
 8008626:	441f      	add	r7, r3
 8008628:	4653      	mov	r3, sl
 800862a:	bfa8      	it	ge
 800862c:	4633      	movge	r3, r6
 800862e:	42bb      	cmp	r3, r7
 8008630:	bfa8      	it	ge
 8008632:	463b      	movge	r3, r7
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfc2      	ittt	gt
 8008638:	1af6      	subgt	r6, r6, r3
 800863a:	1aff      	subgt	r7, r7, r3
 800863c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd17      	ble.n	8008676 <_strtod_l+0x736>
 8008646:	4659      	mov	r1, fp
 8008648:	461a      	mov	r2, r3
 800864a:	4620      	mov	r0, r4
 800864c:	f003 f89c 	bl	800b788 <__pow5mult>
 8008650:	4683      	mov	fp, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f aeb8 	beq.w	80083c8 <_strtod_l+0x488>
 8008658:	4601      	mov	r1, r0
 800865a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800865c:	4620      	mov	r0, r4
 800865e:	f002 ffe9 	bl	800b634 <__multiply>
 8008662:	900b      	str	r0, [sp, #44]	; 0x2c
 8008664:	2800      	cmp	r0, #0
 8008666:	f43f aeaf 	beq.w	80083c8 <_strtod_l+0x488>
 800866a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800866c:	4620      	mov	r0, r4
 800866e:	f002 fecb 	bl	800b408 <_Bfree>
 8008672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008674:	9316      	str	r3, [sp, #88]	; 0x58
 8008676:	2e00      	cmp	r6, #0
 8008678:	f300 808c 	bgt.w	8008794 <_strtod_l+0x854>
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd08      	ble.n	8008694 <_strtod_l+0x754>
 8008682:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008684:	9905      	ldr	r1, [sp, #20]
 8008686:	4620      	mov	r0, r4
 8008688:	f003 f87e 	bl	800b788 <__pow5mult>
 800868c:	9005      	str	r0, [sp, #20]
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f ae9a 	beq.w	80083c8 <_strtod_l+0x488>
 8008694:	2f00      	cmp	r7, #0
 8008696:	dd08      	ble.n	80086aa <_strtod_l+0x76a>
 8008698:	9905      	ldr	r1, [sp, #20]
 800869a:	463a      	mov	r2, r7
 800869c:	4620      	mov	r0, r4
 800869e:	f003 f8cd 	bl	800b83c <__lshift>
 80086a2:	9005      	str	r0, [sp, #20]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f ae8f 	beq.w	80083c8 <_strtod_l+0x488>
 80086aa:	f1ba 0f00 	cmp.w	sl, #0
 80086ae:	dd08      	ble.n	80086c2 <_strtod_l+0x782>
 80086b0:	4659      	mov	r1, fp
 80086b2:	4652      	mov	r2, sl
 80086b4:	4620      	mov	r0, r4
 80086b6:	f003 f8c1 	bl	800b83c <__lshift>
 80086ba:	4683      	mov	fp, r0
 80086bc:	2800      	cmp	r0, #0
 80086be:	f43f ae83 	beq.w	80083c8 <_strtod_l+0x488>
 80086c2:	9a05      	ldr	r2, [sp, #20]
 80086c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086c6:	4620      	mov	r0, r4
 80086c8:	f003 f940 	bl	800b94c <__mdiff>
 80086cc:	4605      	mov	r5, r0
 80086ce:	2800      	cmp	r0, #0
 80086d0:	f43f ae7a 	beq.w	80083c8 <_strtod_l+0x488>
 80086d4:	68c3      	ldr	r3, [r0, #12]
 80086d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086d8:	2300      	movs	r3, #0
 80086da:	60c3      	str	r3, [r0, #12]
 80086dc:	4659      	mov	r1, fp
 80086de:	f003 f919 	bl	800b914 <__mcmp>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	da60      	bge.n	80087a8 <_strtod_l+0x868>
 80086e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e8:	ea53 0308 	orrs.w	r3, r3, r8
 80086ec:	f040 8084 	bne.w	80087f8 <_strtod_l+0x8b8>
 80086f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d17f      	bne.n	80087f8 <_strtod_l+0x8b8>
 80086f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086fc:	0d1b      	lsrs	r3, r3, #20
 80086fe:	051b      	lsls	r3, r3, #20
 8008700:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008704:	d978      	bls.n	80087f8 <_strtod_l+0x8b8>
 8008706:	696b      	ldr	r3, [r5, #20]
 8008708:	b913      	cbnz	r3, 8008710 <_strtod_l+0x7d0>
 800870a:	692b      	ldr	r3, [r5, #16]
 800870c:	2b01      	cmp	r3, #1
 800870e:	dd73      	ble.n	80087f8 <_strtod_l+0x8b8>
 8008710:	4629      	mov	r1, r5
 8008712:	2201      	movs	r2, #1
 8008714:	4620      	mov	r0, r4
 8008716:	f003 f891 	bl	800b83c <__lshift>
 800871a:	4659      	mov	r1, fp
 800871c:	4605      	mov	r5, r0
 800871e:	f003 f8f9 	bl	800b914 <__mcmp>
 8008722:	2800      	cmp	r0, #0
 8008724:	dd68      	ble.n	80087f8 <_strtod_l+0x8b8>
 8008726:	9904      	ldr	r1, [sp, #16]
 8008728:	4a54      	ldr	r2, [pc, #336]	; (800887c <_strtod_l+0x93c>)
 800872a:	464b      	mov	r3, r9
 800872c:	2900      	cmp	r1, #0
 800872e:	f000 8084 	beq.w	800883a <_strtod_l+0x8fa>
 8008732:	ea02 0109 	and.w	r1, r2, r9
 8008736:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800873a:	dc7e      	bgt.n	800883a <_strtod_l+0x8fa>
 800873c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008740:	f77f aeb3 	ble.w	80084aa <_strtod_l+0x56a>
 8008744:	4b4e      	ldr	r3, [pc, #312]	; (8008880 <_strtod_l+0x940>)
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	2200      	movs	r2, #0
 800874c:	f7f7 ff6c 	bl	8000628 <__aeabi_dmul>
 8008750:	4b4a      	ldr	r3, [pc, #296]	; (800887c <_strtod_l+0x93c>)
 8008752:	400b      	ands	r3, r1
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	2b00      	cmp	r3, #0
 800875a:	f47f ae3f 	bne.w	80083dc <_strtod_l+0x49c>
 800875e:	2322      	movs	r3, #34	; 0x22
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	e63b      	b.n	80083dc <_strtod_l+0x49c>
 8008764:	f04f 32ff 	mov.w	r2, #4294967295
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	ea03 0808 	and.w	r8, r3, r8
 8008770:	e6e8      	b.n	8008544 <_strtod_l+0x604>
 8008772:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008776:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800877a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800877e:	36e2      	adds	r6, #226	; 0xe2
 8008780:	fa01 f306 	lsl.w	r3, r1, r6
 8008784:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008788:	e748      	b.n	800861c <_strtod_l+0x6dc>
 800878a:	2100      	movs	r1, #0
 800878c:	2301      	movs	r3, #1
 800878e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008792:	e743      	b.n	800861c <_strtod_l+0x6dc>
 8008794:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008796:	4632      	mov	r2, r6
 8008798:	4620      	mov	r0, r4
 800879a:	f003 f84f 	bl	800b83c <__lshift>
 800879e:	9016      	str	r0, [sp, #88]	; 0x58
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f47f af6b 	bne.w	800867c <_strtod_l+0x73c>
 80087a6:	e60f      	b.n	80083c8 <_strtod_l+0x488>
 80087a8:	46ca      	mov	sl, r9
 80087aa:	d171      	bne.n	8008890 <_strtod_l+0x950>
 80087ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087b2:	b352      	cbz	r2, 800880a <_strtod_l+0x8ca>
 80087b4:	4a33      	ldr	r2, [pc, #204]	; (8008884 <_strtod_l+0x944>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d12a      	bne.n	8008810 <_strtod_l+0x8d0>
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	4641      	mov	r1, r8
 80087be:	b1fb      	cbz	r3, 8008800 <_strtod_l+0x8c0>
 80087c0:	4b2e      	ldr	r3, [pc, #184]	; (800887c <_strtod_l+0x93c>)
 80087c2:	ea09 0303 	and.w	r3, r9, r3
 80087c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	d81a      	bhi.n	8008806 <_strtod_l+0x8c6>
 80087d0:	0d1b      	lsrs	r3, r3, #20
 80087d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	4299      	cmp	r1, r3
 80087dc:	d118      	bne.n	8008810 <_strtod_l+0x8d0>
 80087de:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <_strtod_l+0x948>)
 80087e0:	459a      	cmp	sl, r3
 80087e2:	d102      	bne.n	80087ea <_strtod_l+0x8aa>
 80087e4:	3101      	adds	r1, #1
 80087e6:	f43f adef 	beq.w	80083c8 <_strtod_l+0x488>
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <_strtod_l+0x93c>)
 80087ec:	ea0a 0303 	and.w	r3, sl, r3
 80087f0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80087f4:	f04f 0800 	mov.w	r8, #0
 80087f8:	9b04      	ldr	r3, [sp, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1a2      	bne.n	8008744 <_strtod_l+0x804>
 80087fe:	e5ed      	b.n	80083dc <_strtod_l+0x49c>
 8008800:	f04f 33ff 	mov.w	r3, #4294967295
 8008804:	e7e9      	b.n	80087da <_strtod_l+0x89a>
 8008806:	4613      	mov	r3, r2
 8008808:	e7e7      	b.n	80087da <_strtod_l+0x89a>
 800880a:	ea53 0308 	orrs.w	r3, r3, r8
 800880e:	d08a      	beq.n	8008726 <_strtod_l+0x7e6>
 8008810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008812:	b1e3      	cbz	r3, 800884e <_strtod_l+0x90e>
 8008814:	ea13 0f0a 	tst.w	r3, sl
 8008818:	d0ee      	beq.n	80087f8 <_strtod_l+0x8b8>
 800881a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800881c:	9a04      	ldr	r2, [sp, #16]
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	b1c3      	cbz	r3, 8008856 <_strtod_l+0x916>
 8008824:	f7ff fb6e 	bl	8007f04 <sulp>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	ec51 0b18 	vmov	r0, r1, d8
 8008830:	f7f7 fd44 	bl	80002bc <__adddf3>
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	e7de      	b.n	80087f8 <_strtod_l+0x8b8>
 800883a:	4013      	ands	r3, r2
 800883c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008840:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008844:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008848:	f04f 38ff 	mov.w	r8, #4294967295
 800884c:	e7d4      	b.n	80087f8 <_strtod_l+0x8b8>
 800884e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008850:	ea13 0f08 	tst.w	r3, r8
 8008854:	e7e0      	b.n	8008818 <_strtod_l+0x8d8>
 8008856:	f7ff fb55 	bl	8007f04 <sulp>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	ec51 0b18 	vmov	r0, r1, d8
 8008862:	f7f7 fd29 	bl	80002b8 <__aeabi_dsub>
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	4680      	mov	r8, r0
 800886c:	4689      	mov	r9, r1
 800886e:	f7f8 f943 	bl	8000af8 <__aeabi_dcmpeq>
 8008872:	2800      	cmp	r0, #0
 8008874:	d0c0      	beq.n	80087f8 <_strtod_l+0x8b8>
 8008876:	e618      	b.n	80084aa <_strtod_l+0x56a>
 8008878:	fffffc02 	.word	0xfffffc02
 800887c:	7ff00000 	.word	0x7ff00000
 8008880:	39500000 	.word	0x39500000
 8008884:	000fffff 	.word	0x000fffff
 8008888:	7fefffff 	.word	0x7fefffff
 800888c:	0800d298 	.word	0x0800d298
 8008890:	4659      	mov	r1, fp
 8008892:	4628      	mov	r0, r5
 8008894:	f003 f9ae 	bl	800bbf4 <__ratio>
 8008898:	ec57 6b10 	vmov	r6, r7, d0
 800889c:	ee10 0a10 	vmov	r0, s0
 80088a0:	2200      	movs	r2, #0
 80088a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f93a 	bl	8000b20 <__aeabi_dcmple>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d071      	beq.n	8008994 <_strtod_l+0xa54>
 80088b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d17c      	bne.n	80089b0 <_strtod_l+0xa70>
 80088b6:	f1b8 0f00 	cmp.w	r8, #0
 80088ba:	d15a      	bne.n	8008972 <_strtod_l+0xa32>
 80088bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d15d      	bne.n	8008980 <_strtod_l+0xa40>
 80088c4:	4b90      	ldr	r3, [pc, #576]	; (8008b08 <_strtod_l+0xbc8>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	4630      	mov	r0, r6
 80088ca:	4639      	mov	r1, r7
 80088cc:	f7f8 f91e 	bl	8000b0c <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d15c      	bne.n	800898e <_strtod_l+0xa4e>
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	4b8c      	ldr	r3, [pc, #560]	; (8008b0c <_strtod_l+0xbcc>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fea4 	bl	8000628 <__aeabi_dmul>
 80088e0:	4606      	mov	r6, r0
 80088e2:	460f      	mov	r7, r1
 80088e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80088e8:	9606      	str	r6, [sp, #24]
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80088f4:	4b86      	ldr	r3, [pc, #536]	; (8008b10 <_strtod_l+0xbd0>)
 80088f6:	ea0a 0303 	and.w	r3, sl, r3
 80088fa:	930d      	str	r3, [sp, #52]	; 0x34
 80088fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088fe:	4b85      	ldr	r3, [pc, #532]	; (8008b14 <_strtod_l+0xbd4>)
 8008900:	429a      	cmp	r2, r3
 8008902:	f040 8090 	bne.w	8008a26 <_strtod_l+0xae6>
 8008906:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800890a:	ec49 8b10 	vmov	d0, r8, r9
 800890e:	f003 f8a7 	bl	800ba60 <__ulp>
 8008912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008916:	ec51 0b10 	vmov	r0, r1, d0
 800891a:	f7f7 fe85 	bl	8000628 <__aeabi_dmul>
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	f7f7 fccb 	bl	80002bc <__adddf3>
 8008926:	460b      	mov	r3, r1
 8008928:	4979      	ldr	r1, [pc, #484]	; (8008b10 <_strtod_l+0xbd0>)
 800892a:	4a7b      	ldr	r2, [pc, #492]	; (8008b18 <_strtod_l+0xbd8>)
 800892c:	4019      	ands	r1, r3
 800892e:	4291      	cmp	r1, r2
 8008930:	4680      	mov	r8, r0
 8008932:	d944      	bls.n	80089be <_strtod_l+0xa7e>
 8008934:	ee18 2a90 	vmov	r2, s17
 8008938:	4b78      	ldr	r3, [pc, #480]	; (8008b1c <_strtod_l+0xbdc>)
 800893a:	429a      	cmp	r2, r3
 800893c:	d104      	bne.n	8008948 <_strtod_l+0xa08>
 800893e:	ee18 3a10 	vmov	r3, s16
 8008942:	3301      	adds	r3, #1
 8008944:	f43f ad40 	beq.w	80083c8 <_strtod_l+0x488>
 8008948:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008b1c <_strtod_l+0xbdc>
 800894c:	f04f 38ff 	mov.w	r8, #4294967295
 8008950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008952:	4620      	mov	r0, r4
 8008954:	f002 fd58 	bl	800b408 <_Bfree>
 8008958:	9905      	ldr	r1, [sp, #20]
 800895a:	4620      	mov	r0, r4
 800895c:	f002 fd54 	bl	800b408 <_Bfree>
 8008960:	4659      	mov	r1, fp
 8008962:	4620      	mov	r0, r4
 8008964:	f002 fd50 	bl	800b408 <_Bfree>
 8008968:	4629      	mov	r1, r5
 800896a:	4620      	mov	r0, r4
 800896c:	f002 fd4c 	bl	800b408 <_Bfree>
 8008970:	e609      	b.n	8008586 <_strtod_l+0x646>
 8008972:	f1b8 0f01 	cmp.w	r8, #1
 8008976:	d103      	bne.n	8008980 <_strtod_l+0xa40>
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	f43f ad95 	beq.w	80084aa <_strtod_l+0x56a>
 8008980:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008ad8 <_strtod_l+0xb98>
 8008984:	4f60      	ldr	r7, [pc, #384]	; (8008b08 <_strtod_l+0xbc8>)
 8008986:	ed8d 7b06 	vstr	d7, [sp, #24]
 800898a:	2600      	movs	r6, #0
 800898c:	e7ae      	b.n	80088ec <_strtod_l+0x9ac>
 800898e:	4f5f      	ldr	r7, [pc, #380]	; (8008b0c <_strtod_l+0xbcc>)
 8008990:	2600      	movs	r6, #0
 8008992:	e7a7      	b.n	80088e4 <_strtod_l+0x9a4>
 8008994:	4b5d      	ldr	r3, [pc, #372]	; (8008b0c <_strtod_l+0xbcc>)
 8008996:	4630      	mov	r0, r6
 8008998:	4639      	mov	r1, r7
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe44 	bl	8000628 <__aeabi_dmul>
 80089a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a2:	4606      	mov	r6, r0
 80089a4:	460f      	mov	r7, r1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d09c      	beq.n	80088e4 <_strtod_l+0x9a4>
 80089aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80089ae:	e79d      	b.n	80088ec <_strtod_l+0x9ac>
 80089b0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008ae0 <_strtod_l+0xba0>
 80089b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089b8:	ec57 6b17 	vmov	r6, r7, d7
 80089bc:	e796      	b.n	80088ec <_strtod_l+0x9ac>
 80089be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	46ca      	mov	sl, r9
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1c2      	bne.n	8008950 <_strtod_l+0xa10>
 80089ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	051b      	lsls	r3, r3, #20
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d1bb      	bne.n	8008950 <_strtod_l+0xa10>
 80089d8:	4630      	mov	r0, r6
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f984 	bl	8000ce8 <__aeabi_d2lz>
 80089e0:	f7f7 fdf4 	bl	80005cc <__aeabi_l2d>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4630      	mov	r0, r6
 80089ea:	4639      	mov	r1, r7
 80089ec:	f7f7 fc64 	bl	80002b8 <__aeabi_dsub>
 80089f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089f6:	ea43 0308 	orr.w	r3, r3, r8
 80089fa:	4313      	orrs	r3, r2
 80089fc:	4606      	mov	r6, r0
 80089fe:	460f      	mov	r7, r1
 8008a00:	d054      	beq.n	8008aac <_strtod_l+0xb6c>
 8008a02:	a339      	add	r3, pc, #228	; (adr r3, 8008ae8 <_strtod_l+0xba8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f8 f880 	bl	8000b0c <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f47f ace5 	bne.w	80083dc <_strtod_l+0x49c>
 8008a12:	a337      	add	r3, pc, #220	; (adr r3, 8008af0 <_strtod_l+0xbb0>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f8 f894 	bl	8000b48 <__aeabi_dcmpgt>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d095      	beq.n	8008950 <_strtod_l+0xa10>
 8008a24:	e4da      	b.n	80083dc <_strtod_l+0x49c>
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	b333      	cbz	r3, 8008a78 <_strtod_l+0xb38>
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a30:	d822      	bhi.n	8008a78 <_strtod_l+0xb38>
 8008a32:	a331      	add	r3, pc, #196	; (adr r3, 8008af8 <_strtod_l+0xbb8>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f870 	bl	8000b20 <__aeabi_dcmple>
 8008a40:	b1a0      	cbz	r0, 8008a6c <_strtod_l+0xb2c>
 8008a42:	4639      	mov	r1, r7
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7f8 f8c7 	bl	8000bd8 <__aeabi_d2uiz>
 8008a4a:	2801      	cmp	r0, #1
 8008a4c:	bf38      	it	cc
 8008a4e:	2001      	movcc	r0, #1
 8008a50:	f7f7 fd70 	bl	8000534 <__aeabi_ui2d>
 8008a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a56:	4606      	mov	r6, r0
 8008a58:	460f      	mov	r7, r1
 8008a5a:	bb23      	cbnz	r3, 8008aa6 <_strtod_l+0xb66>
 8008a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a60:	9010      	str	r0, [sp, #64]	; 0x40
 8008a62:	9311      	str	r3, [sp, #68]	; 0x44
 8008a64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a80:	eef0 0a68 	vmov.f32	s1, s17
 8008a84:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008a88:	f002 ffea 	bl	800ba60 <__ulp>
 8008a8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a90:	ec53 2b10 	vmov	r2, r3, d0
 8008a94:	f7f7 fdc8 	bl	8000628 <__aeabi_dmul>
 8008a98:	ec53 2b18 	vmov	r2, r3, d8
 8008a9c:	f7f7 fc0e 	bl	80002bc <__adddf3>
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4689      	mov	r9, r1
 8008aa4:	e78d      	b.n	80089c2 <_strtod_l+0xa82>
 8008aa6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008aaa:	e7db      	b.n	8008a64 <_strtod_l+0xb24>
 8008aac:	a314      	add	r3, pc, #80	; (adr r3, 8008b00 <_strtod_l+0xbc0>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	f7f8 f82b 	bl	8000b0c <__aeabi_dcmplt>
 8008ab6:	e7b3      	b.n	8008a20 <_strtod_l+0xae0>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	930a      	str	r3, [sp, #40]	; 0x28
 8008abc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	f7ff ba7c 	b.w	8007fbe <_strtod_l+0x7e>
 8008ac6:	2a65      	cmp	r2, #101	; 0x65
 8008ac8:	f43f ab75 	beq.w	80081b6 <_strtod_l+0x276>
 8008acc:	2a45      	cmp	r2, #69	; 0x45
 8008ace:	f43f ab72 	beq.w	80081b6 <_strtod_l+0x276>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f7ff bbaa 	b.w	800822c <_strtod_l+0x2ec>
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	bff00000 	.word	0xbff00000
 8008ae0:	00000000 	.word	0x00000000
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	94a03595 	.word	0x94a03595
 8008aec:	3fdfffff 	.word	0x3fdfffff
 8008af0:	35afe535 	.word	0x35afe535
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	ffc00000 	.word	0xffc00000
 8008afc:	41dfffff 	.word	0x41dfffff
 8008b00:	94a03595 	.word	0x94a03595
 8008b04:	3fcfffff 	.word	0x3fcfffff
 8008b08:	3ff00000 	.word	0x3ff00000
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	7fe00000 	.word	0x7fe00000
 8008b18:	7c9fffff 	.word	0x7c9fffff
 8008b1c:	7fefffff 	.word	0x7fefffff

08008b20 <_strtod_r>:
 8008b20:	4b01      	ldr	r3, [pc, #4]	; (8008b28 <_strtod_r+0x8>)
 8008b22:	f7ff ba0d 	b.w	8007f40 <_strtod_l>
 8008b26:	bf00      	nop
 8008b28:	2000002c 	.word	0x2000002c

08008b2c <_strtol_l.constprop.0>:
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b32:	d001      	beq.n	8008b38 <_strtol_l.constprop.0+0xc>
 8008b34:	2b24      	cmp	r3, #36	; 0x24
 8008b36:	d906      	bls.n	8008b46 <_strtol_l.constprop.0+0x1a>
 8008b38:	f001 f8f6 	bl	8009d28 <__errno>
 8008b3c:	2316      	movs	r3, #22
 8008b3e:	6003      	str	r3, [r0, #0]
 8008b40:	2000      	movs	r0, #0
 8008b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c2c <_strtol_l.constprop.0+0x100>
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	462e      	mov	r6, r5
 8008b4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008b56:	f017 0708 	ands.w	r7, r7, #8
 8008b5a:	d1f7      	bne.n	8008b4c <_strtol_l.constprop.0+0x20>
 8008b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8008b5e:	d132      	bne.n	8008bc6 <_strtol_l.constprop.0+0x9a>
 8008b60:	782c      	ldrb	r4, [r5, #0]
 8008b62:	2701      	movs	r7, #1
 8008b64:	1cb5      	adds	r5, r6, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d05b      	beq.n	8008c22 <_strtol_l.constprop.0+0xf6>
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d109      	bne.n	8008b82 <_strtol_l.constprop.0+0x56>
 8008b6e:	2c30      	cmp	r4, #48	; 0x30
 8008b70:	d107      	bne.n	8008b82 <_strtol_l.constprop.0+0x56>
 8008b72:	782c      	ldrb	r4, [r5, #0]
 8008b74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b78:	2c58      	cmp	r4, #88	; 0x58
 8008b7a:	d14d      	bne.n	8008c18 <_strtol_l.constprop.0+0xec>
 8008b7c:	786c      	ldrb	r4, [r5, #1]
 8008b7e:	2310      	movs	r3, #16
 8008b80:	3502      	adds	r5, #2
 8008b82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008b86:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b8a:	f04f 0e00 	mov.w	lr, #0
 8008b8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008b92:	4676      	mov	r6, lr
 8008b94:	fb03 8a19 	mls	sl, r3, r9, r8
 8008b98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008b9c:	f1bc 0f09 	cmp.w	ip, #9
 8008ba0:	d816      	bhi.n	8008bd0 <_strtol_l.constprop.0+0xa4>
 8008ba2:	4664      	mov	r4, ip
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	dd24      	ble.n	8008bf2 <_strtol_l.constprop.0+0xc6>
 8008ba8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008bac:	d008      	beq.n	8008bc0 <_strtol_l.constprop.0+0x94>
 8008bae:	45b1      	cmp	r9, r6
 8008bb0:	d31c      	bcc.n	8008bec <_strtol_l.constprop.0+0xc0>
 8008bb2:	d101      	bne.n	8008bb8 <_strtol_l.constprop.0+0x8c>
 8008bb4:	45a2      	cmp	sl, r4
 8008bb6:	db19      	blt.n	8008bec <_strtol_l.constprop.0+0xc0>
 8008bb8:	fb06 4603 	mla	r6, r6, r3, r4
 8008bbc:	f04f 0e01 	mov.w	lr, #1
 8008bc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bc4:	e7e8      	b.n	8008b98 <_strtol_l.constprop.0+0x6c>
 8008bc6:	2c2b      	cmp	r4, #43	; 0x2b
 8008bc8:	bf04      	itt	eq
 8008bca:	782c      	ldrbeq	r4, [r5, #0]
 8008bcc:	1cb5      	addeq	r5, r6, #2
 8008bce:	e7ca      	b.n	8008b66 <_strtol_l.constprop.0+0x3a>
 8008bd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008bd4:	f1bc 0f19 	cmp.w	ip, #25
 8008bd8:	d801      	bhi.n	8008bde <_strtol_l.constprop.0+0xb2>
 8008bda:	3c37      	subs	r4, #55	; 0x37
 8008bdc:	e7e2      	b.n	8008ba4 <_strtol_l.constprop.0+0x78>
 8008bde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008be2:	f1bc 0f19 	cmp.w	ip, #25
 8008be6:	d804      	bhi.n	8008bf2 <_strtol_l.constprop.0+0xc6>
 8008be8:	3c57      	subs	r4, #87	; 0x57
 8008bea:	e7db      	b.n	8008ba4 <_strtol_l.constprop.0+0x78>
 8008bec:	f04f 3eff 	mov.w	lr, #4294967295
 8008bf0:	e7e6      	b.n	8008bc0 <_strtol_l.constprop.0+0x94>
 8008bf2:	f1be 3fff 	cmp.w	lr, #4294967295
 8008bf6:	d105      	bne.n	8008c04 <_strtol_l.constprop.0+0xd8>
 8008bf8:	2322      	movs	r3, #34	; 0x22
 8008bfa:	6003      	str	r3, [r0, #0]
 8008bfc:	4646      	mov	r6, r8
 8008bfe:	b942      	cbnz	r2, 8008c12 <_strtol_l.constprop.0+0xe6>
 8008c00:	4630      	mov	r0, r6
 8008c02:	e79e      	b.n	8008b42 <_strtol_l.constprop.0+0x16>
 8008c04:	b107      	cbz	r7, 8008c08 <_strtol_l.constprop.0+0xdc>
 8008c06:	4276      	negs	r6, r6
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	d0f9      	beq.n	8008c00 <_strtol_l.constprop.0+0xd4>
 8008c0c:	f1be 0f00 	cmp.w	lr, #0
 8008c10:	d000      	beq.n	8008c14 <_strtol_l.constprop.0+0xe8>
 8008c12:	1e69      	subs	r1, r5, #1
 8008c14:	6011      	str	r1, [r2, #0]
 8008c16:	e7f3      	b.n	8008c00 <_strtol_l.constprop.0+0xd4>
 8008c18:	2430      	movs	r4, #48	; 0x30
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1b1      	bne.n	8008b82 <_strtol_l.constprop.0+0x56>
 8008c1e:	2308      	movs	r3, #8
 8008c20:	e7af      	b.n	8008b82 <_strtol_l.constprop.0+0x56>
 8008c22:	2c30      	cmp	r4, #48	; 0x30
 8008c24:	d0a5      	beq.n	8008b72 <_strtol_l.constprop.0+0x46>
 8008c26:	230a      	movs	r3, #10
 8008c28:	e7ab      	b.n	8008b82 <_strtol_l.constprop.0+0x56>
 8008c2a:	bf00      	nop
 8008c2c:	0800d2c1 	.word	0x0800d2c1

08008c30 <_strtol_r>:
 8008c30:	f7ff bf7c 	b.w	8008b2c <_strtol_l.constprop.0>

08008c34 <strtol>:
 8008c34:	4613      	mov	r3, r2
 8008c36:	460a      	mov	r2, r1
 8008c38:	4601      	mov	r1, r0
 8008c3a:	4802      	ldr	r0, [pc, #8]	; (8008c44 <strtol+0x10>)
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f7ff bf75 	b.w	8008b2c <_strtol_l.constprop.0>
 8008c42:	bf00      	nop
 8008c44:	200001e4 	.word	0x200001e4

08008c48 <__cvt>:
 8008c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	ec55 4b10 	vmov	r4, r5, d0
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	460e      	mov	r6, r1
 8008c54:	4619      	mov	r1, r3
 8008c56:	462b      	mov	r3, r5
 8008c58:	bfbb      	ittet	lt
 8008c5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c5e:	461d      	movlt	r5, r3
 8008c60:	2300      	movge	r3, #0
 8008c62:	232d      	movlt	r3, #45	; 0x2d
 8008c64:	700b      	strb	r3, [r1, #0]
 8008c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c6c:	4691      	mov	r9, r2
 8008c6e:	f023 0820 	bic.w	r8, r3, #32
 8008c72:	bfbc      	itt	lt
 8008c74:	4622      	movlt	r2, r4
 8008c76:	4614      	movlt	r4, r2
 8008c78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c7c:	d005      	beq.n	8008c8a <__cvt+0x42>
 8008c7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c82:	d100      	bne.n	8008c86 <__cvt+0x3e>
 8008c84:	3601      	adds	r6, #1
 8008c86:	2102      	movs	r1, #2
 8008c88:	e000      	b.n	8008c8c <__cvt+0x44>
 8008c8a:	2103      	movs	r1, #3
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	ab02      	add	r3, sp, #8
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	ec45 4b10 	vmov	d0, r4, r5
 8008c98:	4653      	mov	r3, sl
 8008c9a:	4632      	mov	r2, r6
 8008c9c:	f001 f918 	bl	8009ed0 <_dtoa_r>
 8008ca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	d102      	bne.n	8008cae <__cvt+0x66>
 8008ca8:	f019 0f01 	tst.w	r9, #1
 8008cac:	d022      	beq.n	8008cf4 <__cvt+0xac>
 8008cae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cb2:	eb07 0906 	add.w	r9, r7, r6
 8008cb6:	d110      	bne.n	8008cda <__cvt+0x92>
 8008cb8:	783b      	ldrb	r3, [r7, #0]
 8008cba:	2b30      	cmp	r3, #48	; 0x30
 8008cbc:	d10a      	bne.n	8008cd4 <__cvt+0x8c>
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	f7f7 ff17 	bl	8000af8 <__aeabi_dcmpeq>
 8008cca:	b918      	cbnz	r0, 8008cd4 <__cvt+0x8c>
 8008ccc:	f1c6 0601 	rsb	r6, r6, #1
 8008cd0:	f8ca 6000 	str.w	r6, [sl]
 8008cd4:	f8da 3000 	ldr.w	r3, [sl]
 8008cd8:	4499      	add	r9, r3
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 ff09 	bl	8000af8 <__aeabi_dcmpeq>
 8008ce6:	b108      	cbz	r0, 8008cec <__cvt+0xa4>
 8008ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cec:	2230      	movs	r2, #48	; 0x30
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	454b      	cmp	r3, r9
 8008cf2:	d307      	bcc.n	8008d04 <__cvt+0xbc>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf8:	1bdb      	subs	r3, r3, r7
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	b004      	add	sp, #16
 8008d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d04:	1c59      	adds	r1, r3, #1
 8008d06:	9103      	str	r1, [sp, #12]
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e7f0      	b.n	8008cee <__cvt+0xa6>

08008d0c <__exponent>:
 8008d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2900      	cmp	r1, #0
 8008d12:	bfb8      	it	lt
 8008d14:	4249      	neglt	r1, r1
 8008d16:	f803 2b02 	strb.w	r2, [r3], #2
 8008d1a:	bfb4      	ite	lt
 8008d1c:	222d      	movlt	r2, #45	; 0x2d
 8008d1e:	222b      	movge	r2, #43	; 0x2b
 8008d20:	2909      	cmp	r1, #9
 8008d22:	7042      	strb	r2, [r0, #1]
 8008d24:	dd2a      	ble.n	8008d7c <__exponent+0x70>
 8008d26:	f10d 0207 	add.w	r2, sp, #7
 8008d2a:	4617      	mov	r7, r2
 8008d2c:	260a      	movs	r6, #10
 8008d2e:	4694      	mov	ip, r2
 8008d30:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d34:	fb06 1415 	mls	r4, r6, r5, r1
 8008d38:	3430      	adds	r4, #48	; 0x30
 8008d3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d3e:	460c      	mov	r4, r1
 8008d40:	2c63      	cmp	r4, #99	; 0x63
 8008d42:	f102 32ff 	add.w	r2, r2, #4294967295
 8008d46:	4629      	mov	r1, r5
 8008d48:	dcf1      	bgt.n	8008d2e <__exponent+0x22>
 8008d4a:	3130      	adds	r1, #48	; 0x30
 8008d4c:	f1ac 0402 	sub.w	r4, ip, #2
 8008d50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008d54:	1c41      	adds	r1, r0, #1
 8008d56:	4622      	mov	r2, r4
 8008d58:	42ba      	cmp	r2, r7
 8008d5a:	d30a      	bcc.n	8008d72 <__exponent+0x66>
 8008d5c:	f10d 0209 	add.w	r2, sp, #9
 8008d60:	eba2 020c 	sub.w	r2, r2, ip
 8008d64:	42bc      	cmp	r4, r7
 8008d66:	bf88      	it	hi
 8008d68:	2200      	movhi	r2, #0
 8008d6a:	4413      	add	r3, r2
 8008d6c:	1a18      	subs	r0, r3, r0
 8008d6e:	b003      	add	sp, #12
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008d76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008d7a:	e7ed      	b.n	8008d58 <__exponent+0x4c>
 8008d7c:	2330      	movs	r3, #48	; 0x30
 8008d7e:	3130      	adds	r1, #48	; 0x30
 8008d80:	7083      	strb	r3, [r0, #2]
 8008d82:	70c1      	strb	r1, [r0, #3]
 8008d84:	1d03      	adds	r3, r0, #4
 8008d86:	e7f1      	b.n	8008d6c <__exponent+0x60>

08008d88 <_printf_float>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	ed2d 8b02 	vpush	{d8}
 8008d90:	b08d      	sub	sp, #52	; 0x34
 8008d92:	460c      	mov	r4, r1
 8008d94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d98:	4616      	mov	r6, r2
 8008d9a:	461f      	mov	r7, r3
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	f000 ff23 	bl	8009be8 <_localeconv_r>
 8008da2:	f8d0 a000 	ldr.w	sl, [r0]
 8008da6:	4650      	mov	r0, sl
 8008da8:	f7f7 fa7a 	bl	80002a0 <strlen>
 8008dac:	2300      	movs	r3, #0
 8008dae:	930a      	str	r3, [sp, #40]	; 0x28
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	f8d8 3000 	ldr.w	r3, [r8]
 8008db8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008dbc:	3307      	adds	r3, #7
 8008dbe:	f023 0307 	bic.w	r3, r3, #7
 8008dc2:	f103 0208 	add.w	r2, r3, #8
 8008dc6:	f8c8 2000 	str.w	r2, [r8]
 8008dca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dd2:	9307      	str	r3, [sp, #28]
 8008dd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd8:	ee08 0a10 	vmov	s16, r0
 8008ddc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008de4:	4b9e      	ldr	r3, [pc, #632]	; (8009060 <_printf_float+0x2d8>)
 8008de6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dea:	f7f7 feb7 	bl	8000b5c <__aeabi_dcmpun>
 8008dee:	bb88      	cbnz	r0, 8008e54 <_printf_float+0xcc>
 8008df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008df4:	4b9a      	ldr	r3, [pc, #616]	; (8009060 <_printf_float+0x2d8>)
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	f7f7 fe91 	bl	8000b20 <__aeabi_dcmple>
 8008dfe:	bb48      	cbnz	r0, 8008e54 <_printf_float+0xcc>
 8008e00:	2200      	movs	r2, #0
 8008e02:	2300      	movs	r3, #0
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fe80 	bl	8000b0c <__aeabi_dcmplt>
 8008e0c:	b110      	cbz	r0, 8008e14 <_printf_float+0x8c>
 8008e0e:	232d      	movs	r3, #45	; 0x2d
 8008e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e14:	4a93      	ldr	r2, [pc, #588]	; (8009064 <_printf_float+0x2dc>)
 8008e16:	4b94      	ldr	r3, [pc, #592]	; (8009068 <_printf_float+0x2e0>)
 8008e18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e1c:	bf94      	ite	ls
 8008e1e:	4690      	movls	r8, r2
 8008e20:	4698      	movhi	r8, r3
 8008e22:	2303      	movs	r3, #3
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	9b05      	ldr	r3, [sp, #20]
 8008e28:	f023 0304 	bic.w	r3, r3, #4
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	f04f 0900 	mov.w	r9, #0
 8008e32:	9700      	str	r7, [sp, #0]
 8008e34:	4633      	mov	r3, r6
 8008e36:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f000 f9da 	bl	80091f4 <_printf_common>
 8008e40:	3001      	adds	r0, #1
 8008e42:	f040 8090 	bne.w	8008f66 <_printf_float+0x1de>
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	b00d      	add	sp, #52	; 0x34
 8008e4c:	ecbd 8b02 	vpop	{d8}
 8008e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e54:	4642      	mov	r2, r8
 8008e56:	464b      	mov	r3, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	f7f7 fe7e 	bl	8000b5c <__aeabi_dcmpun>
 8008e60:	b140      	cbz	r0, 8008e74 <_printf_float+0xec>
 8008e62:	464b      	mov	r3, r9
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbc      	itt	lt
 8008e68:	232d      	movlt	r3, #45	; 0x2d
 8008e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e6e:	4a7f      	ldr	r2, [pc, #508]	; (800906c <_printf_float+0x2e4>)
 8008e70:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <_printf_float+0x2e8>)
 8008e72:	e7d1      	b.n	8008e18 <_printf_float+0x90>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e7a:	9206      	str	r2, [sp, #24]
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	d13f      	bne.n	8008f00 <_printf_float+0x178>
 8008e80:	2306      	movs	r3, #6
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	9b05      	ldr	r3, [sp, #20]
 8008e86:	6861      	ldr	r1, [r4, #4]
 8008e88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9303      	str	r3, [sp, #12]
 8008e90:	ab0a      	add	r3, sp, #40	; 0x28
 8008e92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e96:	ab09      	add	r3, sp, #36	; 0x24
 8008e98:	ec49 8b10 	vmov	d0, r8, r9
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	6022      	str	r2, [r4, #0]
 8008ea0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	f7ff fecf 	bl	8008c48 <__cvt>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eae:	2b47      	cmp	r3, #71	; 0x47
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	d108      	bne.n	8008ec6 <_printf_float+0x13e>
 8008eb4:	1cc8      	adds	r0, r1, #3
 8008eb6:	db02      	blt.n	8008ebe <_printf_float+0x136>
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	dd41      	ble.n	8008f42 <_printf_float+0x1ba>
 8008ebe:	f1ab 0302 	sub.w	r3, fp, #2
 8008ec2:	fa5f fb83 	uxtb.w	fp, r3
 8008ec6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008eca:	d820      	bhi.n	8008f0e <_printf_float+0x186>
 8008ecc:	3901      	subs	r1, #1
 8008ece:	465a      	mov	r2, fp
 8008ed0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ed4:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed6:	f7ff ff19 	bl	8008d0c <__exponent>
 8008eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008edc:	1813      	adds	r3, r2, r0
 8008ede:	2a01      	cmp	r2, #1
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	6123      	str	r3, [r4, #16]
 8008ee4:	dc02      	bgt.n	8008eec <_printf_float+0x164>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	07d2      	lsls	r2, r2, #31
 8008eea:	d501      	bpl.n	8008ef0 <_printf_float+0x168>
 8008eec:	3301      	adds	r3, #1
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d09c      	beq.n	8008e32 <_printf_float+0xaa>
 8008ef8:	232d      	movs	r3, #45	; 0x2d
 8008efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efe:	e798      	b.n	8008e32 <_printf_float+0xaa>
 8008f00:	9a06      	ldr	r2, [sp, #24]
 8008f02:	2a47      	cmp	r2, #71	; 0x47
 8008f04:	d1be      	bne.n	8008e84 <_printf_float+0xfc>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1bc      	bne.n	8008e84 <_printf_float+0xfc>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7b9      	b.n	8008e82 <_printf_float+0xfa>
 8008f0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f12:	d118      	bne.n	8008f46 <_printf_float+0x1be>
 8008f14:	2900      	cmp	r1, #0
 8008f16:	6863      	ldr	r3, [r4, #4]
 8008f18:	dd0b      	ble.n	8008f32 <_printf_float+0x1aa>
 8008f1a:	6121      	str	r1, [r4, #16]
 8008f1c:	b913      	cbnz	r3, 8008f24 <_printf_float+0x19c>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	07d0      	lsls	r0, r2, #31
 8008f22:	d502      	bpl.n	8008f2a <_printf_float+0x1a2>
 8008f24:	3301      	adds	r3, #1
 8008f26:	440b      	add	r3, r1
 8008f28:	6123      	str	r3, [r4, #16]
 8008f2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f2c:	f04f 0900 	mov.w	r9, #0
 8008f30:	e7de      	b.n	8008ef0 <_printf_float+0x168>
 8008f32:	b913      	cbnz	r3, 8008f3a <_printf_float+0x1b2>
 8008f34:	6822      	ldr	r2, [r4, #0]
 8008f36:	07d2      	lsls	r2, r2, #31
 8008f38:	d501      	bpl.n	8008f3e <_printf_float+0x1b6>
 8008f3a:	3302      	adds	r3, #2
 8008f3c:	e7f4      	b.n	8008f28 <_printf_float+0x1a0>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e7f2      	b.n	8008f28 <_printf_float+0x1a0>
 8008f42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	db05      	blt.n	8008f58 <_printf_float+0x1d0>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6121      	str	r1, [r4, #16]
 8008f50:	07d8      	lsls	r0, r3, #31
 8008f52:	d5ea      	bpl.n	8008f2a <_printf_float+0x1a2>
 8008f54:	1c4b      	adds	r3, r1, #1
 8008f56:	e7e7      	b.n	8008f28 <_printf_float+0x1a0>
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	bfd4      	ite	le
 8008f5c:	f1c1 0202 	rsble	r2, r1, #2
 8008f60:	2201      	movgt	r2, #1
 8008f62:	4413      	add	r3, r2
 8008f64:	e7e0      	b.n	8008f28 <_printf_float+0x1a0>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	055a      	lsls	r2, r3, #21
 8008f6a:	d407      	bmi.n	8008f7c <_printf_float+0x1f4>
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	4642      	mov	r2, r8
 8008f70:	4631      	mov	r1, r6
 8008f72:	4628      	mov	r0, r5
 8008f74:	47b8      	blx	r7
 8008f76:	3001      	adds	r0, #1
 8008f78:	d12c      	bne.n	8008fd4 <_printf_float+0x24c>
 8008f7a:	e764      	b.n	8008e46 <_printf_float+0xbe>
 8008f7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f80:	f240 80e0 	bls.w	8009144 <_printf_float+0x3bc>
 8008f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f7f7 fdb4 	bl	8000af8 <__aeabi_dcmpeq>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d034      	beq.n	8008ffe <_printf_float+0x276>
 8008f94:	4a37      	ldr	r2, [pc, #220]	; (8009074 <_printf_float+0x2ec>)
 8008f96:	2301      	movs	r3, #1
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b8      	blx	r7
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f43f af51 	beq.w	8008e46 <_printf_float+0xbe>
 8008fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	db02      	blt.n	8008fb2 <_printf_float+0x22a>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	07d8      	lsls	r0, r3, #31
 8008fb0:	d510      	bpl.n	8008fd4 <_printf_float+0x24c>
 8008fb2:	ee18 3a10 	vmov	r3, s16
 8008fb6:	4652      	mov	r2, sl
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f af41 	beq.w	8008e46 <_printf_float+0xbe>
 8008fc4:	f04f 0800 	mov.w	r8, #0
 8008fc8:	f104 091a 	add.w	r9, r4, #26
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	dc09      	bgt.n	8008fe8 <_printf_float+0x260>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	079b      	lsls	r3, r3, #30
 8008fd8:	f100 8107 	bmi.w	80091ea <_printf_float+0x462>
 8008fdc:	68e0      	ldr	r0, [r4, #12]
 8008fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	bfb8      	it	lt
 8008fe4:	4618      	movlt	r0, r3
 8008fe6:	e730      	b.n	8008e4a <_printf_float+0xc2>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	464a      	mov	r2, r9
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	f43f af27 	beq.w	8008e46 <_printf_float+0xbe>
 8008ff8:	f108 0801 	add.w	r8, r8, #1
 8008ffc:	e7e6      	b.n	8008fcc <_printf_float+0x244>
 8008ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	dc39      	bgt.n	8009078 <_printf_float+0x2f0>
 8009004:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <_printf_float+0x2ec>)
 8009006:	2301      	movs	r3, #1
 8009008:	4631      	mov	r1, r6
 800900a:	4628      	mov	r0, r5
 800900c:	47b8      	blx	r7
 800900e:	3001      	adds	r0, #1
 8009010:	f43f af19 	beq.w	8008e46 <_printf_float+0xbe>
 8009014:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009018:	4313      	orrs	r3, r2
 800901a:	d102      	bne.n	8009022 <_printf_float+0x29a>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d5d8      	bpl.n	8008fd4 <_printf_float+0x24c>
 8009022:	ee18 3a10 	vmov	r3, s16
 8009026:	4652      	mov	r2, sl
 8009028:	4631      	mov	r1, r6
 800902a:	4628      	mov	r0, r5
 800902c:	47b8      	blx	r7
 800902e:	3001      	adds	r0, #1
 8009030:	f43f af09 	beq.w	8008e46 <_printf_float+0xbe>
 8009034:	f04f 0900 	mov.w	r9, #0
 8009038:	f104 0a1a 	add.w	sl, r4, #26
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	425b      	negs	r3, r3
 8009040:	454b      	cmp	r3, r9
 8009042:	dc01      	bgt.n	8009048 <_printf_float+0x2c0>
 8009044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009046:	e792      	b.n	8008f6e <_printf_float+0x1e6>
 8009048:	2301      	movs	r3, #1
 800904a:	4652      	mov	r2, sl
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f aef7 	beq.w	8008e46 <_printf_float+0xbe>
 8009058:	f109 0901 	add.w	r9, r9, #1
 800905c:	e7ee      	b.n	800903c <_printf_float+0x2b4>
 800905e:	bf00      	nop
 8009060:	7fefffff 	.word	0x7fefffff
 8009064:	0800d3c1 	.word	0x0800d3c1
 8009068:	0800d3c5 	.word	0x0800d3c5
 800906c:	0800d3c9 	.word	0x0800d3c9
 8009070:	0800d3cd 	.word	0x0800d3cd
 8009074:	0800d3d1 	.word	0x0800d3d1
 8009078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800907a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800907c:	429a      	cmp	r2, r3
 800907e:	bfa8      	it	ge
 8009080:	461a      	movge	r2, r3
 8009082:	2a00      	cmp	r2, #0
 8009084:	4691      	mov	r9, r2
 8009086:	dc37      	bgt.n	80090f8 <_printf_float+0x370>
 8009088:	f04f 0b00 	mov.w	fp, #0
 800908c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009090:	f104 021a 	add.w	r2, r4, #26
 8009094:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	eba3 0309 	sub.w	r3, r3, r9
 800909c:	455b      	cmp	r3, fp
 800909e:	dc33      	bgt.n	8009108 <_printf_float+0x380>
 80090a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db3b      	blt.n	8009120 <_printf_float+0x398>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d438      	bmi.n	8009120 <_printf_float+0x398>
 80090ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090b2:	eba2 0903 	sub.w	r9, r2, r3
 80090b6:	9b05      	ldr	r3, [sp, #20]
 80090b8:	1ad2      	subs	r2, r2, r3
 80090ba:	4591      	cmp	r9, r2
 80090bc:	bfa8      	it	ge
 80090be:	4691      	movge	r9, r2
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	dc35      	bgt.n	8009132 <_printf_float+0x3aa>
 80090c6:	f04f 0800 	mov.w	r8, #0
 80090ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ce:	f104 0a1a 	add.w	sl, r4, #26
 80090d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	eba3 0309 	sub.w	r3, r3, r9
 80090dc:	4543      	cmp	r3, r8
 80090de:	f77f af79 	ble.w	8008fd4 <_printf_float+0x24c>
 80090e2:	2301      	movs	r3, #1
 80090e4:	4652      	mov	r2, sl
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f aeaa 	beq.w	8008e46 <_printf_float+0xbe>
 80090f2:	f108 0801 	add.w	r8, r8, #1
 80090f6:	e7ec      	b.n	80090d2 <_printf_float+0x34a>
 80090f8:	4613      	mov	r3, r2
 80090fa:	4631      	mov	r1, r6
 80090fc:	4642      	mov	r2, r8
 80090fe:	4628      	mov	r0, r5
 8009100:	47b8      	blx	r7
 8009102:	3001      	adds	r0, #1
 8009104:	d1c0      	bne.n	8009088 <_printf_float+0x300>
 8009106:	e69e      	b.n	8008e46 <_printf_float+0xbe>
 8009108:	2301      	movs	r3, #1
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	9205      	str	r2, [sp, #20]
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f ae97 	beq.w	8008e46 <_printf_float+0xbe>
 8009118:	9a05      	ldr	r2, [sp, #20]
 800911a:	f10b 0b01 	add.w	fp, fp, #1
 800911e:	e7b9      	b.n	8009094 <_printf_float+0x30c>
 8009120:	ee18 3a10 	vmov	r3, s16
 8009124:	4652      	mov	r2, sl
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	d1be      	bne.n	80090ae <_printf_float+0x326>
 8009130:	e689      	b.n	8008e46 <_printf_float+0xbe>
 8009132:	9a05      	ldr	r2, [sp, #20]
 8009134:	464b      	mov	r3, r9
 8009136:	4442      	add	r2, r8
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	d1c1      	bne.n	80090c6 <_printf_float+0x33e>
 8009142:	e680      	b.n	8008e46 <_printf_float+0xbe>
 8009144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009146:	2a01      	cmp	r2, #1
 8009148:	dc01      	bgt.n	800914e <_printf_float+0x3c6>
 800914a:	07db      	lsls	r3, r3, #31
 800914c:	d53a      	bpl.n	80091c4 <_printf_float+0x43c>
 800914e:	2301      	movs	r3, #1
 8009150:	4642      	mov	r2, r8
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f ae74 	beq.w	8008e46 <_printf_float+0xbe>
 800915e:	ee18 3a10 	vmov	r3, s16
 8009162:	4652      	mov	r2, sl
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	f43f ae6b 	beq.w	8008e46 <_printf_float+0xbe>
 8009170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800917c:	f7f7 fcbc 	bl	8000af8 <__aeabi_dcmpeq>
 8009180:	b9d8      	cbnz	r0, 80091ba <_printf_float+0x432>
 8009182:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009186:	f108 0201 	add.w	r2, r8, #1
 800918a:	4631      	mov	r1, r6
 800918c:	4628      	mov	r0, r5
 800918e:	47b8      	blx	r7
 8009190:	3001      	adds	r0, #1
 8009192:	d10e      	bne.n	80091b2 <_printf_float+0x42a>
 8009194:	e657      	b.n	8008e46 <_printf_float+0xbe>
 8009196:	2301      	movs	r3, #1
 8009198:	4652      	mov	r2, sl
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	f43f ae50 	beq.w	8008e46 <_printf_float+0xbe>
 80091a6:	f108 0801 	add.w	r8, r8, #1
 80091aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	4543      	cmp	r3, r8
 80091b0:	dcf1      	bgt.n	8009196 <_printf_float+0x40e>
 80091b2:	464b      	mov	r3, r9
 80091b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091b8:	e6da      	b.n	8008f70 <_printf_float+0x1e8>
 80091ba:	f04f 0800 	mov.w	r8, #0
 80091be:	f104 0a1a 	add.w	sl, r4, #26
 80091c2:	e7f2      	b.n	80091aa <_printf_float+0x422>
 80091c4:	2301      	movs	r3, #1
 80091c6:	4642      	mov	r2, r8
 80091c8:	e7df      	b.n	800918a <_printf_float+0x402>
 80091ca:	2301      	movs	r3, #1
 80091cc:	464a      	mov	r2, r9
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f ae36 	beq.w	8008e46 <_printf_float+0xbe>
 80091da:	f108 0801 	add.w	r8, r8, #1
 80091de:	68e3      	ldr	r3, [r4, #12]
 80091e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091e2:	1a5b      	subs	r3, r3, r1
 80091e4:	4543      	cmp	r3, r8
 80091e6:	dcf0      	bgt.n	80091ca <_printf_float+0x442>
 80091e8:	e6f8      	b.n	8008fdc <_printf_float+0x254>
 80091ea:	f04f 0800 	mov.w	r8, #0
 80091ee:	f104 0919 	add.w	r9, r4, #25
 80091f2:	e7f4      	b.n	80091de <_printf_float+0x456>

080091f4 <_printf_common>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	4616      	mov	r6, r2
 80091fa:	4699      	mov	r9, r3
 80091fc:	688a      	ldr	r2, [r1, #8]
 80091fe:	690b      	ldr	r3, [r1, #16]
 8009200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009204:	4293      	cmp	r3, r2
 8009206:	bfb8      	it	lt
 8009208:	4613      	movlt	r3, r2
 800920a:	6033      	str	r3, [r6, #0]
 800920c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009210:	4607      	mov	r7, r0
 8009212:	460c      	mov	r4, r1
 8009214:	b10a      	cbz	r2, 800921a <_printf_common+0x26>
 8009216:	3301      	adds	r3, #1
 8009218:	6033      	str	r3, [r6, #0]
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	0699      	lsls	r1, r3, #26
 800921e:	bf42      	ittt	mi
 8009220:	6833      	ldrmi	r3, [r6, #0]
 8009222:	3302      	addmi	r3, #2
 8009224:	6033      	strmi	r3, [r6, #0]
 8009226:	6825      	ldr	r5, [r4, #0]
 8009228:	f015 0506 	ands.w	r5, r5, #6
 800922c:	d106      	bne.n	800923c <_printf_common+0x48>
 800922e:	f104 0a19 	add.w	sl, r4, #25
 8009232:	68e3      	ldr	r3, [r4, #12]
 8009234:	6832      	ldr	r2, [r6, #0]
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	42ab      	cmp	r3, r5
 800923a:	dc26      	bgt.n	800928a <_printf_common+0x96>
 800923c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009240:	1e13      	subs	r3, r2, #0
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	bf18      	it	ne
 8009246:	2301      	movne	r3, #1
 8009248:	0692      	lsls	r2, r2, #26
 800924a:	d42b      	bmi.n	80092a4 <_printf_common+0xb0>
 800924c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009250:	4649      	mov	r1, r9
 8009252:	4638      	mov	r0, r7
 8009254:	47c0      	blx	r8
 8009256:	3001      	adds	r0, #1
 8009258:	d01e      	beq.n	8009298 <_printf_common+0xa4>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	6922      	ldr	r2, [r4, #16]
 800925e:	f003 0306 	and.w	r3, r3, #6
 8009262:	2b04      	cmp	r3, #4
 8009264:	bf02      	ittt	eq
 8009266:	68e5      	ldreq	r5, [r4, #12]
 8009268:	6833      	ldreq	r3, [r6, #0]
 800926a:	1aed      	subeq	r5, r5, r3
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	bf0c      	ite	eq
 8009270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009274:	2500      	movne	r5, #0
 8009276:	4293      	cmp	r3, r2
 8009278:	bfc4      	itt	gt
 800927a:	1a9b      	subgt	r3, r3, r2
 800927c:	18ed      	addgt	r5, r5, r3
 800927e:	2600      	movs	r6, #0
 8009280:	341a      	adds	r4, #26
 8009282:	42b5      	cmp	r5, r6
 8009284:	d11a      	bne.n	80092bc <_printf_common+0xc8>
 8009286:	2000      	movs	r0, #0
 8009288:	e008      	b.n	800929c <_printf_common+0xa8>
 800928a:	2301      	movs	r3, #1
 800928c:	4652      	mov	r2, sl
 800928e:	4649      	mov	r1, r9
 8009290:	4638      	mov	r0, r7
 8009292:	47c0      	blx	r8
 8009294:	3001      	adds	r0, #1
 8009296:	d103      	bne.n	80092a0 <_printf_common+0xac>
 8009298:	f04f 30ff 	mov.w	r0, #4294967295
 800929c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a0:	3501      	adds	r5, #1
 80092a2:	e7c6      	b.n	8009232 <_printf_common+0x3e>
 80092a4:	18e1      	adds	r1, r4, r3
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	2030      	movs	r0, #48	; 0x30
 80092aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092ae:	4422      	add	r2, r4
 80092b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092b8:	3302      	adds	r3, #2
 80092ba:	e7c7      	b.n	800924c <_printf_common+0x58>
 80092bc:	2301      	movs	r3, #1
 80092be:	4622      	mov	r2, r4
 80092c0:	4649      	mov	r1, r9
 80092c2:	4638      	mov	r0, r7
 80092c4:	47c0      	blx	r8
 80092c6:	3001      	adds	r0, #1
 80092c8:	d0e6      	beq.n	8009298 <_printf_common+0xa4>
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7d9      	b.n	8009282 <_printf_common+0x8e>
	...

080092d0 <_printf_i>:
 80092d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	7e0f      	ldrb	r7, [r1, #24]
 80092d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092d8:	2f78      	cmp	r7, #120	; 0x78
 80092da:	4691      	mov	r9, r2
 80092dc:	4680      	mov	r8, r0
 80092de:	460c      	mov	r4, r1
 80092e0:	469a      	mov	sl, r3
 80092e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092e6:	d807      	bhi.n	80092f8 <_printf_i+0x28>
 80092e8:	2f62      	cmp	r7, #98	; 0x62
 80092ea:	d80a      	bhi.n	8009302 <_printf_i+0x32>
 80092ec:	2f00      	cmp	r7, #0
 80092ee:	f000 80d4 	beq.w	800949a <_printf_i+0x1ca>
 80092f2:	2f58      	cmp	r7, #88	; 0x58
 80092f4:	f000 80c0 	beq.w	8009478 <_printf_i+0x1a8>
 80092f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009300:	e03a      	b.n	8009378 <_printf_i+0xa8>
 8009302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009306:	2b15      	cmp	r3, #21
 8009308:	d8f6      	bhi.n	80092f8 <_printf_i+0x28>
 800930a:	a101      	add	r1, pc, #4	; (adr r1, 8009310 <_printf_i+0x40>)
 800930c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009310:	08009369 	.word	0x08009369
 8009314:	0800937d 	.word	0x0800937d
 8009318:	080092f9 	.word	0x080092f9
 800931c:	080092f9 	.word	0x080092f9
 8009320:	080092f9 	.word	0x080092f9
 8009324:	080092f9 	.word	0x080092f9
 8009328:	0800937d 	.word	0x0800937d
 800932c:	080092f9 	.word	0x080092f9
 8009330:	080092f9 	.word	0x080092f9
 8009334:	080092f9 	.word	0x080092f9
 8009338:	080092f9 	.word	0x080092f9
 800933c:	08009481 	.word	0x08009481
 8009340:	080093a9 	.word	0x080093a9
 8009344:	0800943b 	.word	0x0800943b
 8009348:	080092f9 	.word	0x080092f9
 800934c:	080092f9 	.word	0x080092f9
 8009350:	080094a3 	.word	0x080094a3
 8009354:	080092f9 	.word	0x080092f9
 8009358:	080093a9 	.word	0x080093a9
 800935c:	080092f9 	.word	0x080092f9
 8009360:	080092f9 	.word	0x080092f9
 8009364:	08009443 	.word	0x08009443
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	1d1a      	adds	r2, r3, #4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	602a      	str	r2, [r5, #0]
 8009370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009378:	2301      	movs	r3, #1
 800937a:	e09f      	b.n	80094bc <_printf_i+0x1ec>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	682b      	ldr	r3, [r5, #0]
 8009380:	0607      	lsls	r7, r0, #24
 8009382:	f103 0104 	add.w	r1, r3, #4
 8009386:	6029      	str	r1, [r5, #0]
 8009388:	d501      	bpl.n	800938e <_printf_i+0xbe>
 800938a:	681e      	ldr	r6, [r3, #0]
 800938c:	e003      	b.n	8009396 <_printf_i+0xc6>
 800938e:	0646      	lsls	r6, r0, #25
 8009390:	d5fb      	bpl.n	800938a <_printf_i+0xba>
 8009392:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009396:	2e00      	cmp	r6, #0
 8009398:	da03      	bge.n	80093a2 <_printf_i+0xd2>
 800939a:	232d      	movs	r3, #45	; 0x2d
 800939c:	4276      	negs	r6, r6
 800939e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a2:	485a      	ldr	r0, [pc, #360]	; (800950c <_printf_i+0x23c>)
 80093a4:	230a      	movs	r3, #10
 80093a6:	e012      	b.n	80093ce <_printf_i+0xfe>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	6820      	ldr	r0, [r4, #0]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	6029      	str	r1, [r5, #0]
 80093b0:	0605      	lsls	r5, r0, #24
 80093b2:	d501      	bpl.n	80093b8 <_printf_i+0xe8>
 80093b4:	681e      	ldr	r6, [r3, #0]
 80093b6:	e002      	b.n	80093be <_printf_i+0xee>
 80093b8:	0641      	lsls	r1, r0, #25
 80093ba:	d5fb      	bpl.n	80093b4 <_printf_i+0xe4>
 80093bc:	881e      	ldrh	r6, [r3, #0]
 80093be:	4853      	ldr	r0, [pc, #332]	; (800950c <_printf_i+0x23c>)
 80093c0:	2f6f      	cmp	r7, #111	; 0x6f
 80093c2:	bf0c      	ite	eq
 80093c4:	2308      	moveq	r3, #8
 80093c6:	230a      	movne	r3, #10
 80093c8:	2100      	movs	r1, #0
 80093ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ce:	6865      	ldr	r5, [r4, #4]
 80093d0:	60a5      	str	r5, [r4, #8]
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	bfa2      	ittt	ge
 80093d6:	6821      	ldrge	r1, [r4, #0]
 80093d8:	f021 0104 	bicge.w	r1, r1, #4
 80093dc:	6021      	strge	r1, [r4, #0]
 80093de:	b90e      	cbnz	r6, 80093e4 <_printf_i+0x114>
 80093e0:	2d00      	cmp	r5, #0
 80093e2:	d04b      	beq.n	800947c <_printf_i+0x1ac>
 80093e4:	4615      	mov	r5, r2
 80093e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80093ea:	fb03 6711 	mls	r7, r3, r1, r6
 80093ee:	5dc7      	ldrb	r7, [r0, r7]
 80093f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093f4:	4637      	mov	r7, r6
 80093f6:	42bb      	cmp	r3, r7
 80093f8:	460e      	mov	r6, r1
 80093fa:	d9f4      	bls.n	80093e6 <_printf_i+0x116>
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d10b      	bne.n	8009418 <_printf_i+0x148>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	07de      	lsls	r6, r3, #31
 8009404:	d508      	bpl.n	8009418 <_printf_i+0x148>
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	6861      	ldr	r1, [r4, #4]
 800940a:	4299      	cmp	r1, r3
 800940c:	bfde      	ittt	le
 800940e:	2330      	movle	r3, #48	; 0x30
 8009410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009418:	1b52      	subs	r2, r2, r5
 800941a:	6122      	str	r2, [r4, #16]
 800941c:	f8cd a000 	str.w	sl, [sp]
 8009420:	464b      	mov	r3, r9
 8009422:	aa03      	add	r2, sp, #12
 8009424:	4621      	mov	r1, r4
 8009426:	4640      	mov	r0, r8
 8009428:	f7ff fee4 	bl	80091f4 <_printf_common>
 800942c:	3001      	adds	r0, #1
 800942e:	d14a      	bne.n	80094c6 <_printf_i+0x1f6>
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	b004      	add	sp, #16
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f043 0320 	orr.w	r3, r3, #32
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	4833      	ldr	r0, [pc, #204]	; (8009510 <_printf_i+0x240>)
 8009444:	2778      	movs	r7, #120	; 0x78
 8009446:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	6829      	ldr	r1, [r5, #0]
 800944e:	061f      	lsls	r7, r3, #24
 8009450:	f851 6b04 	ldr.w	r6, [r1], #4
 8009454:	d402      	bmi.n	800945c <_printf_i+0x18c>
 8009456:	065f      	lsls	r7, r3, #25
 8009458:	bf48      	it	mi
 800945a:	b2b6      	uxthmi	r6, r6
 800945c:	07df      	lsls	r7, r3, #31
 800945e:	bf48      	it	mi
 8009460:	f043 0320 	orrmi.w	r3, r3, #32
 8009464:	6029      	str	r1, [r5, #0]
 8009466:	bf48      	it	mi
 8009468:	6023      	strmi	r3, [r4, #0]
 800946a:	b91e      	cbnz	r6, 8009474 <_printf_i+0x1a4>
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	f023 0320 	bic.w	r3, r3, #32
 8009472:	6023      	str	r3, [r4, #0]
 8009474:	2310      	movs	r3, #16
 8009476:	e7a7      	b.n	80093c8 <_printf_i+0xf8>
 8009478:	4824      	ldr	r0, [pc, #144]	; (800950c <_printf_i+0x23c>)
 800947a:	e7e4      	b.n	8009446 <_printf_i+0x176>
 800947c:	4615      	mov	r5, r2
 800947e:	e7bd      	b.n	80093fc <_printf_i+0x12c>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	6826      	ldr	r6, [r4, #0]
 8009484:	6961      	ldr	r1, [r4, #20]
 8009486:	1d18      	adds	r0, r3, #4
 8009488:	6028      	str	r0, [r5, #0]
 800948a:	0635      	lsls	r5, r6, #24
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	d501      	bpl.n	8009494 <_printf_i+0x1c4>
 8009490:	6019      	str	r1, [r3, #0]
 8009492:	e002      	b.n	800949a <_printf_i+0x1ca>
 8009494:	0670      	lsls	r0, r6, #25
 8009496:	d5fb      	bpl.n	8009490 <_printf_i+0x1c0>
 8009498:	8019      	strh	r1, [r3, #0]
 800949a:	2300      	movs	r3, #0
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	4615      	mov	r5, r2
 80094a0:	e7bc      	b.n	800941c <_printf_i+0x14c>
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	1d1a      	adds	r2, r3, #4
 80094a6:	602a      	str	r2, [r5, #0]
 80094a8:	681d      	ldr	r5, [r3, #0]
 80094aa:	6862      	ldr	r2, [r4, #4]
 80094ac:	2100      	movs	r1, #0
 80094ae:	4628      	mov	r0, r5
 80094b0:	f7f6 fea6 	bl	8000200 <memchr>
 80094b4:	b108      	cbz	r0, 80094ba <_printf_i+0x1ea>
 80094b6:	1b40      	subs	r0, r0, r5
 80094b8:	6060      	str	r0, [r4, #4]
 80094ba:	6863      	ldr	r3, [r4, #4]
 80094bc:	6123      	str	r3, [r4, #16]
 80094be:	2300      	movs	r3, #0
 80094c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c4:	e7aa      	b.n	800941c <_printf_i+0x14c>
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	462a      	mov	r2, r5
 80094ca:	4649      	mov	r1, r9
 80094cc:	4640      	mov	r0, r8
 80094ce:	47d0      	blx	sl
 80094d0:	3001      	adds	r0, #1
 80094d2:	d0ad      	beq.n	8009430 <_printf_i+0x160>
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	079b      	lsls	r3, r3, #30
 80094d8:	d413      	bmi.n	8009502 <_printf_i+0x232>
 80094da:	68e0      	ldr	r0, [r4, #12]
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	4298      	cmp	r0, r3
 80094e0:	bfb8      	it	lt
 80094e2:	4618      	movlt	r0, r3
 80094e4:	e7a6      	b.n	8009434 <_printf_i+0x164>
 80094e6:	2301      	movs	r3, #1
 80094e8:	4632      	mov	r2, r6
 80094ea:	4649      	mov	r1, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	47d0      	blx	sl
 80094f0:	3001      	adds	r0, #1
 80094f2:	d09d      	beq.n	8009430 <_printf_i+0x160>
 80094f4:	3501      	adds	r5, #1
 80094f6:	68e3      	ldr	r3, [r4, #12]
 80094f8:	9903      	ldr	r1, [sp, #12]
 80094fa:	1a5b      	subs	r3, r3, r1
 80094fc:	42ab      	cmp	r3, r5
 80094fe:	dcf2      	bgt.n	80094e6 <_printf_i+0x216>
 8009500:	e7eb      	b.n	80094da <_printf_i+0x20a>
 8009502:	2500      	movs	r5, #0
 8009504:	f104 0619 	add.w	r6, r4, #25
 8009508:	e7f5      	b.n	80094f6 <_printf_i+0x226>
 800950a:	bf00      	nop
 800950c:	0800d3d3 	.word	0x0800d3d3
 8009510:	0800d3e4 	.word	0x0800d3e4

08009514 <_scanf_float>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	b087      	sub	sp, #28
 800951a:	4617      	mov	r7, r2
 800951c:	9303      	str	r3, [sp, #12]
 800951e:	688b      	ldr	r3, [r1, #8]
 8009520:	1e5a      	subs	r2, r3, #1
 8009522:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009526:	bf83      	ittte	hi
 8009528:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800952c:	195b      	addhi	r3, r3, r5
 800952e:	9302      	strhi	r3, [sp, #8]
 8009530:	2300      	movls	r3, #0
 8009532:	bf86      	itte	hi
 8009534:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009538:	608b      	strhi	r3, [r1, #8]
 800953a:	9302      	strls	r3, [sp, #8]
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	468b      	mov	fp, r1
 8009540:	2500      	movs	r5, #0
 8009542:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009546:	f84b 3b1c 	str.w	r3, [fp], #28
 800954a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800954e:	4680      	mov	r8, r0
 8009550:	460c      	mov	r4, r1
 8009552:	465e      	mov	r6, fp
 8009554:	46aa      	mov	sl, r5
 8009556:	46a9      	mov	r9, r5
 8009558:	9501      	str	r5, [sp, #4]
 800955a:	68a2      	ldr	r2, [r4, #8]
 800955c:	b152      	cbz	r2, 8009574 <_scanf_float+0x60>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b4e      	cmp	r3, #78	; 0x4e
 8009564:	d864      	bhi.n	8009630 <_scanf_float+0x11c>
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d83c      	bhi.n	80095e4 <_scanf_float+0xd0>
 800956a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800956e:	b2c8      	uxtb	r0, r1
 8009570:	280e      	cmp	r0, #14
 8009572:	d93a      	bls.n	80095ea <_scanf_float+0xd6>
 8009574:	f1b9 0f00 	cmp.w	r9, #0
 8009578:	d003      	beq.n	8009582 <_scanf_float+0x6e>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009586:	f1ba 0f01 	cmp.w	sl, #1
 800958a:	f200 8113 	bhi.w	80097b4 <_scanf_float+0x2a0>
 800958e:	455e      	cmp	r6, fp
 8009590:	f200 8105 	bhi.w	800979e <_scanf_float+0x28a>
 8009594:	2501      	movs	r5, #1
 8009596:	4628      	mov	r0, r5
 8009598:	b007      	add	sp, #28
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80095a2:	2a0d      	cmp	r2, #13
 80095a4:	d8e6      	bhi.n	8009574 <_scanf_float+0x60>
 80095a6:	a101      	add	r1, pc, #4	; (adr r1, 80095ac <_scanf_float+0x98>)
 80095a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095ac:	080096eb 	.word	0x080096eb
 80095b0:	08009575 	.word	0x08009575
 80095b4:	08009575 	.word	0x08009575
 80095b8:	08009575 	.word	0x08009575
 80095bc:	0800974b 	.word	0x0800974b
 80095c0:	08009723 	.word	0x08009723
 80095c4:	08009575 	.word	0x08009575
 80095c8:	08009575 	.word	0x08009575
 80095cc:	080096f9 	.word	0x080096f9
 80095d0:	08009575 	.word	0x08009575
 80095d4:	08009575 	.word	0x08009575
 80095d8:	08009575 	.word	0x08009575
 80095dc:	08009575 	.word	0x08009575
 80095e0:	080096b1 	.word	0x080096b1
 80095e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80095e8:	e7db      	b.n	80095a2 <_scanf_float+0x8e>
 80095ea:	290e      	cmp	r1, #14
 80095ec:	d8c2      	bhi.n	8009574 <_scanf_float+0x60>
 80095ee:	a001      	add	r0, pc, #4	; (adr r0, 80095f4 <_scanf_float+0xe0>)
 80095f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095f4:	080096a3 	.word	0x080096a3
 80095f8:	08009575 	.word	0x08009575
 80095fc:	080096a3 	.word	0x080096a3
 8009600:	08009737 	.word	0x08009737
 8009604:	08009575 	.word	0x08009575
 8009608:	08009651 	.word	0x08009651
 800960c:	0800968d 	.word	0x0800968d
 8009610:	0800968d 	.word	0x0800968d
 8009614:	0800968d 	.word	0x0800968d
 8009618:	0800968d 	.word	0x0800968d
 800961c:	0800968d 	.word	0x0800968d
 8009620:	0800968d 	.word	0x0800968d
 8009624:	0800968d 	.word	0x0800968d
 8009628:	0800968d 	.word	0x0800968d
 800962c:	0800968d 	.word	0x0800968d
 8009630:	2b6e      	cmp	r3, #110	; 0x6e
 8009632:	d809      	bhi.n	8009648 <_scanf_float+0x134>
 8009634:	2b60      	cmp	r3, #96	; 0x60
 8009636:	d8b2      	bhi.n	800959e <_scanf_float+0x8a>
 8009638:	2b54      	cmp	r3, #84	; 0x54
 800963a:	d077      	beq.n	800972c <_scanf_float+0x218>
 800963c:	2b59      	cmp	r3, #89	; 0x59
 800963e:	d199      	bne.n	8009574 <_scanf_float+0x60>
 8009640:	2d07      	cmp	r5, #7
 8009642:	d197      	bne.n	8009574 <_scanf_float+0x60>
 8009644:	2508      	movs	r5, #8
 8009646:	e029      	b.n	800969c <_scanf_float+0x188>
 8009648:	2b74      	cmp	r3, #116	; 0x74
 800964a:	d06f      	beq.n	800972c <_scanf_float+0x218>
 800964c:	2b79      	cmp	r3, #121	; 0x79
 800964e:	e7f6      	b.n	800963e <_scanf_float+0x12a>
 8009650:	6821      	ldr	r1, [r4, #0]
 8009652:	05c8      	lsls	r0, r1, #23
 8009654:	d51a      	bpl.n	800968c <_scanf_float+0x178>
 8009656:	9b02      	ldr	r3, [sp, #8]
 8009658:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800965c:	6021      	str	r1, [r4, #0]
 800965e:	f109 0901 	add.w	r9, r9, #1
 8009662:	b11b      	cbz	r3, 800966c <_scanf_float+0x158>
 8009664:	3b01      	subs	r3, #1
 8009666:	3201      	adds	r2, #1
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	60a2      	str	r2, [r4, #8]
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	3b01      	subs	r3, #1
 8009670:	60a3      	str	r3, [r4, #8]
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	3301      	adds	r3, #1
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3b01      	subs	r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	607b      	str	r3, [r7, #4]
 8009680:	f340 8084 	ble.w	800978c <_scanf_float+0x278>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	e766      	b.n	800955a <_scanf_float+0x46>
 800968c:	eb1a 0f05 	cmn.w	sl, r5
 8009690:	f47f af70 	bne.w	8009574 <_scanf_float+0x60>
 8009694:	6822      	ldr	r2, [r4, #0]
 8009696:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800969a:	6022      	str	r2, [r4, #0]
 800969c:	f806 3b01 	strb.w	r3, [r6], #1
 80096a0:	e7e4      	b.n	800966c <_scanf_float+0x158>
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	0610      	lsls	r0, r2, #24
 80096a6:	f57f af65 	bpl.w	8009574 <_scanf_float+0x60>
 80096aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ae:	e7f4      	b.n	800969a <_scanf_float+0x186>
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	d10e      	bne.n	80096d4 <_scanf_float+0x1c0>
 80096b6:	f1b9 0f00 	cmp.w	r9, #0
 80096ba:	d10e      	bne.n	80096da <_scanf_float+0x1c6>
 80096bc:	6822      	ldr	r2, [r4, #0]
 80096be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096c6:	d108      	bne.n	80096da <_scanf_float+0x1c6>
 80096c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80096cc:	6022      	str	r2, [r4, #0]
 80096ce:	f04f 0a01 	mov.w	sl, #1
 80096d2:	e7e3      	b.n	800969c <_scanf_float+0x188>
 80096d4:	f1ba 0f02 	cmp.w	sl, #2
 80096d8:	d055      	beq.n	8009786 <_scanf_float+0x272>
 80096da:	2d01      	cmp	r5, #1
 80096dc:	d002      	beq.n	80096e4 <_scanf_float+0x1d0>
 80096de:	2d04      	cmp	r5, #4
 80096e0:	f47f af48 	bne.w	8009574 <_scanf_float+0x60>
 80096e4:	3501      	adds	r5, #1
 80096e6:	b2ed      	uxtb	r5, r5
 80096e8:	e7d8      	b.n	800969c <_scanf_float+0x188>
 80096ea:	f1ba 0f01 	cmp.w	sl, #1
 80096ee:	f47f af41 	bne.w	8009574 <_scanf_float+0x60>
 80096f2:	f04f 0a02 	mov.w	sl, #2
 80096f6:	e7d1      	b.n	800969c <_scanf_float+0x188>
 80096f8:	b97d      	cbnz	r5, 800971a <_scanf_float+0x206>
 80096fa:	f1b9 0f00 	cmp.w	r9, #0
 80096fe:	f47f af3c 	bne.w	800957a <_scanf_float+0x66>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009708:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800970c:	f47f af39 	bne.w	8009582 <_scanf_float+0x6e>
 8009710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	2501      	movs	r5, #1
 8009718:	e7c0      	b.n	800969c <_scanf_float+0x188>
 800971a:	2d03      	cmp	r5, #3
 800971c:	d0e2      	beq.n	80096e4 <_scanf_float+0x1d0>
 800971e:	2d05      	cmp	r5, #5
 8009720:	e7de      	b.n	80096e0 <_scanf_float+0x1cc>
 8009722:	2d02      	cmp	r5, #2
 8009724:	f47f af26 	bne.w	8009574 <_scanf_float+0x60>
 8009728:	2503      	movs	r5, #3
 800972a:	e7b7      	b.n	800969c <_scanf_float+0x188>
 800972c:	2d06      	cmp	r5, #6
 800972e:	f47f af21 	bne.w	8009574 <_scanf_float+0x60>
 8009732:	2507      	movs	r5, #7
 8009734:	e7b2      	b.n	800969c <_scanf_float+0x188>
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	0591      	lsls	r1, r2, #22
 800973a:	f57f af1b 	bpl.w	8009574 <_scanf_float+0x60>
 800973e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009742:	6022      	str	r2, [r4, #0]
 8009744:	f8cd 9004 	str.w	r9, [sp, #4]
 8009748:	e7a8      	b.n	800969c <_scanf_float+0x188>
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009750:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009754:	d006      	beq.n	8009764 <_scanf_float+0x250>
 8009756:	0550      	lsls	r0, r2, #21
 8009758:	f57f af0c 	bpl.w	8009574 <_scanf_float+0x60>
 800975c:	f1b9 0f00 	cmp.w	r9, #0
 8009760:	f43f af0f 	beq.w	8009582 <_scanf_float+0x6e>
 8009764:	0591      	lsls	r1, r2, #22
 8009766:	bf58      	it	pl
 8009768:	9901      	ldrpl	r1, [sp, #4]
 800976a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800976e:	bf58      	it	pl
 8009770:	eba9 0101 	subpl.w	r1, r9, r1
 8009774:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009778:	bf58      	it	pl
 800977a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800977e:	6022      	str	r2, [r4, #0]
 8009780:	f04f 0900 	mov.w	r9, #0
 8009784:	e78a      	b.n	800969c <_scanf_float+0x188>
 8009786:	f04f 0a03 	mov.w	sl, #3
 800978a:	e787      	b.n	800969c <_scanf_float+0x188>
 800978c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009790:	4639      	mov	r1, r7
 8009792:	4640      	mov	r0, r8
 8009794:	4798      	blx	r3
 8009796:	2800      	cmp	r0, #0
 8009798:	f43f aedf 	beq.w	800955a <_scanf_float+0x46>
 800979c:	e6ea      	b.n	8009574 <_scanf_float+0x60>
 800979e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097a6:	463a      	mov	r2, r7
 80097a8:	4640      	mov	r0, r8
 80097aa:	4798      	blx	r3
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	e6ec      	b.n	800958e <_scanf_float+0x7a>
 80097b4:	1e6b      	subs	r3, r5, #1
 80097b6:	2b06      	cmp	r3, #6
 80097b8:	d825      	bhi.n	8009806 <_scanf_float+0x2f2>
 80097ba:	2d02      	cmp	r5, #2
 80097bc:	d836      	bhi.n	800982c <_scanf_float+0x318>
 80097be:	455e      	cmp	r6, fp
 80097c0:	f67f aee8 	bls.w	8009594 <_scanf_float+0x80>
 80097c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097cc:	463a      	mov	r2, r7
 80097ce:	4640      	mov	r0, r8
 80097d0:	4798      	blx	r3
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	e7f1      	b.n	80097be <_scanf_float+0x2aa>
 80097da:	9802      	ldr	r0, [sp, #8]
 80097dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80097e4:	9002      	str	r0, [sp, #8]
 80097e6:	463a      	mov	r2, r7
 80097e8:	4640      	mov	r0, r8
 80097ea:	4798      	blx	r3
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097f6:	fa5f fa8a 	uxtb.w	sl, sl
 80097fa:	f1ba 0f02 	cmp.w	sl, #2
 80097fe:	d1ec      	bne.n	80097da <_scanf_float+0x2c6>
 8009800:	3d03      	subs	r5, #3
 8009802:	b2ed      	uxtb	r5, r5
 8009804:	1b76      	subs	r6, r6, r5
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	05da      	lsls	r2, r3, #23
 800980a:	d52f      	bpl.n	800986c <_scanf_float+0x358>
 800980c:	055b      	lsls	r3, r3, #21
 800980e:	d510      	bpl.n	8009832 <_scanf_float+0x31e>
 8009810:	455e      	cmp	r6, fp
 8009812:	f67f aebf 	bls.w	8009594 <_scanf_float+0x80>
 8009816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800981a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800981e:	463a      	mov	r2, r7
 8009820:	4640      	mov	r0, r8
 8009822:	4798      	blx	r3
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3b01      	subs	r3, #1
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	e7f1      	b.n	8009810 <_scanf_float+0x2fc>
 800982c:	46aa      	mov	sl, r5
 800982e:	9602      	str	r6, [sp, #8]
 8009830:	e7df      	b.n	80097f2 <_scanf_float+0x2de>
 8009832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	2965      	cmp	r1, #101	; 0x65
 800983a:	f103 33ff 	add.w	r3, r3, #4294967295
 800983e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	d00c      	beq.n	8009860 <_scanf_float+0x34c>
 8009846:	2945      	cmp	r1, #69	; 0x45
 8009848:	d00a      	beq.n	8009860 <_scanf_float+0x34c>
 800984a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800984e:	463a      	mov	r2, r7
 8009850:	4640      	mov	r0, r8
 8009852:	4798      	blx	r3
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800985a:	3b01      	subs	r3, #1
 800985c:	1eb5      	subs	r5, r6, #2
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009864:	463a      	mov	r2, r7
 8009866:	4640      	mov	r0, r8
 8009868:	4798      	blx	r3
 800986a:	462e      	mov	r6, r5
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	f015 0510 	ands.w	r5, r5, #16
 8009872:	d158      	bne.n	8009926 <_scanf_float+0x412>
 8009874:	7035      	strb	r5, [r6, #0]
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800987c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009880:	d11c      	bne.n	80098bc <_scanf_float+0x3a8>
 8009882:	9b01      	ldr	r3, [sp, #4]
 8009884:	454b      	cmp	r3, r9
 8009886:	eba3 0209 	sub.w	r2, r3, r9
 800988a:	d124      	bne.n	80098d6 <_scanf_float+0x3c2>
 800988c:	2200      	movs	r2, #0
 800988e:	4659      	mov	r1, fp
 8009890:	4640      	mov	r0, r8
 8009892:	f7ff f945 	bl	8008b20 <_strtod_r>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	6821      	ldr	r1, [r4, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f011 0f02 	tst.w	r1, #2
 80098a0:	ec57 6b10 	vmov	r6, r7, d0
 80098a4:	f103 0204 	add.w	r2, r3, #4
 80098a8:	d020      	beq.n	80098ec <_scanf_float+0x3d8>
 80098aa:	9903      	ldr	r1, [sp, #12]
 80098ac:	600a      	str	r2, [r1, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	e9c3 6700 	strd	r6, r7, [r3]
 80098b4:	68e3      	ldr	r3, [r4, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60e3      	str	r3, [r4, #12]
 80098ba:	e66c      	b.n	8009596 <_scanf_float+0x82>
 80098bc:	9b04      	ldr	r3, [sp, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0e4      	beq.n	800988c <_scanf_float+0x378>
 80098c2:	9905      	ldr	r1, [sp, #20]
 80098c4:	230a      	movs	r3, #10
 80098c6:	462a      	mov	r2, r5
 80098c8:	3101      	adds	r1, #1
 80098ca:	4640      	mov	r0, r8
 80098cc:	f7ff f9b0 	bl	8008c30 <_strtol_r>
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	9e05      	ldr	r6, [sp, #20]
 80098d4:	1ac2      	subs	r2, r0, r3
 80098d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80098da:	429e      	cmp	r6, r3
 80098dc:	bf28      	it	cs
 80098de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80098e2:	4912      	ldr	r1, [pc, #72]	; (800992c <_scanf_float+0x418>)
 80098e4:	4630      	mov	r0, r6
 80098e6:	f000 f8e7 	bl	8009ab8 <siprintf>
 80098ea:	e7cf      	b.n	800988c <_scanf_float+0x378>
 80098ec:	f011 0f04 	tst.w	r1, #4
 80098f0:	9903      	ldr	r1, [sp, #12]
 80098f2:	600a      	str	r2, [r1, #0]
 80098f4:	d1db      	bne.n	80098ae <_scanf_float+0x39a>
 80098f6:	f8d3 8000 	ldr.w	r8, [r3]
 80098fa:	ee10 2a10 	vmov	r2, s0
 80098fe:	ee10 0a10 	vmov	r0, s0
 8009902:	463b      	mov	r3, r7
 8009904:	4639      	mov	r1, r7
 8009906:	f7f7 f929 	bl	8000b5c <__aeabi_dcmpun>
 800990a:	b128      	cbz	r0, 8009918 <_scanf_float+0x404>
 800990c:	4808      	ldr	r0, [pc, #32]	; (8009930 <_scanf_float+0x41c>)
 800990e:	f000 fa4f 	bl	8009db0 <nanf>
 8009912:	ed88 0a00 	vstr	s0, [r8]
 8009916:	e7cd      	b.n	80098b4 <_scanf_float+0x3a0>
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f7 f97c 	bl	8000c18 <__aeabi_d2f>
 8009920:	f8c8 0000 	str.w	r0, [r8]
 8009924:	e7c6      	b.n	80098b4 <_scanf_float+0x3a0>
 8009926:	2500      	movs	r5, #0
 8009928:	e635      	b.n	8009596 <_scanf_float+0x82>
 800992a:	bf00      	nop
 800992c:	0800d3f5 	.word	0x0800d3f5
 8009930:	0800d690 	.word	0x0800d690

08009934 <std>:
 8009934:	2300      	movs	r3, #0
 8009936:	b510      	push	{r4, lr}
 8009938:	4604      	mov	r4, r0
 800993a:	e9c0 3300 	strd	r3, r3, [r0]
 800993e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009942:	6083      	str	r3, [r0, #8]
 8009944:	8181      	strh	r1, [r0, #12]
 8009946:	6643      	str	r3, [r0, #100]	; 0x64
 8009948:	81c2      	strh	r2, [r0, #14]
 800994a:	6183      	str	r3, [r0, #24]
 800994c:	4619      	mov	r1, r3
 800994e:	2208      	movs	r2, #8
 8009950:	305c      	adds	r0, #92	; 0x5c
 8009952:	f000 f914 	bl	8009b7e <memset>
 8009956:	4b0d      	ldr	r3, [pc, #52]	; (800998c <std+0x58>)
 8009958:	6263      	str	r3, [r4, #36]	; 0x24
 800995a:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <std+0x5c>)
 800995c:	62a3      	str	r3, [r4, #40]	; 0x28
 800995e:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <std+0x60>)
 8009960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009962:	4b0d      	ldr	r3, [pc, #52]	; (8009998 <std+0x64>)
 8009964:	6323      	str	r3, [r4, #48]	; 0x30
 8009966:	4b0d      	ldr	r3, [pc, #52]	; (800999c <std+0x68>)
 8009968:	6224      	str	r4, [r4, #32]
 800996a:	429c      	cmp	r4, r3
 800996c:	d006      	beq.n	800997c <std+0x48>
 800996e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009972:	4294      	cmp	r4, r2
 8009974:	d002      	beq.n	800997c <std+0x48>
 8009976:	33d0      	adds	r3, #208	; 0xd0
 8009978:	429c      	cmp	r4, r3
 800997a:	d105      	bne.n	8009988 <std+0x54>
 800997c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009984:	f000 b9fa 	b.w	8009d7c <__retarget_lock_init_recursive>
 8009988:	bd10      	pop	{r4, pc}
 800998a:	bf00      	nop
 800998c:	08009af9 	.word	0x08009af9
 8009990:	08009b1b 	.word	0x08009b1b
 8009994:	08009b53 	.word	0x08009b53
 8009998:	08009b77 	.word	0x08009b77
 800999c:	200046dc 	.word	0x200046dc

080099a0 <stdio_exit_handler>:
 80099a0:	4a02      	ldr	r2, [pc, #8]	; (80099ac <stdio_exit_handler+0xc>)
 80099a2:	4903      	ldr	r1, [pc, #12]	; (80099b0 <stdio_exit_handler+0x10>)
 80099a4:	4803      	ldr	r0, [pc, #12]	; (80099b4 <stdio_exit_handler+0x14>)
 80099a6:	f000 b869 	b.w	8009a7c <_fwalk_sglue>
 80099aa:	bf00      	nop
 80099ac:	20000020 	.word	0x20000020
 80099b0:	0800c0b9 	.word	0x0800c0b9
 80099b4:	20000198 	.word	0x20000198

080099b8 <cleanup_stdio>:
 80099b8:	6841      	ldr	r1, [r0, #4]
 80099ba:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <cleanup_stdio+0x34>)
 80099bc:	4299      	cmp	r1, r3
 80099be:	b510      	push	{r4, lr}
 80099c0:	4604      	mov	r4, r0
 80099c2:	d001      	beq.n	80099c8 <cleanup_stdio+0x10>
 80099c4:	f002 fb78 	bl	800c0b8 <_fflush_r>
 80099c8:	68a1      	ldr	r1, [r4, #8]
 80099ca:	4b09      	ldr	r3, [pc, #36]	; (80099f0 <cleanup_stdio+0x38>)
 80099cc:	4299      	cmp	r1, r3
 80099ce:	d002      	beq.n	80099d6 <cleanup_stdio+0x1e>
 80099d0:	4620      	mov	r0, r4
 80099d2:	f002 fb71 	bl	800c0b8 <_fflush_r>
 80099d6:	68e1      	ldr	r1, [r4, #12]
 80099d8:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <cleanup_stdio+0x3c>)
 80099da:	4299      	cmp	r1, r3
 80099dc:	d004      	beq.n	80099e8 <cleanup_stdio+0x30>
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e4:	f002 bb68 	b.w	800c0b8 <_fflush_r>
 80099e8:	bd10      	pop	{r4, pc}
 80099ea:	bf00      	nop
 80099ec:	200046dc 	.word	0x200046dc
 80099f0:	20004744 	.word	0x20004744
 80099f4:	200047ac 	.word	0x200047ac

080099f8 <global_stdio_init.part.0>:
 80099f8:	b510      	push	{r4, lr}
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <global_stdio_init.part.0+0x30>)
 80099fc:	4c0b      	ldr	r4, [pc, #44]	; (8009a2c <global_stdio_init.part.0+0x34>)
 80099fe:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <global_stdio_init.part.0+0x38>)
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	4620      	mov	r0, r4
 8009a04:	2200      	movs	r2, #0
 8009a06:	2104      	movs	r1, #4
 8009a08:	f7ff ff94 	bl	8009934 <std>
 8009a0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a10:	2201      	movs	r2, #1
 8009a12:	2109      	movs	r1, #9
 8009a14:	f7ff ff8e 	bl	8009934 <std>
 8009a18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a22:	2112      	movs	r1, #18
 8009a24:	f7ff bf86 	b.w	8009934 <std>
 8009a28:	20004814 	.word	0x20004814
 8009a2c:	200046dc 	.word	0x200046dc
 8009a30:	080099a1 	.word	0x080099a1

08009a34 <__sfp_lock_acquire>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__sfp_lock_acquire+0x8>)
 8009a36:	f000 b9a2 	b.w	8009d7e <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	2000481d 	.word	0x2000481d

08009a40 <__sfp_lock_release>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__sfp_lock_release+0x8>)
 8009a42:	f000 b99d 	b.w	8009d80 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	2000481d 	.word	0x2000481d

08009a4c <__sinit>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	4604      	mov	r4, r0
 8009a50:	f7ff fff0 	bl	8009a34 <__sfp_lock_acquire>
 8009a54:	6a23      	ldr	r3, [r4, #32]
 8009a56:	b11b      	cbz	r3, 8009a60 <__sinit+0x14>
 8009a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a5c:	f7ff bff0 	b.w	8009a40 <__sfp_lock_release>
 8009a60:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <__sinit+0x28>)
 8009a62:	6223      	str	r3, [r4, #32]
 8009a64:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <__sinit+0x2c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f5      	bne.n	8009a58 <__sinit+0xc>
 8009a6c:	f7ff ffc4 	bl	80099f8 <global_stdio_init.part.0>
 8009a70:	e7f2      	b.n	8009a58 <__sinit+0xc>
 8009a72:	bf00      	nop
 8009a74:	080099b9 	.word	0x080099b9
 8009a78:	20004814 	.word	0x20004814

08009a7c <_fwalk_sglue>:
 8009a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a80:	4607      	mov	r7, r0
 8009a82:	4688      	mov	r8, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	2600      	movs	r6, #0
 8009a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009a90:	d505      	bpl.n	8009a9e <_fwalk_sglue+0x22>
 8009a92:	6824      	ldr	r4, [r4, #0]
 8009a94:	2c00      	cmp	r4, #0
 8009a96:	d1f7      	bne.n	8009a88 <_fwalk_sglue+0xc>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d907      	bls.n	8009ab4 <_fwalk_sglue+0x38>
 8009aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	d003      	beq.n	8009ab4 <_fwalk_sglue+0x38>
 8009aac:	4629      	mov	r1, r5
 8009aae:	4638      	mov	r0, r7
 8009ab0:	47c0      	blx	r8
 8009ab2:	4306      	orrs	r6, r0
 8009ab4:	3568      	adds	r5, #104	; 0x68
 8009ab6:	e7e9      	b.n	8009a8c <_fwalk_sglue+0x10>

08009ab8 <siprintf>:
 8009ab8:	b40e      	push	{r1, r2, r3}
 8009aba:	b500      	push	{lr}
 8009abc:	b09c      	sub	sp, #112	; 0x70
 8009abe:	ab1d      	add	r3, sp, #116	; 0x74
 8009ac0:	9002      	str	r0, [sp, #8]
 8009ac2:	9006      	str	r0, [sp, #24]
 8009ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ac8:	4809      	ldr	r0, [pc, #36]	; (8009af0 <siprintf+0x38>)
 8009aca:	9107      	str	r1, [sp, #28]
 8009acc:	9104      	str	r1, [sp, #16]
 8009ace:	4909      	ldr	r1, [pc, #36]	; (8009af4 <siprintf+0x3c>)
 8009ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad4:	9105      	str	r1, [sp, #20]
 8009ad6:	6800      	ldr	r0, [r0, #0]
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	a902      	add	r1, sp, #8
 8009adc:	f002 f968 	bl	800bdb0 <_svfiprintf_r>
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	b01c      	add	sp, #112	; 0x70
 8009ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aec:	b003      	add	sp, #12
 8009aee:	4770      	bx	lr
 8009af0:	200001e4 	.word	0x200001e4
 8009af4:	ffff0208 	.word	0xffff0208

08009af8 <__sread>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	460c      	mov	r4, r1
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	f000 f8ee 	bl	8009ce0 <_read_r>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	bfab      	itete	ge
 8009b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b0c:	181b      	addge	r3, r3, r0
 8009b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b12:	bfac      	ite	ge
 8009b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b16:	81a3      	strhlt	r3, [r4, #12]
 8009b18:	bd10      	pop	{r4, pc}

08009b1a <__swrite>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	461f      	mov	r7, r3
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	05db      	lsls	r3, r3, #23
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	4616      	mov	r6, r2
 8009b2a:	d505      	bpl.n	8009b38 <__swrite+0x1e>
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	2302      	movs	r3, #2
 8009b32:	2200      	movs	r2, #0
 8009b34:	f000 f8c2 	bl	8009cbc <_lseek_r>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	f000 b8d9 	b.w	8009d04 <_write_r>

08009b52 <__sseek>:
 8009b52:	b510      	push	{r4, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5a:	f000 f8af 	bl	8009cbc <_lseek_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	bf15      	itete	ne
 8009b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6e:	81a3      	strheq	r3, [r4, #12]
 8009b70:	bf18      	it	ne
 8009b72:	81a3      	strhne	r3, [r4, #12]
 8009b74:	bd10      	pop	{r4, pc}

08009b76 <__sclose>:
 8009b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7a:	f000 b839 	b.w	8009bf0 <_close_r>

08009b7e <memset>:
 8009b7e:	4402      	add	r2, r0
 8009b80:	4603      	mov	r3, r0
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d100      	bne.n	8009b88 <memset+0xa>
 8009b86:	4770      	bx	lr
 8009b88:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8c:	e7f9      	b.n	8009b82 <memset+0x4>

08009b8e <strncmp>:
 8009b8e:	b510      	push	{r4, lr}
 8009b90:	b16a      	cbz	r2, 8009bae <strncmp+0x20>
 8009b92:	3901      	subs	r1, #1
 8009b94:	1884      	adds	r4, r0, r2
 8009b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d103      	bne.n	8009baa <strncmp+0x1c>
 8009ba2:	42a0      	cmp	r0, r4
 8009ba4:	d001      	beq.n	8009baa <strncmp+0x1c>
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	d1f5      	bne.n	8009b96 <strncmp+0x8>
 8009baa:	1ad0      	subs	r0, r2, r3
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	4610      	mov	r0, r2
 8009bb0:	e7fc      	b.n	8009bac <strncmp+0x1e>

08009bb2 <strpbrk>:
 8009bb2:	b570      	push	{r4, r5, r6, lr}
 8009bb4:	7803      	ldrb	r3, [r0, #0]
 8009bb6:	b1a3      	cbz	r3, 8009be2 <strpbrk+0x30>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009bc2:	b14d      	cbz	r5, 8009bd8 <strpbrk+0x26>
 8009bc4:	460a      	mov	r2, r1
 8009bc6:	e001      	b.n	8009bcc <strpbrk+0x1a>
 8009bc8:	42ae      	cmp	r6, r5
 8009bca:	d009      	beq.n	8009be0 <strpbrk+0x2e>
 8009bcc:	4614      	mov	r4, r2
 8009bce:	f812 6b01 	ldrb.w	r6, [r2], #1
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	d1f8      	bne.n	8009bc8 <strpbrk+0x16>
 8009bd6:	e7f1      	b.n	8009bbc <strpbrk+0xa>
 8009bd8:	7823      	ldrb	r3, [r4, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	bf08      	it	eq
 8009bde:	2000      	moveq	r0, #0
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	4618      	mov	r0, r3
 8009be4:	e7fc      	b.n	8009be0 <strpbrk+0x2e>
	...

08009be8 <_localeconv_r>:
 8009be8:	4800      	ldr	r0, [pc, #0]	; (8009bec <_localeconv_r+0x4>)
 8009bea:	4770      	bx	lr
 8009bec:	2000011c 	.word	0x2000011c

08009bf0 <_close_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d06      	ldr	r5, [pc, #24]	; (8009c0c <_close_r+0x1c>)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	602b      	str	r3, [r5, #0]
 8009bfc:	f7f8 fd65 	bl	80026ca <_close>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d102      	bne.n	8009c0a <_close_r+0x1a>
 8009c04:	682b      	ldr	r3, [r5, #0]
 8009c06:	b103      	cbz	r3, 8009c0a <_close_r+0x1a>
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	20004818 	.word	0x20004818

08009c10 <_reclaim_reent>:
 8009c10:	4b29      	ldr	r3, [pc, #164]	; (8009cb8 <_reclaim_reent+0xa8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4283      	cmp	r3, r0
 8009c16:	b570      	push	{r4, r5, r6, lr}
 8009c18:	4604      	mov	r4, r0
 8009c1a:	d04b      	beq.n	8009cb4 <_reclaim_reent+0xa4>
 8009c1c:	69c3      	ldr	r3, [r0, #28]
 8009c1e:	b143      	cbz	r3, 8009c32 <_reclaim_reent+0x22>
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d144      	bne.n	8009cb0 <_reclaim_reent+0xa0>
 8009c26:	69e3      	ldr	r3, [r4, #28]
 8009c28:	6819      	ldr	r1, [r3, #0]
 8009c2a:	b111      	cbz	r1, 8009c32 <_reclaim_reent+0x22>
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	f000 ff41 	bl	800aab4 <_free_r>
 8009c32:	6961      	ldr	r1, [r4, #20]
 8009c34:	b111      	cbz	r1, 8009c3c <_reclaim_reent+0x2c>
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 ff3c 	bl	800aab4 <_free_r>
 8009c3c:	69e1      	ldr	r1, [r4, #28]
 8009c3e:	b111      	cbz	r1, 8009c46 <_reclaim_reent+0x36>
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 ff37 	bl	800aab4 <_free_r>
 8009c46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009c48:	b111      	cbz	r1, 8009c50 <_reclaim_reent+0x40>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f000 ff32 	bl	800aab4 <_free_r>
 8009c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c52:	b111      	cbz	r1, 8009c5a <_reclaim_reent+0x4a>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 ff2d 	bl	800aab4 <_free_r>
 8009c5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c5c:	b111      	cbz	r1, 8009c64 <_reclaim_reent+0x54>
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 ff28 	bl	800aab4 <_free_r>
 8009c64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c66:	b111      	cbz	r1, 8009c6e <_reclaim_reent+0x5e>
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 ff23 	bl	800aab4 <_free_r>
 8009c6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c70:	b111      	cbz	r1, 8009c78 <_reclaim_reent+0x68>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 ff1e 	bl	800aab4 <_free_r>
 8009c78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c7a:	b111      	cbz	r1, 8009c82 <_reclaim_reent+0x72>
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 ff19 	bl	800aab4 <_free_r>
 8009c82:	6a23      	ldr	r3, [r4, #32]
 8009c84:	b1b3      	cbz	r3, 8009cb4 <_reclaim_reent+0xa4>
 8009c86:	4620      	mov	r0, r4
 8009c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c8c:	4718      	bx	r3
 8009c8e:	5949      	ldr	r1, [r1, r5]
 8009c90:	b941      	cbnz	r1, 8009ca4 <_reclaim_reent+0x94>
 8009c92:	3504      	adds	r5, #4
 8009c94:	69e3      	ldr	r3, [r4, #28]
 8009c96:	2d80      	cmp	r5, #128	; 0x80
 8009c98:	68d9      	ldr	r1, [r3, #12]
 8009c9a:	d1f8      	bne.n	8009c8e <_reclaim_reent+0x7e>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 ff09 	bl	800aab4 <_free_r>
 8009ca2:	e7c0      	b.n	8009c26 <_reclaim_reent+0x16>
 8009ca4:	680e      	ldr	r6, [r1, #0]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 ff04 	bl	800aab4 <_free_r>
 8009cac:	4631      	mov	r1, r6
 8009cae:	e7ef      	b.n	8009c90 <_reclaim_reent+0x80>
 8009cb0:	2500      	movs	r5, #0
 8009cb2:	e7ef      	b.n	8009c94 <_reclaim_reent+0x84>
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200001e4 	.word	0x200001e4

08009cbc <_lseek_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_lseek_r+0x20>)
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f8 fd24 	bl	8002718 <_lseek>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_lseek_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_lseek_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20004818 	.word	0x20004818

08009ce0 <_read_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d07      	ldr	r5, [pc, #28]	; (8009d00 <_read_r+0x20>)
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4611      	mov	r1, r2
 8009cea:	2200      	movs	r2, #0
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7f8 fcb2 	bl	8002658 <_read>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_read_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_read_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20004818 	.word	0x20004818

08009d04 <_write_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_write_r+0x20>)
 8009d08:	4604      	mov	r4, r0
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	2200      	movs	r2, #0
 8009d10:	602a      	str	r2, [r5, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f7f8 fcbd 	bl	8002692 <_write>
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d102      	bne.n	8009d22 <_write_r+0x1e>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	b103      	cbz	r3, 8009d22 <_write_r+0x1e>
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	bd38      	pop	{r3, r4, r5, pc}
 8009d24:	20004818 	.word	0x20004818

08009d28 <__errno>:
 8009d28:	4b01      	ldr	r3, [pc, #4]	; (8009d30 <__errno+0x8>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	200001e4 	.word	0x200001e4

08009d34 <__libc_init_array>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4d0d      	ldr	r5, [pc, #52]	; (8009d6c <__libc_init_array+0x38>)
 8009d38:	4c0d      	ldr	r4, [pc, #52]	; (8009d70 <__libc_init_array+0x3c>)
 8009d3a:	1b64      	subs	r4, r4, r5
 8009d3c:	10a4      	asrs	r4, r4, #2
 8009d3e:	2600      	movs	r6, #0
 8009d40:	42a6      	cmp	r6, r4
 8009d42:	d109      	bne.n	8009d58 <__libc_init_array+0x24>
 8009d44:	4d0b      	ldr	r5, [pc, #44]	; (8009d74 <__libc_init_array+0x40>)
 8009d46:	4c0c      	ldr	r4, [pc, #48]	; (8009d78 <__libc_init_array+0x44>)
 8009d48:	f003 f90e 	bl	800cf68 <_init>
 8009d4c:	1b64      	subs	r4, r4, r5
 8009d4e:	10a4      	asrs	r4, r4, #2
 8009d50:	2600      	movs	r6, #0
 8009d52:	42a6      	cmp	r6, r4
 8009d54:	d105      	bne.n	8009d62 <__libc_init_array+0x2e>
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d5c:	4798      	blx	r3
 8009d5e:	3601      	adds	r6, #1
 8009d60:	e7ee      	b.n	8009d40 <__libc_init_array+0xc>
 8009d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d66:	4798      	blx	r3
 8009d68:	3601      	adds	r6, #1
 8009d6a:	e7f2      	b.n	8009d52 <__libc_init_array+0x1e>
 8009d6c:	0800d6b4 	.word	0x0800d6b4
 8009d70:	0800d6b4 	.word	0x0800d6b4
 8009d74:	0800d6b4 	.word	0x0800d6b4
 8009d78:	0800d6b8 	.word	0x0800d6b8

08009d7c <__retarget_lock_init_recursive>:
 8009d7c:	4770      	bx	lr

08009d7e <__retarget_lock_acquire_recursive>:
 8009d7e:	4770      	bx	lr

08009d80 <__retarget_lock_release_recursive>:
 8009d80:	4770      	bx	lr

08009d82 <memcpy>:
 8009d82:	440a      	add	r2, r1
 8009d84:	4291      	cmp	r1, r2
 8009d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d8a:	d100      	bne.n	8009d8e <memcpy+0xc>
 8009d8c:	4770      	bx	lr
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d98:	4291      	cmp	r1, r2
 8009d9a:	d1f9      	bne.n	8009d90 <memcpy+0xe>
 8009d9c:	bd10      	pop	{r4, pc}
	...

08009da0 <nan>:
 8009da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009da8 <nan+0x8>
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	00000000 	.word	0x00000000
 8009dac:	7ff80000 	.word	0x7ff80000

08009db0 <nanf>:
 8009db0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009db8 <nanf+0x8>
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	7fc00000 	.word	0x7fc00000

08009dbc <quorem>:
 8009dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	6903      	ldr	r3, [r0, #16]
 8009dc2:	690c      	ldr	r4, [r1, #16]
 8009dc4:	42a3      	cmp	r3, r4
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	db7e      	blt.n	8009ec8 <quorem+0x10c>
 8009dca:	3c01      	subs	r4, #1
 8009dcc:	f101 0814 	add.w	r8, r1, #20
 8009dd0:	f100 0514 	add.w	r5, r0, #20
 8009dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009de2:	3301      	adds	r3, #1
 8009de4:	429a      	cmp	r2, r3
 8009de6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dee:	fbb2 f6f3 	udiv	r6, r2, r3
 8009df2:	d331      	bcc.n	8009e58 <quorem+0x9c>
 8009df4:	f04f 0e00 	mov.w	lr, #0
 8009df8:	4640      	mov	r0, r8
 8009dfa:	46ac      	mov	ip, r5
 8009dfc:	46f2      	mov	sl, lr
 8009dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e02:	b293      	uxth	r3, r2
 8009e04:	fb06 e303 	mla	r3, r6, r3, lr
 8009e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e0c:	0c1a      	lsrs	r2, r3, #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	ebaa 0303 	sub.w	r3, sl, r3
 8009e14:	f8dc a000 	ldr.w	sl, [ip]
 8009e18:	fa13 f38a 	uxtah	r3, r3, sl
 8009e1c:	fb06 220e 	mla	r2, r6, lr, r2
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	9b00      	ldr	r3, [sp, #0]
 8009e24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e32:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e36:	4581      	cmp	r9, r0
 8009e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3c:	f84c 3b04 	str.w	r3, [ip], #4
 8009e40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e44:	d2db      	bcs.n	8009dfe <quorem+0x42>
 8009e46:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e4a:	b92b      	cbnz	r3, 8009e58 <quorem+0x9c>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	429d      	cmp	r5, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	d32c      	bcc.n	8009eb0 <quorem+0xf4>
 8009e56:	613c      	str	r4, [r7, #16]
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f001 fd5b 	bl	800b914 <__mcmp>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	db22      	blt.n	8009ea8 <quorem+0xec>
 8009e62:	3601      	adds	r6, #1
 8009e64:	4629      	mov	r1, r5
 8009e66:	2000      	movs	r0, #0
 8009e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e6c:	f8d1 c000 	ldr.w	ip, [r1]
 8009e70:	b293      	uxth	r3, r2
 8009e72:	1ac3      	subs	r3, r0, r3
 8009e74:	0c12      	lsrs	r2, r2, #16
 8009e76:	fa13 f38c 	uxtah	r3, r3, ip
 8009e7a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e88:	45c1      	cmp	r9, r8
 8009e8a:	f841 3b04 	str.w	r3, [r1], #4
 8009e8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e92:	d2e9      	bcs.n	8009e68 <quorem+0xac>
 8009e94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e9c:	b922      	cbnz	r2, 8009ea8 <quorem+0xec>
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	d30a      	bcc.n	8009ebc <quorem+0x100>
 8009ea6:	613c      	str	r4, [r7, #16]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	b003      	add	sp, #12
 8009eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb0:	6812      	ldr	r2, [r2, #0]
 8009eb2:	3b04      	subs	r3, #4
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	d1ce      	bne.n	8009e56 <quorem+0x9a>
 8009eb8:	3c01      	subs	r4, #1
 8009eba:	e7c9      	b.n	8009e50 <quorem+0x94>
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	3b04      	subs	r3, #4
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d1f0      	bne.n	8009ea6 <quorem+0xea>
 8009ec4:	3c01      	subs	r4, #1
 8009ec6:	e7eb      	b.n	8009ea0 <quorem+0xe4>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e7ee      	b.n	8009eaa <quorem+0xee>
 8009ecc:	0000      	movs	r0, r0
	...

08009ed0 <_dtoa_r>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	ed2d 8b04 	vpush	{d8-d9}
 8009ed8:	69c5      	ldr	r5, [r0, #28]
 8009eda:	b093      	sub	sp, #76	; 0x4c
 8009edc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ee0:	ec57 6b10 	vmov	r6, r7, d0
 8009ee4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ee8:	9107      	str	r1, [sp, #28]
 8009eea:	4604      	mov	r4, r0
 8009eec:	920a      	str	r2, [sp, #40]	; 0x28
 8009eee:	930d      	str	r3, [sp, #52]	; 0x34
 8009ef0:	b975      	cbnz	r5, 8009f10 <_dtoa_r+0x40>
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	f001 f982 	bl	800b1fc <malloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	61e0      	str	r0, [r4, #28]
 8009efc:	b920      	cbnz	r0, 8009f08 <_dtoa_r+0x38>
 8009efe:	4bae      	ldr	r3, [pc, #696]	; (800a1b8 <_dtoa_r+0x2e8>)
 8009f00:	21ef      	movs	r1, #239	; 0xef
 8009f02:	48ae      	ldr	r0, [pc, #696]	; (800a1bc <_dtoa_r+0x2ec>)
 8009f04:	f002 f92a 	bl	800c15c <__assert_func>
 8009f08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f0c:	6005      	str	r5, [r0, #0]
 8009f0e:	60c5      	str	r5, [r0, #12]
 8009f10:	69e3      	ldr	r3, [r4, #28]
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	b151      	cbz	r1, 8009f2c <_dtoa_r+0x5c>
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	604a      	str	r2, [r1, #4]
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4093      	lsls	r3, r2
 8009f1e:	608b      	str	r3, [r1, #8]
 8009f20:	4620      	mov	r0, r4
 8009f22:	f001 fa71 	bl	800b408 <_Bfree>
 8009f26:	69e3      	ldr	r3, [r4, #28]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	1e3b      	subs	r3, r7, #0
 8009f2e:	bfbb      	ittet	lt
 8009f30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f34:	9303      	strlt	r3, [sp, #12]
 8009f36:	2300      	movge	r3, #0
 8009f38:	2201      	movlt	r2, #1
 8009f3a:	bfac      	ite	ge
 8009f3c:	f8c8 3000 	strge.w	r3, [r8]
 8009f40:	f8c8 2000 	strlt.w	r2, [r8]
 8009f44:	4b9e      	ldr	r3, [pc, #632]	; (800a1c0 <_dtoa_r+0x2f0>)
 8009f46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f4a:	ea33 0308 	bics.w	r3, r3, r8
 8009f4e:	d11b      	bne.n	8009f88 <_dtoa_r+0xb8>
 8009f50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f52:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f5c:	4333      	orrs	r3, r6
 8009f5e:	f000 8593 	beq.w	800aa88 <_dtoa_r+0xbb8>
 8009f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f64:	b963      	cbnz	r3, 8009f80 <_dtoa_r+0xb0>
 8009f66:	4b97      	ldr	r3, [pc, #604]	; (800a1c4 <_dtoa_r+0x2f4>)
 8009f68:	e027      	b.n	8009fba <_dtoa_r+0xea>
 8009f6a:	4b97      	ldr	r3, [pc, #604]	; (800a1c8 <_dtoa_r+0x2f8>)
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	9800      	ldr	r0, [sp, #0]
 8009f76:	b013      	add	sp, #76	; 0x4c
 8009f78:	ecbd 8b04 	vpop	{d8-d9}
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	4b90      	ldr	r3, [pc, #576]	; (800a1c4 <_dtoa_r+0x2f4>)
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	3303      	adds	r3, #3
 8009f86:	e7f3      	b.n	8009f70 <_dtoa_r+0xa0>
 8009f88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	ec51 0b17 	vmov	r0, r1, d7
 8009f92:	eeb0 8a47 	vmov.f32	s16, s14
 8009f96:	eef0 8a67 	vmov.f32	s17, s15
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f7f6 fdac 	bl	8000af8 <__aeabi_dcmpeq>
 8009fa0:	4681      	mov	r9, r0
 8009fa2:	b160      	cbz	r0, 8009fbe <_dtoa_r+0xee>
 8009fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	6013      	str	r3, [r2, #0]
 8009faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 8568 	beq.w	800aa82 <_dtoa_r+0xbb2>
 8009fb2:	4b86      	ldr	r3, [pc, #536]	; (800a1cc <_dtoa_r+0x2fc>)
 8009fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	e7da      	b.n	8009f74 <_dtoa_r+0xa4>
 8009fbe:	aa10      	add	r2, sp, #64	; 0x40
 8009fc0:	a911      	add	r1, sp, #68	; 0x44
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fc8:	eef0 0a68 	vmov.f32	s1, s17
 8009fcc:	f001 fdb8 	bl	800bb40 <__d2b>
 8009fd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	2d00      	cmp	r5, #0
 8009fd8:	d07f      	beq.n	800a0da <_dtoa_r+0x20a>
 8009fda:	ee18 3a90 	vmov	r3, s17
 8009fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fe2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009fe6:	ec51 0b18 	vmov	r0, r1, d8
 8009fea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ff2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4b75      	ldr	r3, [pc, #468]	; (800a1d0 <_dtoa_r+0x300>)
 8009ffc:	f7f6 f95c 	bl	80002b8 <__aeabi_dsub>
 800a000:	a367      	add	r3, pc, #412	; (adr r3, 800a1a0 <_dtoa_r+0x2d0>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 fb0f 	bl	8000628 <__aeabi_dmul>
 800a00a:	a367      	add	r3, pc, #412	; (adr r3, 800a1a8 <_dtoa_r+0x2d8>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 f954 	bl	80002bc <__adddf3>
 800a014:	4606      	mov	r6, r0
 800a016:	4628      	mov	r0, r5
 800a018:	460f      	mov	r7, r1
 800a01a:	f7f6 fa9b 	bl	8000554 <__aeabi_i2d>
 800a01e:	a364      	add	r3, pc, #400	; (adr r3, 800a1b0 <_dtoa_r+0x2e0>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 fb00 	bl	8000628 <__aeabi_dmul>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	4630      	mov	r0, r6
 800a02e:	4639      	mov	r1, r7
 800a030:	f7f6 f944 	bl	80002bc <__adddf3>
 800a034:	4606      	mov	r6, r0
 800a036:	460f      	mov	r7, r1
 800a038:	f7f6 fda6 	bl	8000b88 <__aeabi_d2iz>
 800a03c:	2200      	movs	r2, #0
 800a03e:	4683      	mov	fp, r0
 800a040:	2300      	movs	r3, #0
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 fd61 	bl	8000b0c <__aeabi_dcmplt>
 800a04a:	b148      	cbz	r0, 800a060 <_dtoa_r+0x190>
 800a04c:	4658      	mov	r0, fp
 800a04e:	f7f6 fa81 	bl	8000554 <__aeabi_i2d>
 800a052:	4632      	mov	r2, r6
 800a054:	463b      	mov	r3, r7
 800a056:	f7f6 fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 800a05a:	b908      	cbnz	r0, 800a060 <_dtoa_r+0x190>
 800a05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a060:	f1bb 0f16 	cmp.w	fp, #22
 800a064:	d857      	bhi.n	800a116 <_dtoa_r+0x246>
 800a066:	4b5b      	ldr	r3, [pc, #364]	; (800a1d4 <_dtoa_r+0x304>)
 800a068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	ec51 0b18 	vmov	r0, r1, d8
 800a074:	f7f6 fd4a 	bl	8000b0c <__aeabi_dcmplt>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d04e      	beq.n	800a11a <_dtoa_r+0x24a>
 800a07c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a080:	2300      	movs	r3, #0
 800a082:	930c      	str	r3, [sp, #48]	; 0x30
 800a084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a086:	1b5b      	subs	r3, r3, r5
 800a088:	1e5a      	subs	r2, r3, #1
 800a08a:	bf45      	ittet	mi
 800a08c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a090:	9305      	strmi	r3, [sp, #20]
 800a092:	2300      	movpl	r3, #0
 800a094:	2300      	movmi	r3, #0
 800a096:	9206      	str	r2, [sp, #24]
 800a098:	bf54      	ite	pl
 800a09a:	9305      	strpl	r3, [sp, #20]
 800a09c:	9306      	strmi	r3, [sp, #24]
 800a09e:	f1bb 0f00 	cmp.w	fp, #0
 800a0a2:	db3c      	blt.n	800a11e <_dtoa_r+0x24e>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a0aa:	445b      	add	r3, fp
 800a0ac:	9306      	str	r3, [sp, #24]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	9308      	str	r3, [sp, #32]
 800a0b2:	9b07      	ldr	r3, [sp, #28]
 800a0b4:	2b09      	cmp	r3, #9
 800a0b6:	d868      	bhi.n	800a18a <_dtoa_r+0x2ba>
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	bfc4      	itt	gt
 800a0bc:	3b04      	subgt	r3, #4
 800a0be:	9307      	strgt	r3, [sp, #28]
 800a0c0:	9b07      	ldr	r3, [sp, #28]
 800a0c2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0c6:	bfcc      	ite	gt
 800a0c8:	2500      	movgt	r5, #0
 800a0ca:	2501      	movle	r5, #1
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	f200 8085 	bhi.w	800a1dc <_dtoa_r+0x30c>
 800a0d2:	e8df f003 	tbb	[pc, r3]
 800a0d6:	3b2e      	.short	0x3b2e
 800a0d8:	5839      	.short	0x5839
 800a0da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0de:	441d      	add	r5, r3
 800a0e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0e4:	2b20      	cmp	r3, #32
 800a0e6:	bfc1      	itttt	gt
 800a0e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0f8:	bfd6      	itet	le
 800a0fa:	f1c3 0320 	rsble	r3, r3, #32
 800a0fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800a102:	fa06 f003 	lslle.w	r0, r6, r3
 800a106:	f7f6 fa15 	bl	8000534 <__aeabi_ui2d>
 800a10a:	2201      	movs	r2, #1
 800a10c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a110:	3d01      	subs	r5, #1
 800a112:	920e      	str	r2, [sp, #56]	; 0x38
 800a114:	e76f      	b.n	8009ff6 <_dtoa_r+0x126>
 800a116:	2301      	movs	r3, #1
 800a118:	e7b3      	b.n	800a082 <_dtoa_r+0x1b2>
 800a11a:	900c      	str	r0, [sp, #48]	; 0x30
 800a11c:	e7b2      	b.n	800a084 <_dtoa_r+0x1b4>
 800a11e:	9b05      	ldr	r3, [sp, #20]
 800a120:	eba3 030b 	sub.w	r3, r3, fp
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	f1cb 0300 	rsb	r3, fp, #0
 800a12a:	9308      	str	r3, [sp, #32]
 800a12c:	2300      	movs	r3, #0
 800a12e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a130:	e7bf      	b.n	800a0b2 <_dtoa_r+0x1e2>
 800a132:	2300      	movs	r3, #0
 800a134:	9309      	str	r3, [sp, #36]	; 0x24
 800a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dc52      	bgt.n	800a1e2 <_dtoa_r+0x312>
 800a13c:	2301      	movs	r3, #1
 800a13e:	9301      	str	r3, [sp, #4]
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	461a      	mov	r2, r3
 800a144:	920a      	str	r2, [sp, #40]	; 0x28
 800a146:	e00b      	b.n	800a160 <_dtoa_r+0x290>
 800a148:	2301      	movs	r3, #1
 800a14a:	e7f3      	b.n	800a134 <_dtoa_r+0x264>
 800a14c:	2300      	movs	r3, #0
 800a14e:	9309      	str	r3, [sp, #36]	; 0x24
 800a150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a152:	445b      	add	r3, fp
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	3301      	adds	r3, #1
 800a158:	2b01      	cmp	r3, #1
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	bfb8      	it	lt
 800a15e:	2301      	movlt	r3, #1
 800a160:	69e0      	ldr	r0, [r4, #28]
 800a162:	2100      	movs	r1, #0
 800a164:	2204      	movs	r2, #4
 800a166:	f102 0614 	add.w	r6, r2, #20
 800a16a:	429e      	cmp	r6, r3
 800a16c:	d93d      	bls.n	800a1ea <_dtoa_r+0x31a>
 800a16e:	6041      	str	r1, [r0, #4]
 800a170:	4620      	mov	r0, r4
 800a172:	f001 f909 	bl	800b388 <_Balloc>
 800a176:	9000      	str	r0, [sp, #0]
 800a178:	2800      	cmp	r0, #0
 800a17a:	d139      	bne.n	800a1f0 <_dtoa_r+0x320>
 800a17c:	4b16      	ldr	r3, [pc, #88]	; (800a1d8 <_dtoa_r+0x308>)
 800a17e:	4602      	mov	r2, r0
 800a180:	f240 11af 	movw	r1, #431	; 0x1af
 800a184:	e6bd      	b.n	8009f02 <_dtoa_r+0x32>
 800a186:	2301      	movs	r3, #1
 800a188:	e7e1      	b.n	800a14e <_dtoa_r+0x27e>
 800a18a:	2501      	movs	r5, #1
 800a18c:	2300      	movs	r3, #0
 800a18e:	9307      	str	r3, [sp, #28]
 800a190:	9509      	str	r5, [sp, #36]	; 0x24
 800a192:	f04f 33ff 	mov.w	r3, #4294967295
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	2200      	movs	r2, #0
 800a19c:	2312      	movs	r3, #18
 800a19e:	e7d1      	b.n	800a144 <_dtoa_r+0x274>
 800a1a0:	636f4361 	.word	0x636f4361
 800a1a4:	3fd287a7 	.word	0x3fd287a7
 800a1a8:	8b60c8b3 	.word	0x8b60c8b3
 800a1ac:	3fc68a28 	.word	0x3fc68a28
 800a1b0:	509f79fb 	.word	0x509f79fb
 800a1b4:	3fd34413 	.word	0x3fd34413
 800a1b8:	0800d40f 	.word	0x0800d40f
 800a1bc:	0800d426 	.word	0x0800d426
 800a1c0:	7ff00000 	.word	0x7ff00000
 800a1c4:	0800d40b 	.word	0x0800d40b
 800a1c8:	0800d402 	.word	0x0800d402
 800a1cc:	0800d3d2 	.word	0x0800d3d2
 800a1d0:	3ff80000 	.word	0x3ff80000
 800a1d4:	0800d570 	.word	0x0800d570
 800a1d8:	0800d47e 	.word	0x0800d47e
 800a1dc:	2301      	movs	r3, #1
 800a1de:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e0:	e7d7      	b.n	800a192 <_dtoa_r+0x2c2>
 800a1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	e7ba      	b.n	800a160 <_dtoa_r+0x290>
 800a1ea:	3101      	adds	r1, #1
 800a1ec:	0052      	lsls	r2, r2, #1
 800a1ee:	e7ba      	b.n	800a166 <_dtoa_r+0x296>
 800a1f0:	69e3      	ldr	r3, [r4, #28]
 800a1f2:	9a00      	ldr	r2, [sp, #0]
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	2b0e      	cmp	r3, #14
 800a1fa:	f200 80a8 	bhi.w	800a34e <_dtoa_r+0x47e>
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	f000 80a5 	beq.w	800a34e <_dtoa_r+0x47e>
 800a204:	f1bb 0f00 	cmp.w	fp, #0
 800a208:	dd38      	ble.n	800a27c <_dtoa_r+0x3ac>
 800a20a:	4bc0      	ldr	r3, [pc, #768]	; (800a50c <_dtoa_r+0x63c>)
 800a20c:	f00b 020f 	and.w	r2, fp, #15
 800a210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a214:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a218:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a21c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a220:	d019      	beq.n	800a256 <_dtoa_r+0x386>
 800a222:	4bbb      	ldr	r3, [pc, #748]	; (800a510 <_dtoa_r+0x640>)
 800a224:	ec51 0b18 	vmov	r0, r1, d8
 800a228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a22c:	f7f6 fb26 	bl	800087c <__aeabi_ddiv>
 800a230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a234:	f008 080f 	and.w	r8, r8, #15
 800a238:	2503      	movs	r5, #3
 800a23a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a510 <_dtoa_r+0x640>
 800a23e:	f1b8 0f00 	cmp.w	r8, #0
 800a242:	d10a      	bne.n	800a25a <_dtoa_r+0x38a>
 800a244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	f7f6 fb16 	bl	800087c <__aeabi_ddiv>
 800a250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a254:	e02b      	b.n	800a2ae <_dtoa_r+0x3de>
 800a256:	2502      	movs	r5, #2
 800a258:	e7ef      	b.n	800a23a <_dtoa_r+0x36a>
 800a25a:	f018 0f01 	tst.w	r8, #1
 800a25e:	d008      	beq.n	800a272 <_dtoa_r+0x3a2>
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a268:	f7f6 f9de 	bl	8000628 <__aeabi_dmul>
 800a26c:	3501      	adds	r5, #1
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a276:	f109 0908 	add.w	r9, r9, #8
 800a27a:	e7e0      	b.n	800a23e <_dtoa_r+0x36e>
 800a27c:	f000 809f 	beq.w	800a3be <_dtoa_r+0x4ee>
 800a280:	f1cb 0600 	rsb	r6, fp, #0
 800a284:	4ba1      	ldr	r3, [pc, #644]	; (800a50c <_dtoa_r+0x63c>)
 800a286:	4fa2      	ldr	r7, [pc, #648]	; (800a510 <_dtoa_r+0x640>)
 800a288:	f006 020f 	and.w	r2, r6, #15
 800a28c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	ec51 0b18 	vmov	r0, r1, d8
 800a298:	f7f6 f9c6 	bl	8000628 <__aeabi_dmul>
 800a29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2a0:	1136      	asrs	r6, r6, #4
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2502      	movs	r5, #2
 800a2a6:	2e00      	cmp	r6, #0
 800a2a8:	d17e      	bne.n	800a3a8 <_dtoa_r+0x4d8>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1d0      	bne.n	800a250 <_dtoa_r+0x380>
 800a2ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 8084 	beq.w	800a3c2 <_dtoa_r+0x4f2>
 800a2ba:	4b96      	ldr	r3, [pc, #600]	; (800a514 <_dtoa_r+0x644>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	f7f6 fc23 	bl	8000b0c <__aeabi_dcmplt>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d07b      	beq.n	800a3c2 <_dtoa_r+0x4f2>
 800a2ca:	9b04      	ldr	r3, [sp, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d078      	beq.n	800a3c2 <_dtoa_r+0x4f2>
 800a2d0:	9b01      	ldr	r3, [sp, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	dd39      	ble.n	800a34a <_dtoa_r+0x47a>
 800a2d6:	4b90      	ldr	r3, [pc, #576]	; (800a518 <_dtoa_r+0x648>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	f7f6 f9a3 	bl	8000628 <__aeabi_dmul>
 800a2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2e6:	9e01      	ldr	r6, [sp, #4]
 800a2e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a2ec:	3501      	adds	r5, #1
 800a2ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f7f6 f92e 	bl	8000554 <__aeabi_i2d>
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	f7f6 f994 	bl	8000628 <__aeabi_dmul>
 800a300:	4b86      	ldr	r3, [pc, #536]	; (800a51c <_dtoa_r+0x64c>)
 800a302:	2200      	movs	r2, #0
 800a304:	f7f5 ffda 	bl	80002bc <__adddf3>
 800a308:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a310:	9303      	str	r3, [sp, #12]
 800a312:	2e00      	cmp	r6, #0
 800a314:	d158      	bne.n	800a3c8 <_dtoa_r+0x4f8>
 800a316:	4b82      	ldr	r3, [pc, #520]	; (800a520 <_dtoa_r+0x650>)
 800a318:	2200      	movs	r2, #0
 800a31a:	4640      	mov	r0, r8
 800a31c:	4649      	mov	r1, r9
 800a31e:	f7f5 ffcb 	bl	80002b8 <__aeabi_dsub>
 800a322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a326:	4680      	mov	r8, r0
 800a328:	4689      	mov	r9, r1
 800a32a:	f7f6 fc0d 	bl	8000b48 <__aeabi_dcmpgt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f040 8296 	bne.w	800a860 <_dtoa_r+0x990>
 800a334:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a338:	4640      	mov	r0, r8
 800a33a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a33e:	4649      	mov	r1, r9
 800a340:	f7f6 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 8289 	bne.w	800a85c <_dtoa_r+0x98c>
 800a34a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a350:	2b00      	cmp	r3, #0
 800a352:	f2c0 814e 	blt.w	800a5f2 <_dtoa_r+0x722>
 800a356:	f1bb 0f0e 	cmp.w	fp, #14
 800a35a:	f300 814a 	bgt.w	800a5f2 <_dtoa_r+0x722>
 800a35e:	4b6b      	ldr	r3, [pc, #428]	; (800a50c <_dtoa_r+0x63c>)
 800a360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f280 80dc 	bge.w	800a528 <_dtoa_r+0x658>
 800a370:	9b04      	ldr	r3, [sp, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f300 80d8 	bgt.w	800a528 <_dtoa_r+0x658>
 800a378:	f040 826f 	bne.w	800a85a <_dtoa_r+0x98a>
 800a37c:	4b68      	ldr	r3, [pc, #416]	; (800a520 <_dtoa_r+0x650>)
 800a37e:	2200      	movs	r2, #0
 800a380:	4640      	mov	r0, r8
 800a382:	4649      	mov	r1, r9
 800a384:	f7f6 f950 	bl	8000628 <__aeabi_dmul>
 800a388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a38c:	f7f6 fbd2 	bl	8000b34 <__aeabi_dcmpge>
 800a390:	9e04      	ldr	r6, [sp, #16]
 800a392:	4637      	mov	r7, r6
 800a394:	2800      	cmp	r0, #0
 800a396:	f040 8245 	bne.w	800a824 <_dtoa_r+0x954>
 800a39a:	9d00      	ldr	r5, [sp, #0]
 800a39c:	2331      	movs	r3, #49	; 0x31
 800a39e:	f805 3b01 	strb.w	r3, [r5], #1
 800a3a2:	f10b 0b01 	add.w	fp, fp, #1
 800a3a6:	e241      	b.n	800a82c <_dtoa_r+0x95c>
 800a3a8:	07f2      	lsls	r2, r6, #31
 800a3aa:	d505      	bpl.n	800a3b8 <_dtoa_r+0x4e8>
 800a3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b0:	f7f6 f93a 	bl	8000628 <__aeabi_dmul>
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	1076      	asrs	r6, r6, #1
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	e773      	b.n	800a2a6 <_dtoa_r+0x3d6>
 800a3be:	2502      	movs	r5, #2
 800a3c0:	e775      	b.n	800a2ae <_dtoa_r+0x3de>
 800a3c2:	9e04      	ldr	r6, [sp, #16]
 800a3c4:	465f      	mov	r7, fp
 800a3c6:	e792      	b.n	800a2ee <_dtoa_r+0x41e>
 800a3c8:	9900      	ldr	r1, [sp, #0]
 800a3ca:	4b50      	ldr	r3, [pc, #320]	; (800a50c <_dtoa_r+0x63c>)
 800a3cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3d0:	4431      	add	r1, r6
 800a3d2:	9102      	str	r1, [sp, #8]
 800a3d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3d6:	eeb0 9a47 	vmov.f32	s18, s14
 800a3da:	eef0 9a67 	vmov.f32	s19, s15
 800a3de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	d044      	beq.n	800a474 <_dtoa_r+0x5a4>
 800a3ea:	494e      	ldr	r1, [pc, #312]	; (800a524 <_dtoa_r+0x654>)
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f7f6 fa45 	bl	800087c <__aeabi_ddiv>
 800a3f2:	ec53 2b19 	vmov	r2, r3, d9
 800a3f6:	f7f5 ff5f 	bl	80002b8 <__aeabi_dsub>
 800a3fa:	9d00      	ldr	r5, [sp, #0]
 800a3fc:	ec41 0b19 	vmov	d9, r0, r1
 800a400:	4649      	mov	r1, r9
 800a402:	4640      	mov	r0, r8
 800a404:	f7f6 fbc0 	bl	8000b88 <__aeabi_d2iz>
 800a408:	4606      	mov	r6, r0
 800a40a:	f7f6 f8a3 	bl	8000554 <__aeabi_i2d>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f5 ff4f 	bl	80002b8 <__aeabi_dsub>
 800a41a:	3630      	adds	r6, #48	; 0x30
 800a41c:	f805 6b01 	strb.w	r6, [r5], #1
 800a420:	ec53 2b19 	vmov	r2, r3, d9
 800a424:	4680      	mov	r8, r0
 800a426:	4689      	mov	r9, r1
 800a428:	f7f6 fb70 	bl	8000b0c <__aeabi_dcmplt>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d164      	bne.n	800a4fa <_dtoa_r+0x62a>
 800a430:	4642      	mov	r2, r8
 800a432:	464b      	mov	r3, r9
 800a434:	4937      	ldr	r1, [pc, #220]	; (800a514 <_dtoa_r+0x644>)
 800a436:	2000      	movs	r0, #0
 800a438:	f7f5 ff3e 	bl	80002b8 <__aeabi_dsub>
 800a43c:	ec53 2b19 	vmov	r2, r3, d9
 800a440:	f7f6 fb64 	bl	8000b0c <__aeabi_dcmplt>
 800a444:	2800      	cmp	r0, #0
 800a446:	f040 80b6 	bne.w	800a5b6 <_dtoa_r+0x6e6>
 800a44a:	9b02      	ldr	r3, [sp, #8]
 800a44c:	429d      	cmp	r5, r3
 800a44e:	f43f af7c 	beq.w	800a34a <_dtoa_r+0x47a>
 800a452:	4b31      	ldr	r3, [pc, #196]	; (800a518 <_dtoa_r+0x648>)
 800a454:	ec51 0b19 	vmov	r0, r1, d9
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f6 f8e5 	bl	8000628 <__aeabi_dmul>
 800a45e:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <_dtoa_r+0x648>)
 800a460:	ec41 0b19 	vmov	d9, r0, r1
 800a464:	2200      	movs	r2, #0
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f8dd 	bl	8000628 <__aeabi_dmul>
 800a46e:	4680      	mov	r8, r0
 800a470:	4689      	mov	r9, r1
 800a472:	e7c5      	b.n	800a400 <_dtoa_r+0x530>
 800a474:	ec51 0b17 	vmov	r0, r1, d7
 800a478:	f7f6 f8d6 	bl	8000628 <__aeabi_dmul>
 800a47c:	9b02      	ldr	r3, [sp, #8]
 800a47e:	9d00      	ldr	r5, [sp, #0]
 800a480:	930f      	str	r3, [sp, #60]	; 0x3c
 800a482:	ec41 0b19 	vmov	d9, r0, r1
 800a486:	4649      	mov	r1, r9
 800a488:	4640      	mov	r0, r8
 800a48a:	f7f6 fb7d 	bl	8000b88 <__aeabi_d2iz>
 800a48e:	4606      	mov	r6, r0
 800a490:	f7f6 f860 	bl	8000554 <__aeabi_i2d>
 800a494:	3630      	adds	r6, #48	; 0x30
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	f7f5 ff0b 	bl	80002b8 <__aeabi_dsub>
 800a4a2:	f805 6b01 	strb.w	r6, [r5], #1
 800a4a6:	9b02      	ldr	r3, [sp, #8]
 800a4a8:	429d      	cmp	r5, r3
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4689      	mov	r9, r1
 800a4ae:	f04f 0200 	mov.w	r2, #0
 800a4b2:	d124      	bne.n	800a4fe <_dtoa_r+0x62e>
 800a4b4:	4b1b      	ldr	r3, [pc, #108]	; (800a524 <_dtoa_r+0x654>)
 800a4b6:	ec51 0b19 	vmov	r0, r1, d9
 800a4ba:	f7f5 feff 	bl	80002bc <__adddf3>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	f7f6 fb3f 	bl	8000b48 <__aeabi_dcmpgt>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d173      	bne.n	800a5b6 <_dtoa_r+0x6e6>
 800a4ce:	ec53 2b19 	vmov	r2, r3, d9
 800a4d2:	4914      	ldr	r1, [pc, #80]	; (800a524 <_dtoa_r+0x654>)
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	f7f5 feef 	bl	80002b8 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	f7f6 fb13 	bl	8000b0c <__aeabi_dcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	f43f af2f 	beq.w	800a34a <_dtoa_r+0x47a>
 800a4ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4ee:	1e6b      	subs	r3, r5, #1
 800a4f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4f6:	2b30      	cmp	r3, #48	; 0x30
 800a4f8:	d0f8      	beq.n	800a4ec <_dtoa_r+0x61c>
 800a4fa:	46bb      	mov	fp, r7
 800a4fc:	e04a      	b.n	800a594 <_dtoa_r+0x6c4>
 800a4fe:	4b06      	ldr	r3, [pc, #24]	; (800a518 <_dtoa_r+0x648>)
 800a500:	f7f6 f892 	bl	8000628 <__aeabi_dmul>
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	e7bd      	b.n	800a486 <_dtoa_r+0x5b6>
 800a50a:	bf00      	nop
 800a50c:	0800d570 	.word	0x0800d570
 800a510:	0800d548 	.word	0x0800d548
 800a514:	3ff00000 	.word	0x3ff00000
 800a518:	40240000 	.word	0x40240000
 800a51c:	401c0000 	.word	0x401c0000
 800a520:	40140000 	.word	0x40140000
 800a524:	3fe00000 	.word	0x3fe00000
 800a528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a52c:	9d00      	ldr	r5, [sp, #0]
 800a52e:	4642      	mov	r2, r8
 800a530:	464b      	mov	r3, r9
 800a532:	4630      	mov	r0, r6
 800a534:	4639      	mov	r1, r7
 800a536:	f7f6 f9a1 	bl	800087c <__aeabi_ddiv>
 800a53a:	f7f6 fb25 	bl	8000b88 <__aeabi_d2iz>
 800a53e:	9001      	str	r0, [sp, #4]
 800a540:	f7f6 f808 	bl	8000554 <__aeabi_i2d>
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	f7f6 f86e 	bl	8000628 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f5 feb0 	bl	80002b8 <__aeabi_dsub>
 800a558:	9e01      	ldr	r6, [sp, #4]
 800a55a:	9f04      	ldr	r7, [sp, #16]
 800a55c:	3630      	adds	r6, #48	; 0x30
 800a55e:	f805 6b01 	strb.w	r6, [r5], #1
 800a562:	9e00      	ldr	r6, [sp, #0]
 800a564:	1bae      	subs	r6, r5, r6
 800a566:	42b7      	cmp	r7, r6
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	d134      	bne.n	800a5d8 <_dtoa_r+0x708>
 800a56e:	f7f5 fea5 	bl	80002bc <__adddf3>
 800a572:	4642      	mov	r2, r8
 800a574:	464b      	mov	r3, r9
 800a576:	4606      	mov	r6, r0
 800a578:	460f      	mov	r7, r1
 800a57a:	f7f6 fae5 	bl	8000b48 <__aeabi_dcmpgt>
 800a57e:	b9c8      	cbnz	r0, 800a5b4 <_dtoa_r+0x6e4>
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 fab6 	bl	8000af8 <__aeabi_dcmpeq>
 800a58c:	b110      	cbz	r0, 800a594 <_dtoa_r+0x6c4>
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	07db      	lsls	r3, r3, #31
 800a592:	d40f      	bmi.n	800a5b4 <_dtoa_r+0x6e4>
 800a594:	4651      	mov	r1, sl
 800a596:	4620      	mov	r0, r4
 800a598:	f000 ff36 	bl	800b408 <_Bfree>
 800a59c:	2300      	movs	r3, #0
 800a59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5a0:	702b      	strb	r3, [r5, #0]
 800a5a2:	f10b 0301 	add.w	r3, fp, #1
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f43f ace2 	beq.w	8009f74 <_dtoa_r+0xa4>
 800a5b0:	601d      	str	r5, [r3, #0]
 800a5b2:	e4df      	b.n	8009f74 <_dtoa_r+0xa4>
 800a5b4:	465f      	mov	r7, fp
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	461d      	mov	r5, r3
 800a5ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5be:	2a39      	cmp	r2, #57	; 0x39
 800a5c0:	d106      	bne.n	800a5d0 <_dtoa_r+0x700>
 800a5c2:	9a00      	ldr	r2, [sp, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d1f7      	bne.n	800a5b8 <_dtoa_r+0x6e8>
 800a5c8:	9900      	ldr	r1, [sp, #0]
 800a5ca:	2230      	movs	r2, #48	; 0x30
 800a5cc:	3701      	adds	r7, #1
 800a5ce:	700a      	strb	r2, [r1, #0]
 800a5d0:	781a      	ldrb	r2, [r3, #0]
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e790      	b.n	800a4fa <_dtoa_r+0x62a>
 800a5d8:	4ba3      	ldr	r3, [pc, #652]	; (800a868 <_dtoa_r+0x998>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f7f6 f824 	bl	8000628 <__aeabi_dmul>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	460f      	mov	r7, r1
 800a5e8:	f7f6 fa86 	bl	8000af8 <__aeabi_dcmpeq>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d09e      	beq.n	800a52e <_dtoa_r+0x65e>
 800a5f0:	e7d0      	b.n	800a594 <_dtoa_r+0x6c4>
 800a5f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	f000 80ca 	beq.w	800a78e <_dtoa_r+0x8be>
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	2a01      	cmp	r2, #1
 800a5fe:	f300 80ad 	bgt.w	800a75c <_dtoa_r+0x88c>
 800a602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a604:	2a00      	cmp	r2, #0
 800a606:	f000 80a5 	beq.w	800a754 <_dtoa_r+0x884>
 800a60a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a60e:	9e08      	ldr	r6, [sp, #32]
 800a610:	9d05      	ldr	r5, [sp, #20]
 800a612:	9a05      	ldr	r2, [sp, #20]
 800a614:	441a      	add	r2, r3
 800a616:	9205      	str	r2, [sp, #20]
 800a618:	9a06      	ldr	r2, [sp, #24]
 800a61a:	2101      	movs	r1, #1
 800a61c:	441a      	add	r2, r3
 800a61e:	4620      	mov	r0, r4
 800a620:	9206      	str	r2, [sp, #24]
 800a622:	f000 fff1 	bl	800b608 <__i2b>
 800a626:	4607      	mov	r7, r0
 800a628:	b165      	cbz	r5, 800a644 <_dtoa_r+0x774>
 800a62a:	9b06      	ldr	r3, [sp, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dd09      	ble.n	800a644 <_dtoa_r+0x774>
 800a630:	42ab      	cmp	r3, r5
 800a632:	9a05      	ldr	r2, [sp, #20]
 800a634:	bfa8      	it	ge
 800a636:	462b      	movge	r3, r5
 800a638:	1ad2      	subs	r2, r2, r3
 800a63a:	9205      	str	r2, [sp, #20]
 800a63c:	9a06      	ldr	r2, [sp, #24]
 800a63e:	1aed      	subs	r5, r5, r3
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	9306      	str	r3, [sp, #24]
 800a644:	9b08      	ldr	r3, [sp, #32]
 800a646:	b1f3      	cbz	r3, 800a686 <_dtoa_r+0x7b6>
 800a648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80a3 	beq.w	800a796 <_dtoa_r+0x8c6>
 800a650:	2e00      	cmp	r6, #0
 800a652:	dd10      	ble.n	800a676 <_dtoa_r+0x7a6>
 800a654:	4639      	mov	r1, r7
 800a656:	4632      	mov	r2, r6
 800a658:	4620      	mov	r0, r4
 800a65a:	f001 f895 	bl	800b788 <__pow5mult>
 800a65e:	4652      	mov	r2, sl
 800a660:	4601      	mov	r1, r0
 800a662:	4607      	mov	r7, r0
 800a664:	4620      	mov	r0, r4
 800a666:	f000 ffe5 	bl	800b634 <__multiply>
 800a66a:	4651      	mov	r1, sl
 800a66c:	4680      	mov	r8, r0
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 feca 	bl	800b408 <_Bfree>
 800a674:	46c2      	mov	sl, r8
 800a676:	9b08      	ldr	r3, [sp, #32]
 800a678:	1b9a      	subs	r2, r3, r6
 800a67a:	d004      	beq.n	800a686 <_dtoa_r+0x7b6>
 800a67c:	4651      	mov	r1, sl
 800a67e:	4620      	mov	r0, r4
 800a680:	f001 f882 	bl	800b788 <__pow5mult>
 800a684:	4682      	mov	sl, r0
 800a686:	2101      	movs	r1, #1
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 ffbd 	bl	800b608 <__i2b>
 800a68e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a690:	2b00      	cmp	r3, #0
 800a692:	4606      	mov	r6, r0
 800a694:	f340 8081 	ble.w	800a79a <_dtoa_r+0x8ca>
 800a698:	461a      	mov	r2, r3
 800a69a:	4601      	mov	r1, r0
 800a69c:	4620      	mov	r0, r4
 800a69e:	f001 f873 	bl	800b788 <__pow5mult>
 800a6a2:	9b07      	ldr	r3, [sp, #28]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	dd7a      	ble.n	800a7a0 <_dtoa_r+0x8d0>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	6933      	ldr	r3, [r6, #16]
 800a6b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6b4:	6918      	ldr	r0, [r3, #16]
 800a6b6:	f000 ff59 	bl	800b56c <__hi0bits>
 800a6ba:	f1c0 0020 	rsb	r0, r0, #32
 800a6be:	9b06      	ldr	r3, [sp, #24]
 800a6c0:	4418      	add	r0, r3
 800a6c2:	f010 001f 	ands.w	r0, r0, #31
 800a6c6:	f000 8094 	beq.w	800a7f2 <_dtoa_r+0x922>
 800a6ca:	f1c0 0320 	rsb	r3, r0, #32
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	f340 8085 	ble.w	800a7de <_dtoa_r+0x90e>
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	f1c0 001c 	rsb	r0, r0, #28
 800a6da:	4403      	add	r3, r0
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	9b06      	ldr	r3, [sp, #24]
 800a6e0:	4403      	add	r3, r0
 800a6e2:	4405      	add	r5, r0
 800a6e4:	9306      	str	r3, [sp, #24]
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	dd05      	ble.n	800a6f8 <_dtoa_r+0x828>
 800a6ec:	4651      	mov	r1, sl
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f001 f8a3 	bl	800b83c <__lshift>
 800a6f6:	4682      	mov	sl, r0
 800a6f8:	9b06      	ldr	r3, [sp, #24]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dd05      	ble.n	800a70a <_dtoa_r+0x83a>
 800a6fe:	4631      	mov	r1, r6
 800a700:	461a      	mov	r2, r3
 800a702:	4620      	mov	r0, r4
 800a704:	f001 f89a 	bl	800b83c <__lshift>
 800a708:	4606      	mov	r6, r0
 800a70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d072      	beq.n	800a7f6 <_dtoa_r+0x926>
 800a710:	4631      	mov	r1, r6
 800a712:	4650      	mov	r0, sl
 800a714:	f001 f8fe 	bl	800b914 <__mcmp>
 800a718:	2800      	cmp	r0, #0
 800a71a:	da6c      	bge.n	800a7f6 <_dtoa_r+0x926>
 800a71c:	2300      	movs	r3, #0
 800a71e:	4651      	mov	r1, sl
 800a720:	220a      	movs	r2, #10
 800a722:	4620      	mov	r0, r4
 800a724:	f000 fe92 	bl	800b44c <__multadd>
 800a728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a72e:	4682      	mov	sl, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 81b0 	beq.w	800aa96 <_dtoa_r+0xbc6>
 800a736:	2300      	movs	r3, #0
 800a738:	4639      	mov	r1, r7
 800a73a:	220a      	movs	r2, #10
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 fe85 	bl	800b44c <__multadd>
 800a742:	9b01      	ldr	r3, [sp, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	4607      	mov	r7, r0
 800a748:	f300 8096 	bgt.w	800a878 <_dtoa_r+0x9a8>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	dc59      	bgt.n	800a806 <_dtoa_r+0x936>
 800a752:	e091      	b.n	800a878 <_dtoa_r+0x9a8>
 800a754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a75a:	e758      	b.n	800a60e <_dtoa_r+0x73e>
 800a75c:	9b04      	ldr	r3, [sp, #16]
 800a75e:	1e5e      	subs	r6, r3, #1
 800a760:	9b08      	ldr	r3, [sp, #32]
 800a762:	42b3      	cmp	r3, r6
 800a764:	bfbf      	itttt	lt
 800a766:	9b08      	ldrlt	r3, [sp, #32]
 800a768:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a76a:	9608      	strlt	r6, [sp, #32]
 800a76c:	1af3      	sublt	r3, r6, r3
 800a76e:	bfb4      	ite	lt
 800a770:	18d2      	addlt	r2, r2, r3
 800a772:	1b9e      	subge	r6, r3, r6
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	bfbc      	itt	lt
 800a778:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a77a:	2600      	movlt	r6, #0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bfb7      	itett	lt
 800a780:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a784:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a788:	1a9d      	sublt	r5, r3, r2
 800a78a:	2300      	movlt	r3, #0
 800a78c:	e741      	b.n	800a612 <_dtoa_r+0x742>
 800a78e:	9e08      	ldr	r6, [sp, #32]
 800a790:	9d05      	ldr	r5, [sp, #20]
 800a792:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a794:	e748      	b.n	800a628 <_dtoa_r+0x758>
 800a796:	9a08      	ldr	r2, [sp, #32]
 800a798:	e770      	b.n	800a67c <_dtoa_r+0x7ac>
 800a79a:	9b07      	ldr	r3, [sp, #28]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	dc19      	bgt.n	800a7d4 <_dtoa_r+0x904>
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	b9bb      	cbnz	r3, 800a7d4 <_dtoa_r+0x904>
 800a7a4:	9b03      	ldr	r3, [sp, #12]
 800a7a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7aa:	b99b      	cbnz	r3, 800a7d4 <_dtoa_r+0x904>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7b2:	0d1b      	lsrs	r3, r3, #20
 800a7b4:	051b      	lsls	r3, r3, #20
 800a7b6:	b183      	cbz	r3, 800a7da <_dtoa_r+0x90a>
 800a7b8:	9b05      	ldr	r3, [sp, #20]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	9b06      	ldr	r3, [sp, #24]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	9306      	str	r3, [sp, #24]
 800a7c4:	f04f 0801 	mov.w	r8, #1
 800a7c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f47f af6f 	bne.w	800a6ae <_dtoa_r+0x7de>
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	e774      	b.n	800a6be <_dtoa_r+0x7ee>
 800a7d4:	f04f 0800 	mov.w	r8, #0
 800a7d8:	e7f6      	b.n	800a7c8 <_dtoa_r+0x8f8>
 800a7da:	4698      	mov	r8, r3
 800a7dc:	e7f4      	b.n	800a7c8 <_dtoa_r+0x8f8>
 800a7de:	d082      	beq.n	800a6e6 <_dtoa_r+0x816>
 800a7e0:	9a05      	ldr	r2, [sp, #20]
 800a7e2:	331c      	adds	r3, #28
 800a7e4:	441a      	add	r2, r3
 800a7e6:	9205      	str	r2, [sp, #20]
 800a7e8:	9a06      	ldr	r2, [sp, #24]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	441d      	add	r5, r3
 800a7ee:	9206      	str	r2, [sp, #24]
 800a7f0:	e779      	b.n	800a6e6 <_dtoa_r+0x816>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	e7f4      	b.n	800a7e0 <_dtoa_r+0x910>
 800a7f6:	9b04      	ldr	r3, [sp, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc37      	bgt.n	800a86c <_dtoa_r+0x99c>
 800a7fc:	9b07      	ldr	r3, [sp, #28]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	dd34      	ble.n	800a86c <_dtoa_r+0x99c>
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	b963      	cbnz	r3, 800a824 <_dtoa_r+0x954>
 800a80a:	4631      	mov	r1, r6
 800a80c:	2205      	movs	r2, #5
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 fe1c 	bl	800b44c <__multadd>
 800a814:	4601      	mov	r1, r0
 800a816:	4606      	mov	r6, r0
 800a818:	4650      	mov	r0, sl
 800a81a:	f001 f87b 	bl	800b914 <__mcmp>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f73f adbb 	bgt.w	800a39a <_dtoa_r+0x4ca>
 800a824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a826:	9d00      	ldr	r5, [sp, #0]
 800a828:	ea6f 0b03 	mvn.w	fp, r3
 800a82c:	f04f 0800 	mov.w	r8, #0
 800a830:	4631      	mov	r1, r6
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fde8 	bl	800b408 <_Bfree>
 800a838:	2f00      	cmp	r7, #0
 800a83a:	f43f aeab 	beq.w	800a594 <_dtoa_r+0x6c4>
 800a83e:	f1b8 0f00 	cmp.w	r8, #0
 800a842:	d005      	beq.n	800a850 <_dtoa_r+0x980>
 800a844:	45b8      	cmp	r8, r7
 800a846:	d003      	beq.n	800a850 <_dtoa_r+0x980>
 800a848:	4641      	mov	r1, r8
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fddc 	bl	800b408 <_Bfree>
 800a850:	4639      	mov	r1, r7
 800a852:	4620      	mov	r0, r4
 800a854:	f000 fdd8 	bl	800b408 <_Bfree>
 800a858:	e69c      	b.n	800a594 <_dtoa_r+0x6c4>
 800a85a:	2600      	movs	r6, #0
 800a85c:	4637      	mov	r7, r6
 800a85e:	e7e1      	b.n	800a824 <_dtoa_r+0x954>
 800a860:	46bb      	mov	fp, r7
 800a862:	4637      	mov	r7, r6
 800a864:	e599      	b.n	800a39a <_dtoa_r+0x4ca>
 800a866:	bf00      	nop
 800a868:	40240000 	.word	0x40240000
 800a86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f000 80c8 	beq.w	800aa04 <_dtoa_r+0xb34>
 800a874:	9b04      	ldr	r3, [sp, #16]
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	2d00      	cmp	r5, #0
 800a87a:	dd05      	ble.n	800a888 <_dtoa_r+0x9b8>
 800a87c:	4639      	mov	r1, r7
 800a87e:	462a      	mov	r2, r5
 800a880:	4620      	mov	r0, r4
 800a882:	f000 ffdb 	bl	800b83c <__lshift>
 800a886:	4607      	mov	r7, r0
 800a888:	f1b8 0f00 	cmp.w	r8, #0
 800a88c:	d05b      	beq.n	800a946 <_dtoa_r+0xa76>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fd79 	bl	800b388 <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <_dtoa_r+0x9d6>
 800a89a:	4b83      	ldr	r3, [pc, #524]	; (800aaa8 <_dtoa_r+0xbd8>)
 800a89c:	4602      	mov	r2, r0
 800a89e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a8a2:	f7ff bb2e 	b.w	8009f02 <_dtoa_r+0x32>
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	3202      	adds	r2, #2
 800a8aa:	0092      	lsls	r2, r2, #2
 800a8ac:	f107 010c 	add.w	r1, r7, #12
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f7ff fa66 	bl	8009d82 <memcpy>
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 ffbe 	bl	800b83c <__lshift>
 800a8c0:	9b00      	ldr	r3, [sp, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	9308      	str	r3, [sp, #32]
 800a8ce:	9b02      	ldr	r3, [sp, #8]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	46b8      	mov	r8, r7
 800a8d6:	9306      	str	r3, [sp, #24]
 800a8d8:	4607      	mov	r7, r0
 800a8da:	9b04      	ldr	r3, [sp, #16]
 800a8dc:	4631      	mov	r1, r6
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	4650      	mov	r0, sl
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	f7ff fa6a 	bl	8009dbc <quorem>
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	9002      	str	r0, [sp, #8]
 800a8ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8f0:	4650      	mov	r0, sl
 800a8f2:	f001 f80f 	bl	800b914 <__mcmp>
 800a8f6:	463a      	mov	r2, r7
 800a8f8:	9005      	str	r0, [sp, #20]
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f001 f825 	bl	800b94c <__mdiff>
 800a902:	68c2      	ldr	r2, [r0, #12]
 800a904:	4605      	mov	r5, r0
 800a906:	bb02      	cbnz	r2, 800a94a <_dtoa_r+0xa7a>
 800a908:	4601      	mov	r1, r0
 800a90a:	4650      	mov	r0, sl
 800a90c:	f001 f802 	bl	800b914 <__mcmp>
 800a910:	4602      	mov	r2, r0
 800a912:	4629      	mov	r1, r5
 800a914:	4620      	mov	r0, r4
 800a916:	9209      	str	r2, [sp, #36]	; 0x24
 800a918:	f000 fd76 	bl	800b408 <_Bfree>
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a920:	9d04      	ldr	r5, [sp, #16]
 800a922:	ea43 0102 	orr.w	r1, r3, r2
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	4319      	orrs	r1, r3
 800a92a:	d110      	bne.n	800a94e <_dtoa_r+0xa7e>
 800a92c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a930:	d029      	beq.n	800a986 <_dtoa_r+0xab6>
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	dd02      	ble.n	800a93e <_dtoa_r+0xa6e>
 800a938:	9b02      	ldr	r3, [sp, #8]
 800a93a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	f883 9000 	strb.w	r9, [r3]
 800a944:	e774      	b.n	800a830 <_dtoa_r+0x960>
 800a946:	4638      	mov	r0, r7
 800a948:	e7ba      	b.n	800a8c0 <_dtoa_r+0x9f0>
 800a94a:	2201      	movs	r2, #1
 800a94c:	e7e1      	b.n	800a912 <_dtoa_r+0xa42>
 800a94e:	9b05      	ldr	r3, [sp, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	db04      	blt.n	800a95e <_dtoa_r+0xa8e>
 800a954:	9907      	ldr	r1, [sp, #28]
 800a956:	430b      	orrs	r3, r1
 800a958:	9906      	ldr	r1, [sp, #24]
 800a95a:	430b      	orrs	r3, r1
 800a95c:	d120      	bne.n	800a9a0 <_dtoa_r+0xad0>
 800a95e:	2a00      	cmp	r2, #0
 800a960:	dded      	ble.n	800a93e <_dtoa_r+0xa6e>
 800a962:	4651      	mov	r1, sl
 800a964:	2201      	movs	r2, #1
 800a966:	4620      	mov	r0, r4
 800a968:	f000 ff68 	bl	800b83c <__lshift>
 800a96c:	4631      	mov	r1, r6
 800a96e:	4682      	mov	sl, r0
 800a970:	f000 ffd0 	bl	800b914 <__mcmp>
 800a974:	2800      	cmp	r0, #0
 800a976:	dc03      	bgt.n	800a980 <_dtoa_r+0xab0>
 800a978:	d1e1      	bne.n	800a93e <_dtoa_r+0xa6e>
 800a97a:	f019 0f01 	tst.w	r9, #1
 800a97e:	d0de      	beq.n	800a93e <_dtoa_r+0xa6e>
 800a980:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a984:	d1d8      	bne.n	800a938 <_dtoa_r+0xa68>
 800a986:	9a01      	ldr	r2, [sp, #4]
 800a988:	2339      	movs	r3, #57	; 0x39
 800a98a:	7013      	strb	r3, [r2, #0]
 800a98c:	462b      	mov	r3, r5
 800a98e:	461d      	mov	r5, r3
 800a990:	3b01      	subs	r3, #1
 800a992:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a996:	2a39      	cmp	r2, #57	; 0x39
 800a998:	d06c      	beq.n	800aa74 <_dtoa_r+0xba4>
 800a99a:	3201      	adds	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	e747      	b.n	800a830 <_dtoa_r+0x960>
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	dd07      	ble.n	800a9b4 <_dtoa_r+0xae4>
 800a9a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9a8:	d0ed      	beq.n	800a986 <_dtoa_r+0xab6>
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	f109 0301 	add.w	r3, r9, #1
 800a9b0:	7013      	strb	r3, [r2, #0]
 800a9b2:	e73d      	b.n	800a830 <_dtoa_r+0x960>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	9a08      	ldr	r2, [sp, #32]
 800a9b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d043      	beq.n	800aa48 <_dtoa_r+0xb78>
 800a9c0:	4651      	mov	r1, sl
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	220a      	movs	r2, #10
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fd40 	bl	800b44c <__multadd>
 800a9cc:	45b8      	cmp	r8, r7
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	f04f 0300 	mov.w	r3, #0
 800a9d4:	f04f 020a 	mov.w	r2, #10
 800a9d8:	4641      	mov	r1, r8
 800a9da:	4620      	mov	r0, r4
 800a9dc:	d107      	bne.n	800a9ee <_dtoa_r+0xb1e>
 800a9de:	f000 fd35 	bl	800b44c <__multadd>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	e775      	b.n	800a8da <_dtoa_r+0xa0a>
 800a9ee:	f000 fd2d 	bl	800b44c <__multadd>
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	220a      	movs	r2, #10
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fd26 	bl	800b44c <__multadd>
 800aa00:	4607      	mov	r7, r0
 800aa02:	e7f0      	b.n	800a9e6 <_dtoa_r+0xb16>
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	9d00      	ldr	r5, [sp, #0]
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4650      	mov	r0, sl
 800aa0e:	f7ff f9d5 	bl	8009dbc <quorem>
 800aa12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	f805 9b01 	strb.w	r9, [r5], #1
 800aa1c:	1aea      	subs	r2, r5, r3
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	dd07      	ble.n	800aa34 <_dtoa_r+0xb64>
 800aa24:	4651      	mov	r1, sl
 800aa26:	2300      	movs	r3, #0
 800aa28:	220a      	movs	r2, #10
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 fd0e 	bl	800b44c <__multadd>
 800aa30:	4682      	mov	sl, r0
 800aa32:	e7ea      	b.n	800aa0a <_dtoa_r+0xb3a>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	bfc8      	it	gt
 800aa3a:	461d      	movgt	r5, r3
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	bfd8      	it	le
 800aa40:	2501      	movle	r5, #1
 800aa42:	441d      	add	r5, r3
 800aa44:	f04f 0800 	mov.w	r8, #0
 800aa48:	4651      	mov	r1, sl
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fef5 	bl	800b83c <__lshift>
 800aa52:	4631      	mov	r1, r6
 800aa54:	4682      	mov	sl, r0
 800aa56:	f000 ff5d 	bl	800b914 <__mcmp>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	dc96      	bgt.n	800a98c <_dtoa_r+0xabc>
 800aa5e:	d102      	bne.n	800aa66 <_dtoa_r+0xb96>
 800aa60:	f019 0f01 	tst.w	r9, #1
 800aa64:	d192      	bne.n	800a98c <_dtoa_r+0xabc>
 800aa66:	462b      	mov	r3, r5
 800aa68:	461d      	mov	r5, r3
 800aa6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa6e:	2a30      	cmp	r2, #48	; 0x30
 800aa70:	d0fa      	beq.n	800aa68 <_dtoa_r+0xb98>
 800aa72:	e6dd      	b.n	800a830 <_dtoa_r+0x960>
 800aa74:	9a00      	ldr	r2, [sp, #0]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d189      	bne.n	800a98e <_dtoa_r+0xabe>
 800aa7a:	f10b 0b01 	add.w	fp, fp, #1
 800aa7e:	2331      	movs	r3, #49	; 0x31
 800aa80:	e796      	b.n	800a9b0 <_dtoa_r+0xae0>
 800aa82:	4b0a      	ldr	r3, [pc, #40]	; (800aaac <_dtoa_r+0xbdc>)
 800aa84:	f7ff ba99 	b.w	8009fba <_dtoa_r+0xea>
 800aa88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f47f aa6d 	bne.w	8009f6a <_dtoa_r+0x9a>
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <_dtoa_r+0xbe0>)
 800aa92:	f7ff ba92 	b.w	8009fba <_dtoa_r+0xea>
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dcb5      	bgt.n	800aa08 <_dtoa_r+0xb38>
 800aa9c:	9b07      	ldr	r3, [sp, #28]
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	f73f aeb1 	bgt.w	800a806 <_dtoa_r+0x936>
 800aaa4:	e7b0      	b.n	800aa08 <_dtoa_r+0xb38>
 800aaa6:	bf00      	nop
 800aaa8:	0800d47e 	.word	0x0800d47e
 800aaac:	0800d3d1 	.word	0x0800d3d1
 800aab0:	0800d402 	.word	0x0800d402

0800aab4 <_free_r>:
 800aab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aab6:	2900      	cmp	r1, #0
 800aab8:	d044      	beq.n	800ab44 <_free_r+0x90>
 800aaba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aabe:	9001      	str	r0, [sp, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f1a1 0404 	sub.w	r4, r1, #4
 800aac6:	bfb8      	it	lt
 800aac8:	18e4      	addlt	r4, r4, r3
 800aaca:	f000 fc51 	bl	800b370 <__malloc_lock>
 800aace:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <_free_r+0x94>)
 800aad0:	9801      	ldr	r0, [sp, #4]
 800aad2:	6813      	ldr	r3, [r2, #0]
 800aad4:	b933      	cbnz	r3, 800aae4 <_free_r+0x30>
 800aad6:	6063      	str	r3, [r4, #4]
 800aad8:	6014      	str	r4, [r2, #0]
 800aada:	b003      	add	sp, #12
 800aadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aae0:	f000 bc4c 	b.w	800b37c <__malloc_unlock>
 800aae4:	42a3      	cmp	r3, r4
 800aae6:	d908      	bls.n	800aafa <_free_r+0x46>
 800aae8:	6825      	ldr	r5, [r4, #0]
 800aaea:	1961      	adds	r1, r4, r5
 800aaec:	428b      	cmp	r3, r1
 800aaee:	bf01      	itttt	eq
 800aaf0:	6819      	ldreq	r1, [r3, #0]
 800aaf2:	685b      	ldreq	r3, [r3, #4]
 800aaf4:	1949      	addeq	r1, r1, r5
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	e7ed      	b.n	800aad6 <_free_r+0x22>
 800aafa:	461a      	mov	r2, r3
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	b10b      	cbz	r3, 800ab04 <_free_r+0x50>
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	d9fa      	bls.n	800aafa <_free_r+0x46>
 800ab04:	6811      	ldr	r1, [r2, #0]
 800ab06:	1855      	adds	r5, r2, r1
 800ab08:	42a5      	cmp	r5, r4
 800ab0a:	d10b      	bne.n	800ab24 <_free_r+0x70>
 800ab0c:	6824      	ldr	r4, [r4, #0]
 800ab0e:	4421      	add	r1, r4
 800ab10:	1854      	adds	r4, r2, r1
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	6011      	str	r1, [r2, #0]
 800ab16:	d1e0      	bne.n	800aada <_free_r+0x26>
 800ab18:	681c      	ldr	r4, [r3, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	6053      	str	r3, [r2, #4]
 800ab1e:	440c      	add	r4, r1
 800ab20:	6014      	str	r4, [r2, #0]
 800ab22:	e7da      	b.n	800aada <_free_r+0x26>
 800ab24:	d902      	bls.n	800ab2c <_free_r+0x78>
 800ab26:	230c      	movs	r3, #12
 800ab28:	6003      	str	r3, [r0, #0]
 800ab2a:	e7d6      	b.n	800aada <_free_r+0x26>
 800ab2c:	6825      	ldr	r5, [r4, #0]
 800ab2e:	1961      	adds	r1, r4, r5
 800ab30:	428b      	cmp	r3, r1
 800ab32:	bf04      	itt	eq
 800ab34:	6819      	ldreq	r1, [r3, #0]
 800ab36:	685b      	ldreq	r3, [r3, #4]
 800ab38:	6063      	str	r3, [r4, #4]
 800ab3a:	bf04      	itt	eq
 800ab3c:	1949      	addeq	r1, r1, r5
 800ab3e:	6021      	streq	r1, [r4, #0]
 800ab40:	6054      	str	r4, [r2, #4]
 800ab42:	e7ca      	b.n	800aada <_free_r+0x26>
 800ab44:	b003      	add	sp, #12
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	20004820 	.word	0x20004820

0800ab4c <rshift>:
 800ab4c:	6903      	ldr	r3, [r0, #16]
 800ab4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab5a:	f100 0414 	add.w	r4, r0, #20
 800ab5e:	dd45      	ble.n	800abec <rshift+0xa0>
 800ab60:	f011 011f 	ands.w	r1, r1, #31
 800ab64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab6c:	d10c      	bne.n	800ab88 <rshift+0x3c>
 800ab6e:	f100 0710 	add.w	r7, r0, #16
 800ab72:	4629      	mov	r1, r5
 800ab74:	42b1      	cmp	r1, r6
 800ab76:	d334      	bcc.n	800abe2 <rshift+0x96>
 800ab78:	1a9b      	subs	r3, r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	1eea      	subs	r2, r5, #3
 800ab7e:	4296      	cmp	r6, r2
 800ab80:	bf38      	it	cc
 800ab82:	2300      	movcc	r3, #0
 800ab84:	4423      	add	r3, r4
 800ab86:	e015      	b.n	800abb4 <rshift+0x68>
 800ab88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab8c:	f1c1 0820 	rsb	r8, r1, #32
 800ab90:	40cf      	lsrs	r7, r1
 800ab92:	f105 0e04 	add.w	lr, r5, #4
 800ab96:	46a1      	mov	r9, r4
 800ab98:	4576      	cmp	r6, lr
 800ab9a:	46f4      	mov	ip, lr
 800ab9c:	d815      	bhi.n	800abca <rshift+0x7e>
 800ab9e:	1a9a      	subs	r2, r3, r2
 800aba0:	0092      	lsls	r2, r2, #2
 800aba2:	3a04      	subs	r2, #4
 800aba4:	3501      	adds	r5, #1
 800aba6:	42ae      	cmp	r6, r5
 800aba8:	bf38      	it	cc
 800abaa:	2200      	movcc	r2, #0
 800abac:	18a3      	adds	r3, r4, r2
 800abae:	50a7      	str	r7, [r4, r2]
 800abb0:	b107      	cbz	r7, 800abb4 <rshift+0x68>
 800abb2:	3304      	adds	r3, #4
 800abb4:	1b1a      	subs	r2, r3, r4
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800abbc:	bf08      	it	eq
 800abbe:	2300      	moveq	r3, #0
 800abc0:	6102      	str	r2, [r0, #16]
 800abc2:	bf08      	it	eq
 800abc4:	6143      	streq	r3, [r0, #20]
 800abc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abca:	f8dc c000 	ldr.w	ip, [ip]
 800abce:	fa0c fc08 	lsl.w	ip, ip, r8
 800abd2:	ea4c 0707 	orr.w	r7, ip, r7
 800abd6:	f849 7b04 	str.w	r7, [r9], #4
 800abda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abde:	40cf      	lsrs	r7, r1
 800abe0:	e7da      	b.n	800ab98 <rshift+0x4c>
 800abe2:	f851 cb04 	ldr.w	ip, [r1], #4
 800abe6:	f847 cf04 	str.w	ip, [r7, #4]!
 800abea:	e7c3      	b.n	800ab74 <rshift+0x28>
 800abec:	4623      	mov	r3, r4
 800abee:	e7e1      	b.n	800abb4 <rshift+0x68>

0800abf0 <__hexdig_fun>:
 800abf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abf4:	2b09      	cmp	r3, #9
 800abf6:	d802      	bhi.n	800abfe <__hexdig_fun+0xe>
 800abf8:	3820      	subs	r0, #32
 800abfa:	b2c0      	uxtb	r0, r0
 800abfc:	4770      	bx	lr
 800abfe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac02:	2b05      	cmp	r3, #5
 800ac04:	d801      	bhi.n	800ac0a <__hexdig_fun+0x1a>
 800ac06:	3847      	subs	r0, #71	; 0x47
 800ac08:	e7f7      	b.n	800abfa <__hexdig_fun+0xa>
 800ac0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac0e:	2b05      	cmp	r3, #5
 800ac10:	d801      	bhi.n	800ac16 <__hexdig_fun+0x26>
 800ac12:	3827      	subs	r0, #39	; 0x27
 800ac14:	e7f1      	b.n	800abfa <__hexdig_fun+0xa>
 800ac16:	2000      	movs	r0, #0
 800ac18:	4770      	bx	lr
	...

0800ac1c <__gethex>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	4617      	mov	r7, r2
 800ac22:	680a      	ldr	r2, [r1, #0]
 800ac24:	b085      	sub	sp, #20
 800ac26:	f102 0b02 	add.w	fp, r2, #2
 800ac2a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac2e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac32:	4681      	mov	r9, r0
 800ac34:	468a      	mov	sl, r1
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	32fe      	adds	r2, #254	; 0xfe
 800ac3a:	eb02 030b 	add.w	r3, r2, fp
 800ac3e:	46d8      	mov	r8, fp
 800ac40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	2830      	cmp	r0, #48	; 0x30
 800ac48:	d0f7      	beq.n	800ac3a <__gethex+0x1e>
 800ac4a:	f7ff ffd1 	bl	800abf0 <__hexdig_fun>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d138      	bne.n	800acc6 <__gethex+0xaa>
 800ac54:	49a7      	ldr	r1, [pc, #668]	; (800aef4 <__gethex+0x2d8>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	4640      	mov	r0, r8
 800ac5a:	f7fe ff98 	bl	8009b8e <strncmp>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d169      	bne.n	800ad38 <__gethex+0x11c>
 800ac64:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ac68:	465d      	mov	r5, fp
 800ac6a:	f7ff ffc1 	bl	800abf0 <__hexdig_fun>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d064      	beq.n	800ad3c <__gethex+0x120>
 800ac72:	465a      	mov	r2, fp
 800ac74:	7810      	ldrb	r0, [r2, #0]
 800ac76:	2830      	cmp	r0, #48	; 0x30
 800ac78:	4690      	mov	r8, r2
 800ac7a:	f102 0201 	add.w	r2, r2, #1
 800ac7e:	d0f9      	beq.n	800ac74 <__gethex+0x58>
 800ac80:	f7ff ffb6 	bl	800abf0 <__hexdig_fun>
 800ac84:	2301      	movs	r3, #1
 800ac86:	fab0 f480 	clz	r4, r0
 800ac8a:	0964      	lsrs	r4, r4, #5
 800ac8c:	465e      	mov	r6, fp
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	4642      	mov	r2, r8
 800ac92:	4615      	mov	r5, r2
 800ac94:	3201      	adds	r2, #1
 800ac96:	7828      	ldrb	r0, [r5, #0]
 800ac98:	f7ff ffaa 	bl	800abf0 <__hexdig_fun>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d1f8      	bne.n	800ac92 <__gethex+0x76>
 800aca0:	4994      	ldr	r1, [pc, #592]	; (800aef4 <__gethex+0x2d8>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	4628      	mov	r0, r5
 800aca6:	f7fe ff72 	bl	8009b8e <strncmp>
 800acaa:	b978      	cbnz	r0, 800accc <__gethex+0xb0>
 800acac:	b946      	cbnz	r6, 800acc0 <__gethex+0xa4>
 800acae:	1c6e      	adds	r6, r5, #1
 800acb0:	4632      	mov	r2, r6
 800acb2:	4615      	mov	r5, r2
 800acb4:	3201      	adds	r2, #1
 800acb6:	7828      	ldrb	r0, [r5, #0]
 800acb8:	f7ff ff9a 	bl	800abf0 <__hexdig_fun>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1f8      	bne.n	800acb2 <__gethex+0x96>
 800acc0:	1b73      	subs	r3, r6, r5
 800acc2:	009e      	lsls	r6, r3, #2
 800acc4:	e004      	b.n	800acd0 <__gethex+0xb4>
 800acc6:	2400      	movs	r4, #0
 800acc8:	4626      	mov	r6, r4
 800acca:	e7e1      	b.n	800ac90 <__gethex+0x74>
 800accc:	2e00      	cmp	r6, #0
 800acce:	d1f7      	bne.n	800acc0 <__gethex+0xa4>
 800acd0:	782b      	ldrb	r3, [r5, #0]
 800acd2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acd6:	2b50      	cmp	r3, #80	; 0x50
 800acd8:	d13d      	bne.n	800ad56 <__gethex+0x13a>
 800acda:	786b      	ldrb	r3, [r5, #1]
 800acdc:	2b2b      	cmp	r3, #43	; 0x2b
 800acde:	d02f      	beq.n	800ad40 <__gethex+0x124>
 800ace0:	2b2d      	cmp	r3, #45	; 0x2d
 800ace2:	d031      	beq.n	800ad48 <__gethex+0x12c>
 800ace4:	1c69      	adds	r1, r5, #1
 800ace6:	f04f 0b00 	mov.w	fp, #0
 800acea:	7808      	ldrb	r0, [r1, #0]
 800acec:	f7ff ff80 	bl	800abf0 <__hexdig_fun>
 800acf0:	1e42      	subs	r2, r0, #1
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	2a18      	cmp	r2, #24
 800acf6:	d82e      	bhi.n	800ad56 <__gethex+0x13a>
 800acf8:	f1a0 0210 	sub.w	r2, r0, #16
 800acfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad00:	f7ff ff76 	bl	800abf0 <__hexdig_fun>
 800ad04:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad08:	fa5f fc8c 	uxtb.w	ip, ip
 800ad0c:	f1bc 0f18 	cmp.w	ip, #24
 800ad10:	d91d      	bls.n	800ad4e <__gethex+0x132>
 800ad12:	f1bb 0f00 	cmp.w	fp, #0
 800ad16:	d000      	beq.n	800ad1a <__gethex+0xfe>
 800ad18:	4252      	negs	r2, r2
 800ad1a:	4416      	add	r6, r2
 800ad1c:	f8ca 1000 	str.w	r1, [sl]
 800ad20:	b1dc      	cbz	r4, 800ad5a <__gethex+0x13e>
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bf14      	ite	ne
 800ad28:	f04f 0800 	movne.w	r8, #0
 800ad2c:	f04f 0806 	moveq.w	r8, #6
 800ad30:	4640      	mov	r0, r8
 800ad32:	b005      	add	sp, #20
 800ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad38:	4645      	mov	r5, r8
 800ad3a:	4626      	mov	r6, r4
 800ad3c:	2401      	movs	r4, #1
 800ad3e:	e7c7      	b.n	800acd0 <__gethex+0xb4>
 800ad40:	f04f 0b00 	mov.w	fp, #0
 800ad44:	1ca9      	adds	r1, r5, #2
 800ad46:	e7d0      	b.n	800acea <__gethex+0xce>
 800ad48:	f04f 0b01 	mov.w	fp, #1
 800ad4c:	e7fa      	b.n	800ad44 <__gethex+0x128>
 800ad4e:	230a      	movs	r3, #10
 800ad50:	fb03 0002 	mla	r0, r3, r2, r0
 800ad54:	e7d0      	b.n	800acf8 <__gethex+0xdc>
 800ad56:	4629      	mov	r1, r5
 800ad58:	e7e0      	b.n	800ad1c <__gethex+0x100>
 800ad5a:	eba5 0308 	sub.w	r3, r5, r8
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	4621      	mov	r1, r4
 800ad62:	2b07      	cmp	r3, #7
 800ad64:	dc0a      	bgt.n	800ad7c <__gethex+0x160>
 800ad66:	4648      	mov	r0, r9
 800ad68:	f000 fb0e 	bl	800b388 <_Balloc>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	b940      	cbnz	r0, 800ad82 <__gethex+0x166>
 800ad70:	4b61      	ldr	r3, [pc, #388]	; (800aef8 <__gethex+0x2dc>)
 800ad72:	4602      	mov	r2, r0
 800ad74:	21e4      	movs	r1, #228	; 0xe4
 800ad76:	4861      	ldr	r0, [pc, #388]	; (800aefc <__gethex+0x2e0>)
 800ad78:	f001 f9f0 	bl	800c15c <__assert_func>
 800ad7c:	3101      	adds	r1, #1
 800ad7e:	105b      	asrs	r3, r3, #1
 800ad80:	e7ef      	b.n	800ad62 <__gethex+0x146>
 800ad82:	f100 0a14 	add.w	sl, r0, #20
 800ad86:	2300      	movs	r3, #0
 800ad88:	495a      	ldr	r1, [pc, #360]	; (800aef4 <__gethex+0x2d8>)
 800ad8a:	f8cd a004 	str.w	sl, [sp, #4]
 800ad8e:	469b      	mov	fp, r3
 800ad90:	45a8      	cmp	r8, r5
 800ad92:	d342      	bcc.n	800ae1a <__gethex+0x1fe>
 800ad94:	9801      	ldr	r0, [sp, #4]
 800ad96:	f840 bb04 	str.w	fp, [r0], #4
 800ad9a:	eba0 000a 	sub.w	r0, r0, sl
 800ad9e:	1080      	asrs	r0, r0, #2
 800ada0:	6120      	str	r0, [r4, #16]
 800ada2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ada6:	4658      	mov	r0, fp
 800ada8:	f000 fbe0 	bl	800b56c <__hi0bits>
 800adac:	683d      	ldr	r5, [r7, #0]
 800adae:	eba8 0000 	sub.w	r0, r8, r0
 800adb2:	42a8      	cmp	r0, r5
 800adb4:	dd59      	ble.n	800ae6a <__gethex+0x24e>
 800adb6:	eba0 0805 	sub.w	r8, r0, r5
 800adba:	4641      	mov	r1, r8
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 ff6f 	bl	800bca0 <__any_on>
 800adc2:	4683      	mov	fp, r0
 800adc4:	b1b8      	cbz	r0, 800adf6 <__gethex+0x1da>
 800adc6:	f108 33ff 	add.w	r3, r8, #4294967295
 800adca:	1159      	asrs	r1, r3, #5
 800adcc:	f003 021f 	and.w	r2, r3, #31
 800add0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800add4:	f04f 0b01 	mov.w	fp, #1
 800add8:	fa0b f202 	lsl.w	r2, fp, r2
 800addc:	420a      	tst	r2, r1
 800adde:	d00a      	beq.n	800adf6 <__gethex+0x1da>
 800ade0:	455b      	cmp	r3, fp
 800ade2:	dd06      	ble.n	800adf2 <__gethex+0x1d6>
 800ade4:	f1a8 0102 	sub.w	r1, r8, #2
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 ff59 	bl	800bca0 <__any_on>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d138      	bne.n	800ae64 <__gethex+0x248>
 800adf2:	f04f 0b02 	mov.w	fp, #2
 800adf6:	4641      	mov	r1, r8
 800adf8:	4620      	mov	r0, r4
 800adfa:	f7ff fea7 	bl	800ab4c <rshift>
 800adfe:	4446      	add	r6, r8
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	42b3      	cmp	r3, r6
 800ae04:	da41      	bge.n	800ae8a <__gethex+0x26e>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4648      	mov	r0, r9
 800ae0a:	f000 fafd 	bl	800b408 <_Bfree>
 800ae0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae10:	2300      	movs	r3, #0
 800ae12:	6013      	str	r3, [r2, #0]
 800ae14:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ae18:	e78a      	b.n	800ad30 <__gethex+0x114>
 800ae1a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ae1e:	2a2e      	cmp	r2, #46	; 0x2e
 800ae20:	d014      	beq.n	800ae4c <__gethex+0x230>
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d106      	bne.n	800ae34 <__gethex+0x218>
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	f843 bb04 	str.w	fp, [r3], #4
 800ae2c:	f04f 0b00 	mov.w	fp, #0
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	465b      	mov	r3, fp
 800ae34:	7828      	ldrb	r0, [r5, #0]
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	f7ff feda 	bl	800abf0 <__hexdig_fun>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	f000 000f 	and.w	r0, r0, #15
 800ae42:	4098      	lsls	r0, r3
 800ae44:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae48:	3304      	adds	r3, #4
 800ae4a:	e7a1      	b.n	800ad90 <__gethex+0x174>
 800ae4c:	45a8      	cmp	r8, r5
 800ae4e:	d8e8      	bhi.n	800ae22 <__gethex+0x206>
 800ae50:	2201      	movs	r2, #1
 800ae52:	4628      	mov	r0, r5
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	f7fe fe9a 	bl	8009b8e <strncmp>
 800ae5a:	4926      	ldr	r1, [pc, #152]	; (800aef4 <__gethex+0x2d8>)
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d1df      	bne.n	800ae22 <__gethex+0x206>
 800ae62:	e795      	b.n	800ad90 <__gethex+0x174>
 800ae64:	f04f 0b03 	mov.w	fp, #3
 800ae68:	e7c5      	b.n	800adf6 <__gethex+0x1da>
 800ae6a:	da0b      	bge.n	800ae84 <__gethex+0x268>
 800ae6c:	eba5 0800 	sub.w	r8, r5, r0
 800ae70:	4621      	mov	r1, r4
 800ae72:	4642      	mov	r2, r8
 800ae74:	4648      	mov	r0, r9
 800ae76:	f000 fce1 	bl	800b83c <__lshift>
 800ae7a:	eba6 0608 	sub.w	r6, r6, r8
 800ae7e:	4604      	mov	r4, r0
 800ae80:	f100 0a14 	add.w	sl, r0, #20
 800ae84:	f04f 0b00 	mov.w	fp, #0
 800ae88:	e7ba      	b.n	800ae00 <__gethex+0x1e4>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	42b3      	cmp	r3, r6
 800ae8e:	dd73      	ble.n	800af78 <__gethex+0x35c>
 800ae90:	1b9e      	subs	r6, r3, r6
 800ae92:	42b5      	cmp	r5, r6
 800ae94:	dc34      	bgt.n	800af00 <__gethex+0x2e4>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d023      	beq.n	800aee4 <__gethex+0x2c8>
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d025      	beq.n	800aeec <__gethex+0x2d0>
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d115      	bne.n	800aed0 <__gethex+0x2b4>
 800aea4:	42b5      	cmp	r5, r6
 800aea6:	d113      	bne.n	800aed0 <__gethex+0x2b4>
 800aea8:	2d01      	cmp	r5, #1
 800aeaa:	d10b      	bne.n	800aec4 <__gethex+0x2a8>
 800aeac:	9a02      	ldr	r2, [sp, #8]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	f8ca 3000 	str.w	r3, [sl]
 800aeba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aebc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800aec0:	601c      	str	r4, [r3, #0]
 800aec2:	e735      	b.n	800ad30 <__gethex+0x114>
 800aec4:	1e69      	subs	r1, r5, #1
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 feea 	bl	800bca0 <__any_on>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d1ed      	bne.n	800aeac <__gethex+0x290>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4648      	mov	r0, r9
 800aed4:	f000 fa98 	bl	800b408 <_Bfree>
 800aed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aeda:	2300      	movs	r3, #0
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	f04f 0850 	mov.w	r8, #80	; 0x50
 800aee2:	e725      	b.n	800ad30 <__gethex+0x114>
 800aee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1f2      	bne.n	800aed0 <__gethex+0x2b4>
 800aeea:	e7df      	b.n	800aeac <__gethex+0x290>
 800aeec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1dc      	bne.n	800aeac <__gethex+0x290>
 800aef2:	e7ed      	b.n	800aed0 <__gethex+0x2b4>
 800aef4:	0800d268 	.word	0x0800d268
 800aef8:	0800d47e 	.word	0x0800d47e
 800aefc:	0800d48f 	.word	0x0800d48f
 800af00:	f106 38ff 	add.w	r8, r6, #4294967295
 800af04:	f1bb 0f00 	cmp.w	fp, #0
 800af08:	d133      	bne.n	800af72 <__gethex+0x356>
 800af0a:	f1b8 0f00 	cmp.w	r8, #0
 800af0e:	d004      	beq.n	800af1a <__gethex+0x2fe>
 800af10:	4641      	mov	r1, r8
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fec4 	bl	800bca0 <__any_on>
 800af18:	4683      	mov	fp, r0
 800af1a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800af1e:	2301      	movs	r3, #1
 800af20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af24:	f008 081f 	and.w	r8, r8, #31
 800af28:	fa03 f308 	lsl.w	r3, r3, r8
 800af2c:	4213      	tst	r3, r2
 800af2e:	4631      	mov	r1, r6
 800af30:	4620      	mov	r0, r4
 800af32:	bf18      	it	ne
 800af34:	f04b 0b02 	orrne.w	fp, fp, #2
 800af38:	1bad      	subs	r5, r5, r6
 800af3a:	f7ff fe07 	bl	800ab4c <rshift>
 800af3e:	687e      	ldr	r6, [r7, #4]
 800af40:	f04f 0802 	mov.w	r8, #2
 800af44:	f1bb 0f00 	cmp.w	fp, #0
 800af48:	d04a      	beq.n	800afe0 <__gethex+0x3c4>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d016      	beq.n	800af7e <__gethex+0x362>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d018      	beq.n	800af86 <__gethex+0x36a>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d109      	bne.n	800af6c <__gethex+0x350>
 800af58:	f01b 0f02 	tst.w	fp, #2
 800af5c:	d006      	beq.n	800af6c <__gethex+0x350>
 800af5e:	f8da 3000 	ldr.w	r3, [sl]
 800af62:	ea4b 0b03 	orr.w	fp, fp, r3
 800af66:	f01b 0f01 	tst.w	fp, #1
 800af6a:	d10f      	bne.n	800af8c <__gethex+0x370>
 800af6c:	f048 0810 	orr.w	r8, r8, #16
 800af70:	e036      	b.n	800afe0 <__gethex+0x3c4>
 800af72:	f04f 0b01 	mov.w	fp, #1
 800af76:	e7d0      	b.n	800af1a <__gethex+0x2fe>
 800af78:	f04f 0801 	mov.w	r8, #1
 800af7c:	e7e2      	b.n	800af44 <__gethex+0x328>
 800af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af80:	f1c3 0301 	rsb	r3, r3, #1
 800af84:	930f      	str	r3, [sp, #60]	; 0x3c
 800af86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0ef      	beq.n	800af6c <__gethex+0x350>
 800af8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af90:	f104 0214 	add.w	r2, r4, #20
 800af94:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af9e:	2300      	movs	r3, #0
 800afa0:	4694      	mov	ip, r2
 800afa2:	f852 1b04 	ldr.w	r1, [r2], #4
 800afa6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800afaa:	d01e      	beq.n	800afea <__gethex+0x3ce>
 800afac:	3101      	adds	r1, #1
 800afae:	f8cc 1000 	str.w	r1, [ip]
 800afb2:	f1b8 0f02 	cmp.w	r8, #2
 800afb6:	f104 0214 	add.w	r2, r4, #20
 800afba:	d13d      	bne.n	800b038 <__gethex+0x41c>
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	42ab      	cmp	r3, r5
 800afc2:	d10b      	bne.n	800afdc <__gethex+0x3c0>
 800afc4:	1169      	asrs	r1, r5, #5
 800afc6:	2301      	movs	r3, #1
 800afc8:	f005 051f 	and.w	r5, r5, #31
 800afcc:	fa03 f505 	lsl.w	r5, r3, r5
 800afd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afd4:	421d      	tst	r5, r3
 800afd6:	bf18      	it	ne
 800afd8:	f04f 0801 	movne.w	r8, #1
 800afdc:	f048 0820 	orr.w	r8, r8, #32
 800afe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afe2:	601c      	str	r4, [r3, #0]
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	601e      	str	r6, [r3, #0]
 800afe8:	e6a2      	b.n	800ad30 <__gethex+0x114>
 800afea:	4290      	cmp	r0, r2
 800afec:	f842 3c04 	str.w	r3, [r2, #-4]
 800aff0:	d8d6      	bhi.n	800afa0 <__gethex+0x384>
 800aff2:	68a2      	ldr	r2, [r4, #8]
 800aff4:	4593      	cmp	fp, r2
 800aff6:	db17      	blt.n	800b028 <__gethex+0x40c>
 800aff8:	6861      	ldr	r1, [r4, #4]
 800affa:	4648      	mov	r0, r9
 800affc:	3101      	adds	r1, #1
 800affe:	f000 f9c3 	bl	800b388 <_Balloc>
 800b002:	4682      	mov	sl, r0
 800b004:	b918      	cbnz	r0, 800b00e <__gethex+0x3f2>
 800b006:	4b1b      	ldr	r3, [pc, #108]	; (800b074 <__gethex+0x458>)
 800b008:	4602      	mov	r2, r0
 800b00a:	2184      	movs	r1, #132	; 0x84
 800b00c:	e6b3      	b.n	800ad76 <__gethex+0x15a>
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	3202      	adds	r2, #2
 800b012:	f104 010c 	add.w	r1, r4, #12
 800b016:	0092      	lsls	r2, r2, #2
 800b018:	300c      	adds	r0, #12
 800b01a:	f7fe feb2 	bl	8009d82 <memcpy>
 800b01e:	4621      	mov	r1, r4
 800b020:	4648      	mov	r0, r9
 800b022:	f000 f9f1 	bl	800b408 <_Bfree>
 800b026:	4654      	mov	r4, sl
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	1c51      	adds	r1, r2, #1
 800b02c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b030:	6121      	str	r1, [r4, #16]
 800b032:	2101      	movs	r1, #1
 800b034:	6151      	str	r1, [r2, #20]
 800b036:	e7bc      	b.n	800afb2 <__gethex+0x396>
 800b038:	6921      	ldr	r1, [r4, #16]
 800b03a:	4559      	cmp	r1, fp
 800b03c:	dd0b      	ble.n	800b056 <__gethex+0x43a>
 800b03e:	2101      	movs	r1, #1
 800b040:	4620      	mov	r0, r4
 800b042:	f7ff fd83 	bl	800ab4c <rshift>
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	3601      	adds	r6, #1
 800b04a:	42b3      	cmp	r3, r6
 800b04c:	f6ff aedb 	blt.w	800ae06 <__gethex+0x1ea>
 800b050:	f04f 0801 	mov.w	r8, #1
 800b054:	e7c2      	b.n	800afdc <__gethex+0x3c0>
 800b056:	f015 051f 	ands.w	r5, r5, #31
 800b05a:	d0f9      	beq.n	800b050 <__gethex+0x434>
 800b05c:	9b01      	ldr	r3, [sp, #4]
 800b05e:	441a      	add	r2, r3
 800b060:	f1c5 0520 	rsb	r5, r5, #32
 800b064:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b068:	f000 fa80 	bl	800b56c <__hi0bits>
 800b06c:	42a8      	cmp	r0, r5
 800b06e:	dbe6      	blt.n	800b03e <__gethex+0x422>
 800b070:	e7ee      	b.n	800b050 <__gethex+0x434>
 800b072:	bf00      	nop
 800b074:	0800d47e 	.word	0x0800d47e

0800b078 <L_shift>:
 800b078:	f1c2 0208 	rsb	r2, r2, #8
 800b07c:	0092      	lsls	r2, r2, #2
 800b07e:	b570      	push	{r4, r5, r6, lr}
 800b080:	f1c2 0620 	rsb	r6, r2, #32
 800b084:	6843      	ldr	r3, [r0, #4]
 800b086:	6804      	ldr	r4, [r0, #0]
 800b088:	fa03 f506 	lsl.w	r5, r3, r6
 800b08c:	432c      	orrs	r4, r5
 800b08e:	40d3      	lsrs	r3, r2
 800b090:	6004      	str	r4, [r0, #0]
 800b092:	f840 3f04 	str.w	r3, [r0, #4]!
 800b096:	4288      	cmp	r0, r1
 800b098:	d3f4      	bcc.n	800b084 <L_shift+0xc>
 800b09a:	bd70      	pop	{r4, r5, r6, pc}

0800b09c <__match>:
 800b09c:	b530      	push	{r4, r5, lr}
 800b09e:	6803      	ldr	r3, [r0, #0]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a6:	b914      	cbnz	r4, 800b0ae <__match+0x12>
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	bd30      	pop	{r4, r5, pc}
 800b0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0b6:	2d19      	cmp	r5, #25
 800b0b8:	bf98      	it	ls
 800b0ba:	3220      	addls	r2, #32
 800b0bc:	42a2      	cmp	r2, r4
 800b0be:	d0f0      	beq.n	800b0a2 <__match+0x6>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	e7f3      	b.n	800b0ac <__match+0x10>

0800b0c4 <__hexnan>:
 800b0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	680b      	ldr	r3, [r1, #0]
 800b0ca:	6801      	ldr	r1, [r0, #0]
 800b0cc:	115e      	asrs	r6, r3, #5
 800b0ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0d2:	f013 031f 	ands.w	r3, r3, #31
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	bf18      	it	ne
 800b0da:	3604      	addne	r6, #4
 800b0dc:	2500      	movs	r5, #0
 800b0de:	1f37      	subs	r7, r6, #4
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	4690      	mov	r8, r2
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0ea:	46b9      	mov	r9, r7
 800b0ec:	463c      	mov	r4, r7
 800b0ee:	9502      	str	r5, [sp, #8]
 800b0f0:	46ab      	mov	fp, r5
 800b0f2:	784a      	ldrb	r2, [r1, #1]
 800b0f4:	1c4b      	adds	r3, r1, #1
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	b342      	cbz	r2, 800b14c <__hexnan+0x88>
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	9105      	str	r1, [sp, #20]
 800b0fe:	9204      	str	r2, [sp, #16]
 800b100:	f7ff fd76 	bl	800abf0 <__hexdig_fun>
 800b104:	2800      	cmp	r0, #0
 800b106:	d14f      	bne.n	800b1a8 <__hexnan+0xe4>
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	9905      	ldr	r1, [sp, #20]
 800b10c:	2a20      	cmp	r2, #32
 800b10e:	d818      	bhi.n	800b142 <__hexnan+0x7e>
 800b110:	9b02      	ldr	r3, [sp, #8]
 800b112:	459b      	cmp	fp, r3
 800b114:	dd13      	ble.n	800b13e <__hexnan+0x7a>
 800b116:	454c      	cmp	r4, r9
 800b118:	d206      	bcs.n	800b128 <__hexnan+0x64>
 800b11a:	2d07      	cmp	r5, #7
 800b11c:	dc04      	bgt.n	800b128 <__hexnan+0x64>
 800b11e:	462a      	mov	r2, r5
 800b120:	4649      	mov	r1, r9
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff ffa8 	bl	800b078 <L_shift>
 800b128:	4544      	cmp	r4, r8
 800b12a:	d950      	bls.n	800b1ce <__hexnan+0x10a>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f1a4 0904 	sub.w	r9, r4, #4
 800b132:	f844 3c04 	str.w	r3, [r4, #-4]
 800b136:	f8cd b008 	str.w	fp, [sp, #8]
 800b13a:	464c      	mov	r4, r9
 800b13c:	461d      	mov	r5, r3
 800b13e:	9903      	ldr	r1, [sp, #12]
 800b140:	e7d7      	b.n	800b0f2 <__hexnan+0x2e>
 800b142:	2a29      	cmp	r2, #41	; 0x29
 800b144:	d155      	bne.n	800b1f2 <__hexnan+0x12e>
 800b146:	3102      	adds	r1, #2
 800b148:	f8ca 1000 	str.w	r1, [sl]
 800b14c:	f1bb 0f00 	cmp.w	fp, #0
 800b150:	d04f      	beq.n	800b1f2 <__hexnan+0x12e>
 800b152:	454c      	cmp	r4, r9
 800b154:	d206      	bcs.n	800b164 <__hexnan+0xa0>
 800b156:	2d07      	cmp	r5, #7
 800b158:	dc04      	bgt.n	800b164 <__hexnan+0xa0>
 800b15a:	462a      	mov	r2, r5
 800b15c:	4649      	mov	r1, r9
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff ff8a 	bl	800b078 <L_shift>
 800b164:	4544      	cmp	r4, r8
 800b166:	d934      	bls.n	800b1d2 <__hexnan+0x10e>
 800b168:	f1a8 0204 	sub.w	r2, r8, #4
 800b16c:	4623      	mov	r3, r4
 800b16e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b172:	f842 1f04 	str.w	r1, [r2, #4]!
 800b176:	429f      	cmp	r7, r3
 800b178:	d2f9      	bcs.n	800b16e <__hexnan+0xaa>
 800b17a:	1b3b      	subs	r3, r7, r4
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	3304      	adds	r3, #4
 800b182:	3e03      	subs	r6, #3
 800b184:	3401      	adds	r4, #1
 800b186:	42a6      	cmp	r6, r4
 800b188:	bf38      	it	cc
 800b18a:	2304      	movcc	r3, #4
 800b18c:	4443      	add	r3, r8
 800b18e:	2200      	movs	r2, #0
 800b190:	f843 2b04 	str.w	r2, [r3], #4
 800b194:	429f      	cmp	r7, r3
 800b196:	d2fb      	bcs.n	800b190 <__hexnan+0xcc>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	b91b      	cbnz	r3, 800b1a4 <__hexnan+0xe0>
 800b19c:	4547      	cmp	r7, r8
 800b19e:	d126      	bne.n	800b1ee <__hexnan+0x12a>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	2005      	movs	r0, #5
 800b1a6:	e025      	b.n	800b1f4 <__hexnan+0x130>
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	2d08      	cmp	r5, #8
 800b1ac:	f10b 0b01 	add.w	fp, fp, #1
 800b1b0:	dd06      	ble.n	800b1c0 <__hexnan+0xfc>
 800b1b2:	4544      	cmp	r4, r8
 800b1b4:	d9c3      	bls.n	800b13e <__hexnan+0x7a>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1bc:	2501      	movs	r5, #1
 800b1be:	3c04      	subs	r4, #4
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	f000 000f 	and.w	r0, r0, #15
 800b1c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b1ca:	6020      	str	r0, [r4, #0]
 800b1cc:	e7b7      	b.n	800b13e <__hexnan+0x7a>
 800b1ce:	2508      	movs	r5, #8
 800b1d0:	e7b5      	b.n	800b13e <__hexnan+0x7a>
 800b1d2:	9b01      	ldr	r3, [sp, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d0df      	beq.n	800b198 <__hexnan+0xd4>
 800b1d8:	f1c3 0320 	rsb	r3, r3, #32
 800b1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e0:	40da      	lsrs	r2, r3
 800b1e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1ec:	e7d4      	b.n	800b198 <__hexnan+0xd4>
 800b1ee:	3f04      	subs	r7, #4
 800b1f0:	e7d2      	b.n	800b198 <__hexnan+0xd4>
 800b1f2:	2004      	movs	r0, #4
 800b1f4:	b007      	add	sp, #28
 800b1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b1fc <malloc>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <malloc+0xc>)
 800b1fe:	4601      	mov	r1, r0
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f000 b823 	b.w	800b24c <_malloc_r>
 800b206:	bf00      	nop
 800b208:	200001e4 	.word	0x200001e4

0800b20c <sbrk_aligned>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4e0e      	ldr	r6, [pc, #56]	; (800b248 <sbrk_aligned+0x3c>)
 800b210:	460c      	mov	r4, r1
 800b212:	6831      	ldr	r1, [r6, #0]
 800b214:	4605      	mov	r5, r0
 800b216:	b911      	cbnz	r1, 800b21e <sbrk_aligned+0x12>
 800b218:	f000 ff90 	bl	800c13c <_sbrk_r>
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 ff8b 	bl	800c13c <_sbrk_r>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d00a      	beq.n	800b240 <sbrk_aligned+0x34>
 800b22a:	1cc4      	adds	r4, r0, #3
 800b22c:	f024 0403 	bic.w	r4, r4, #3
 800b230:	42a0      	cmp	r0, r4
 800b232:	d007      	beq.n	800b244 <sbrk_aligned+0x38>
 800b234:	1a21      	subs	r1, r4, r0
 800b236:	4628      	mov	r0, r5
 800b238:	f000 ff80 	bl	800c13c <_sbrk_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d101      	bne.n	800b244 <sbrk_aligned+0x38>
 800b240:	f04f 34ff 	mov.w	r4, #4294967295
 800b244:	4620      	mov	r0, r4
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	20004824 	.word	0x20004824

0800b24c <_malloc_r>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	1ccd      	adds	r5, r1, #3
 800b252:	f025 0503 	bic.w	r5, r5, #3
 800b256:	3508      	adds	r5, #8
 800b258:	2d0c      	cmp	r5, #12
 800b25a:	bf38      	it	cc
 800b25c:	250c      	movcc	r5, #12
 800b25e:	2d00      	cmp	r5, #0
 800b260:	4607      	mov	r7, r0
 800b262:	db01      	blt.n	800b268 <_malloc_r+0x1c>
 800b264:	42a9      	cmp	r1, r5
 800b266:	d905      	bls.n	800b274 <_malloc_r+0x28>
 800b268:	230c      	movs	r3, #12
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	2600      	movs	r6, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b348 <_malloc_r+0xfc>
 800b278:	f000 f87a 	bl	800b370 <__malloc_lock>
 800b27c:	f8d8 3000 	ldr.w	r3, [r8]
 800b280:	461c      	mov	r4, r3
 800b282:	bb5c      	cbnz	r4, 800b2dc <_malloc_r+0x90>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc0 	bl	800b20c <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d155      	bne.n	800b33e <_malloc_r+0xf2>
 800b292:	f8d8 4000 	ldr.w	r4, [r8]
 800b296:	4626      	mov	r6, r4
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d145      	bne.n	800b328 <_malloc_r+0xdc>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d048      	beq.n	800b332 <_malloc_r+0xe6>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	eb04 0903 	add.w	r9, r4, r3
 800b2aa:	f000 ff47 	bl	800c13c <_sbrk_r>
 800b2ae:	4581      	cmp	r9, r0
 800b2b0:	d13f      	bne.n	800b332 <_malloc_r+0xe6>
 800b2b2:	6821      	ldr	r1, [r4, #0]
 800b2b4:	1a6d      	subs	r5, r5, r1
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa7 	bl	800b20c <sbrk_aligned>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d037      	beq.n	800b332 <_malloc_r+0xe6>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d038      	beq.n	800b342 <_malloc_r+0xf6>
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	d12b      	bne.n	800b32e <_malloc_r+0xe2>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xb0>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d41f      	bmi.n	800b322 <_malloc_r+0xd6>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xca>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f104 060b 	add.w	r6, r4, #11
 800b302:	f000 f83b 	bl	800b37c <__malloc_unlock>
 800b306:	f026 0607 	bic.w	r6, r6, #7
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	1af2      	subs	r2, r6, r3
 800b30e:	d0ae      	beq.n	800b26e <_malloc_r+0x22>
 800b310:	1b9b      	subs	r3, r3, r6
 800b312:	50a3      	str	r3, [r4, r2]
 800b314:	e7ab      	b.n	800b26e <_malloc_r+0x22>
 800b316:	42a3      	cmp	r3, r4
 800b318:	6862      	ldr	r2, [r4, #4]
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x8c>
 800b31c:	f8c8 2000 	str.w	r2, [r8]
 800b320:	e7ec      	b.n	800b2fc <_malloc_r+0xb0>
 800b322:	4623      	mov	r3, r4
 800b324:	6864      	ldr	r4, [r4, #4]
 800b326:	e7ac      	b.n	800b282 <_malloc_r+0x36>
 800b328:	4634      	mov	r4, r6
 800b32a:	6876      	ldr	r6, [r6, #4]
 800b32c:	e7b4      	b.n	800b298 <_malloc_r+0x4c>
 800b32e:	4613      	mov	r3, r2
 800b330:	e7cc      	b.n	800b2cc <_malloc_r+0x80>
 800b332:	230c      	movs	r3, #12
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4638      	mov	r0, r7
 800b338:	f000 f820 	bl	800b37c <__malloc_unlock>
 800b33c:	e797      	b.n	800b26e <_malloc_r+0x22>
 800b33e:	6025      	str	r5, [r4, #0]
 800b340:	e7dc      	b.n	800b2fc <_malloc_r+0xb0>
 800b342:	605b      	str	r3, [r3, #4]
 800b344:	deff      	udf	#255	; 0xff
 800b346:	bf00      	nop
 800b348:	20004820 	.word	0x20004820

0800b34c <__ascii_mbtowc>:
 800b34c:	b082      	sub	sp, #8
 800b34e:	b901      	cbnz	r1, 800b352 <__ascii_mbtowc+0x6>
 800b350:	a901      	add	r1, sp, #4
 800b352:	b142      	cbz	r2, 800b366 <__ascii_mbtowc+0x1a>
 800b354:	b14b      	cbz	r3, 800b36a <__ascii_mbtowc+0x1e>
 800b356:	7813      	ldrb	r3, [r2, #0]
 800b358:	600b      	str	r3, [r1, #0]
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	1e10      	subs	r0, r2, #0
 800b35e:	bf18      	it	ne
 800b360:	2001      	movne	r0, #1
 800b362:	b002      	add	sp, #8
 800b364:	4770      	bx	lr
 800b366:	4610      	mov	r0, r2
 800b368:	e7fb      	b.n	800b362 <__ascii_mbtowc+0x16>
 800b36a:	f06f 0001 	mvn.w	r0, #1
 800b36e:	e7f8      	b.n	800b362 <__ascii_mbtowc+0x16>

0800b370 <__malloc_lock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_lock+0x8>)
 800b372:	f7fe bd04 	b.w	8009d7e <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	2000481c 	.word	0x2000481c

0800b37c <__malloc_unlock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_unlock+0x8>)
 800b37e:	f7fe bcff 	b.w	8009d80 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	2000481c 	.word	0x2000481c

0800b388 <_Balloc>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	69c6      	ldr	r6, [r0, #28]
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	b976      	cbnz	r6, 800b3b0 <_Balloc+0x28>
 800b392:	2010      	movs	r0, #16
 800b394:	f7ff ff32 	bl	800b1fc <malloc>
 800b398:	4602      	mov	r2, r0
 800b39a:	61e0      	str	r0, [r4, #28]
 800b39c:	b920      	cbnz	r0, 800b3a8 <_Balloc+0x20>
 800b39e:	4b18      	ldr	r3, [pc, #96]	; (800b400 <_Balloc+0x78>)
 800b3a0:	4818      	ldr	r0, [pc, #96]	; (800b404 <_Balloc+0x7c>)
 800b3a2:	216b      	movs	r1, #107	; 0x6b
 800b3a4:	f000 feda 	bl	800c15c <__assert_func>
 800b3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3ac:	6006      	str	r6, [r0, #0]
 800b3ae:	60c6      	str	r6, [r0, #12]
 800b3b0:	69e6      	ldr	r6, [r4, #28]
 800b3b2:	68f3      	ldr	r3, [r6, #12]
 800b3b4:	b183      	cbz	r3, 800b3d8 <_Balloc+0x50>
 800b3b6:	69e3      	ldr	r3, [r4, #28]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3be:	b9b8      	cbnz	r0, 800b3f0 <_Balloc+0x68>
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b3c6:	1d72      	adds	r2, r6, #5
 800b3c8:	0092      	lsls	r2, r2, #2
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fee4 	bl	800c198 <_calloc_r>
 800b3d0:	b160      	cbz	r0, 800b3ec <_Balloc+0x64>
 800b3d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3d6:	e00e      	b.n	800b3f6 <_Balloc+0x6e>
 800b3d8:	2221      	movs	r2, #33	; 0x21
 800b3da:	2104      	movs	r1, #4
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f000 fedb 	bl	800c198 <_calloc_r>
 800b3e2:	69e3      	ldr	r3, [r4, #28]
 800b3e4:	60f0      	str	r0, [r6, #12]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e4      	bne.n	800b3b6 <_Balloc+0x2e>
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	6802      	ldr	r2, [r0, #0]
 800b3f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3fc:	e7f7      	b.n	800b3ee <_Balloc+0x66>
 800b3fe:	bf00      	nop
 800b400:	0800d40f 	.word	0x0800d40f
 800b404:	0800d4ef 	.word	0x0800d4ef

0800b408 <_Bfree>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	69c6      	ldr	r6, [r0, #28]
 800b40c:	4605      	mov	r5, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	b976      	cbnz	r6, 800b430 <_Bfree+0x28>
 800b412:	2010      	movs	r0, #16
 800b414:	f7ff fef2 	bl	800b1fc <malloc>
 800b418:	4602      	mov	r2, r0
 800b41a:	61e8      	str	r0, [r5, #28]
 800b41c:	b920      	cbnz	r0, 800b428 <_Bfree+0x20>
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <_Bfree+0x3c>)
 800b420:	4809      	ldr	r0, [pc, #36]	; (800b448 <_Bfree+0x40>)
 800b422:	218f      	movs	r1, #143	; 0x8f
 800b424:	f000 fe9a 	bl	800c15c <__assert_func>
 800b428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b42c:	6006      	str	r6, [r0, #0]
 800b42e:	60c6      	str	r6, [r0, #12]
 800b430:	b13c      	cbz	r4, 800b442 <_Bfree+0x3a>
 800b432:	69eb      	ldr	r3, [r5, #28]
 800b434:	6862      	ldr	r2, [r4, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b43c:	6021      	str	r1, [r4, #0]
 800b43e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b442:	bd70      	pop	{r4, r5, r6, pc}
 800b444:	0800d40f 	.word	0x0800d40f
 800b448:	0800d4ef 	.word	0x0800d4ef

0800b44c <__multadd>:
 800b44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b450:	690d      	ldr	r5, [r1, #16]
 800b452:	4607      	mov	r7, r0
 800b454:	460c      	mov	r4, r1
 800b456:	461e      	mov	r6, r3
 800b458:	f101 0c14 	add.w	ip, r1, #20
 800b45c:	2000      	movs	r0, #0
 800b45e:	f8dc 3000 	ldr.w	r3, [ip]
 800b462:	b299      	uxth	r1, r3
 800b464:	fb02 6101 	mla	r1, r2, r1, r6
 800b468:	0c1e      	lsrs	r6, r3, #16
 800b46a:	0c0b      	lsrs	r3, r1, #16
 800b46c:	fb02 3306 	mla	r3, r2, r6, r3
 800b470:	b289      	uxth	r1, r1
 800b472:	3001      	adds	r0, #1
 800b474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b478:	4285      	cmp	r5, r0
 800b47a:	f84c 1b04 	str.w	r1, [ip], #4
 800b47e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b482:	dcec      	bgt.n	800b45e <__multadd+0x12>
 800b484:	b30e      	cbz	r6, 800b4ca <__multadd+0x7e>
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	42ab      	cmp	r3, r5
 800b48a:	dc19      	bgt.n	800b4c0 <__multadd+0x74>
 800b48c:	6861      	ldr	r1, [r4, #4]
 800b48e:	4638      	mov	r0, r7
 800b490:	3101      	adds	r1, #1
 800b492:	f7ff ff79 	bl	800b388 <_Balloc>
 800b496:	4680      	mov	r8, r0
 800b498:	b928      	cbnz	r0, 800b4a6 <__multadd+0x5a>
 800b49a:	4602      	mov	r2, r0
 800b49c:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <__multadd+0x84>)
 800b49e:	480d      	ldr	r0, [pc, #52]	; (800b4d4 <__multadd+0x88>)
 800b4a0:	21ba      	movs	r1, #186	; 0xba
 800b4a2:	f000 fe5b 	bl	800c15c <__assert_func>
 800b4a6:	6922      	ldr	r2, [r4, #16]
 800b4a8:	3202      	adds	r2, #2
 800b4aa:	f104 010c 	add.w	r1, r4, #12
 800b4ae:	0092      	lsls	r2, r2, #2
 800b4b0:	300c      	adds	r0, #12
 800b4b2:	f7fe fc66 	bl	8009d82 <memcpy>
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7ff ffa5 	bl	800b408 <_Bfree>
 800b4be:	4644      	mov	r4, r8
 800b4c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4c4:	3501      	adds	r5, #1
 800b4c6:	615e      	str	r6, [r3, #20]
 800b4c8:	6125      	str	r5, [r4, #16]
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d0:	0800d47e 	.word	0x0800d47e
 800b4d4:	0800d4ef 	.word	0x0800d4ef

0800b4d8 <__s2b>:
 800b4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	460c      	mov	r4, r1
 800b4de:	4615      	mov	r5, r2
 800b4e0:	461f      	mov	r7, r3
 800b4e2:	2209      	movs	r2, #9
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	db09      	blt.n	800b508 <__s2b+0x30>
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff ff47 	bl	800b388 <_Balloc>
 800b4fa:	b940      	cbnz	r0, 800b50e <__s2b+0x36>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	4b19      	ldr	r3, [pc, #100]	; (800b564 <__s2b+0x8c>)
 800b500:	4819      	ldr	r0, [pc, #100]	; (800b568 <__s2b+0x90>)
 800b502:	21d3      	movs	r1, #211	; 0xd3
 800b504:	f000 fe2a 	bl	800c15c <__assert_func>
 800b508:	0052      	lsls	r2, r2, #1
 800b50a:	3101      	adds	r1, #1
 800b50c:	e7f0      	b.n	800b4f0 <__s2b+0x18>
 800b50e:	9b08      	ldr	r3, [sp, #32]
 800b510:	6143      	str	r3, [r0, #20]
 800b512:	2d09      	cmp	r5, #9
 800b514:	f04f 0301 	mov.w	r3, #1
 800b518:	6103      	str	r3, [r0, #16]
 800b51a:	dd16      	ble.n	800b54a <__s2b+0x72>
 800b51c:	f104 0909 	add.w	r9, r4, #9
 800b520:	46c8      	mov	r8, r9
 800b522:	442c      	add	r4, r5
 800b524:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b528:	4601      	mov	r1, r0
 800b52a:	3b30      	subs	r3, #48	; 0x30
 800b52c:	220a      	movs	r2, #10
 800b52e:	4630      	mov	r0, r6
 800b530:	f7ff ff8c 	bl	800b44c <__multadd>
 800b534:	45a0      	cmp	r8, r4
 800b536:	d1f5      	bne.n	800b524 <__s2b+0x4c>
 800b538:	f1a5 0408 	sub.w	r4, r5, #8
 800b53c:	444c      	add	r4, r9
 800b53e:	1b2d      	subs	r5, r5, r4
 800b540:	1963      	adds	r3, r4, r5
 800b542:	42bb      	cmp	r3, r7
 800b544:	db04      	blt.n	800b550 <__s2b+0x78>
 800b546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b54a:	340a      	adds	r4, #10
 800b54c:	2509      	movs	r5, #9
 800b54e:	e7f6      	b.n	800b53e <__s2b+0x66>
 800b550:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b554:	4601      	mov	r1, r0
 800b556:	3b30      	subs	r3, #48	; 0x30
 800b558:	220a      	movs	r2, #10
 800b55a:	4630      	mov	r0, r6
 800b55c:	f7ff ff76 	bl	800b44c <__multadd>
 800b560:	e7ee      	b.n	800b540 <__s2b+0x68>
 800b562:	bf00      	nop
 800b564:	0800d47e 	.word	0x0800d47e
 800b568:	0800d4ef 	.word	0x0800d4ef

0800b56c <__hi0bits>:
 800b56c:	0c03      	lsrs	r3, r0, #16
 800b56e:	041b      	lsls	r3, r3, #16
 800b570:	b9d3      	cbnz	r3, 800b5a8 <__hi0bits+0x3c>
 800b572:	0400      	lsls	r0, r0, #16
 800b574:	2310      	movs	r3, #16
 800b576:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b57a:	bf04      	itt	eq
 800b57c:	0200      	lsleq	r0, r0, #8
 800b57e:	3308      	addeq	r3, #8
 800b580:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b584:	bf04      	itt	eq
 800b586:	0100      	lsleq	r0, r0, #4
 800b588:	3304      	addeq	r3, #4
 800b58a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b58e:	bf04      	itt	eq
 800b590:	0080      	lsleq	r0, r0, #2
 800b592:	3302      	addeq	r3, #2
 800b594:	2800      	cmp	r0, #0
 800b596:	db05      	blt.n	800b5a4 <__hi0bits+0x38>
 800b598:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b59c:	f103 0301 	add.w	r3, r3, #1
 800b5a0:	bf08      	it	eq
 800b5a2:	2320      	moveq	r3, #32
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	4770      	bx	lr
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	e7e4      	b.n	800b576 <__hi0bits+0xa>

0800b5ac <__lo0bits>:
 800b5ac:	6803      	ldr	r3, [r0, #0]
 800b5ae:	f013 0207 	ands.w	r2, r3, #7
 800b5b2:	d00c      	beq.n	800b5ce <__lo0bits+0x22>
 800b5b4:	07d9      	lsls	r1, r3, #31
 800b5b6:	d422      	bmi.n	800b5fe <__lo0bits+0x52>
 800b5b8:	079a      	lsls	r2, r3, #30
 800b5ba:	bf49      	itett	mi
 800b5bc:	085b      	lsrmi	r3, r3, #1
 800b5be:	089b      	lsrpl	r3, r3, #2
 800b5c0:	6003      	strmi	r3, [r0, #0]
 800b5c2:	2201      	movmi	r2, #1
 800b5c4:	bf5c      	itt	pl
 800b5c6:	6003      	strpl	r3, [r0, #0]
 800b5c8:	2202      	movpl	r2, #2
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	4770      	bx	lr
 800b5ce:	b299      	uxth	r1, r3
 800b5d0:	b909      	cbnz	r1, 800b5d6 <__lo0bits+0x2a>
 800b5d2:	0c1b      	lsrs	r3, r3, #16
 800b5d4:	2210      	movs	r2, #16
 800b5d6:	b2d9      	uxtb	r1, r3
 800b5d8:	b909      	cbnz	r1, 800b5de <__lo0bits+0x32>
 800b5da:	3208      	adds	r2, #8
 800b5dc:	0a1b      	lsrs	r3, r3, #8
 800b5de:	0719      	lsls	r1, r3, #28
 800b5e0:	bf04      	itt	eq
 800b5e2:	091b      	lsreq	r3, r3, #4
 800b5e4:	3204      	addeq	r2, #4
 800b5e6:	0799      	lsls	r1, r3, #30
 800b5e8:	bf04      	itt	eq
 800b5ea:	089b      	lsreq	r3, r3, #2
 800b5ec:	3202      	addeq	r2, #2
 800b5ee:	07d9      	lsls	r1, r3, #31
 800b5f0:	d403      	bmi.n	800b5fa <__lo0bits+0x4e>
 800b5f2:	085b      	lsrs	r3, r3, #1
 800b5f4:	f102 0201 	add.w	r2, r2, #1
 800b5f8:	d003      	beq.n	800b602 <__lo0bits+0x56>
 800b5fa:	6003      	str	r3, [r0, #0]
 800b5fc:	e7e5      	b.n	800b5ca <__lo0bits+0x1e>
 800b5fe:	2200      	movs	r2, #0
 800b600:	e7e3      	b.n	800b5ca <__lo0bits+0x1e>
 800b602:	2220      	movs	r2, #32
 800b604:	e7e1      	b.n	800b5ca <__lo0bits+0x1e>
	...

0800b608 <__i2b>:
 800b608:	b510      	push	{r4, lr}
 800b60a:	460c      	mov	r4, r1
 800b60c:	2101      	movs	r1, #1
 800b60e:	f7ff febb 	bl	800b388 <_Balloc>
 800b612:	4602      	mov	r2, r0
 800b614:	b928      	cbnz	r0, 800b622 <__i2b+0x1a>
 800b616:	4b05      	ldr	r3, [pc, #20]	; (800b62c <__i2b+0x24>)
 800b618:	4805      	ldr	r0, [pc, #20]	; (800b630 <__i2b+0x28>)
 800b61a:	f240 1145 	movw	r1, #325	; 0x145
 800b61e:	f000 fd9d 	bl	800c15c <__assert_func>
 800b622:	2301      	movs	r3, #1
 800b624:	6144      	str	r4, [r0, #20]
 800b626:	6103      	str	r3, [r0, #16]
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	bf00      	nop
 800b62c:	0800d47e 	.word	0x0800d47e
 800b630:	0800d4ef 	.word	0x0800d4ef

0800b634 <__multiply>:
 800b634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b638:	4691      	mov	r9, r2
 800b63a:	690a      	ldr	r2, [r1, #16]
 800b63c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b640:	429a      	cmp	r2, r3
 800b642:	bfb8      	it	lt
 800b644:	460b      	movlt	r3, r1
 800b646:	460c      	mov	r4, r1
 800b648:	bfbc      	itt	lt
 800b64a:	464c      	movlt	r4, r9
 800b64c:	4699      	movlt	r9, r3
 800b64e:	6927      	ldr	r7, [r4, #16]
 800b650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b654:	68a3      	ldr	r3, [r4, #8]
 800b656:	6861      	ldr	r1, [r4, #4]
 800b658:	eb07 060a 	add.w	r6, r7, sl
 800b65c:	42b3      	cmp	r3, r6
 800b65e:	b085      	sub	sp, #20
 800b660:	bfb8      	it	lt
 800b662:	3101      	addlt	r1, #1
 800b664:	f7ff fe90 	bl	800b388 <_Balloc>
 800b668:	b930      	cbnz	r0, 800b678 <__multiply+0x44>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b44      	ldr	r3, [pc, #272]	; (800b780 <__multiply+0x14c>)
 800b66e:	4845      	ldr	r0, [pc, #276]	; (800b784 <__multiply+0x150>)
 800b670:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b674:	f000 fd72 	bl	800c15c <__assert_func>
 800b678:	f100 0514 	add.w	r5, r0, #20
 800b67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b680:	462b      	mov	r3, r5
 800b682:	2200      	movs	r2, #0
 800b684:	4543      	cmp	r3, r8
 800b686:	d321      	bcc.n	800b6cc <__multiply+0x98>
 800b688:	f104 0314 	add.w	r3, r4, #20
 800b68c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b690:	f109 0314 	add.w	r3, r9, #20
 800b694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b698:	9202      	str	r2, [sp, #8]
 800b69a:	1b3a      	subs	r2, r7, r4
 800b69c:	3a15      	subs	r2, #21
 800b69e:	f022 0203 	bic.w	r2, r2, #3
 800b6a2:	3204      	adds	r2, #4
 800b6a4:	f104 0115 	add.w	r1, r4, #21
 800b6a8:	428f      	cmp	r7, r1
 800b6aa:	bf38      	it	cc
 800b6ac:	2204      	movcc	r2, #4
 800b6ae:	9201      	str	r2, [sp, #4]
 800b6b0:	9a02      	ldr	r2, [sp, #8]
 800b6b2:	9303      	str	r3, [sp, #12]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d80c      	bhi.n	800b6d2 <__multiply+0x9e>
 800b6b8:	2e00      	cmp	r6, #0
 800b6ba:	dd03      	ble.n	800b6c4 <__multiply+0x90>
 800b6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d05b      	beq.n	800b77c <__multiply+0x148>
 800b6c4:	6106      	str	r6, [r0, #16]
 800b6c6:	b005      	add	sp, #20
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	f843 2b04 	str.w	r2, [r3], #4
 800b6d0:	e7d8      	b.n	800b684 <__multiply+0x50>
 800b6d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6d6:	f1ba 0f00 	cmp.w	sl, #0
 800b6da:	d024      	beq.n	800b726 <__multiply+0xf2>
 800b6dc:	f104 0e14 	add.w	lr, r4, #20
 800b6e0:	46a9      	mov	r9, r5
 800b6e2:	f04f 0c00 	mov.w	ip, #0
 800b6e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b6ea:	f8d9 1000 	ldr.w	r1, [r9]
 800b6ee:	fa1f fb82 	uxth.w	fp, r2
 800b6f2:	b289      	uxth	r1, r1
 800b6f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b700:	4461      	add	r1, ip
 800b702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b706:	fb0a c20b 	mla	r2, sl, fp, ip
 800b70a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b70e:	b289      	uxth	r1, r1
 800b710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b714:	4577      	cmp	r7, lr
 800b716:	f849 1b04 	str.w	r1, [r9], #4
 800b71a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b71e:	d8e2      	bhi.n	800b6e6 <__multiply+0xb2>
 800b720:	9a01      	ldr	r2, [sp, #4]
 800b722:	f845 c002 	str.w	ip, [r5, r2]
 800b726:	9a03      	ldr	r2, [sp, #12]
 800b728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b72c:	3304      	adds	r3, #4
 800b72e:	f1b9 0f00 	cmp.w	r9, #0
 800b732:	d021      	beq.n	800b778 <__multiply+0x144>
 800b734:	6829      	ldr	r1, [r5, #0]
 800b736:	f104 0c14 	add.w	ip, r4, #20
 800b73a:	46ae      	mov	lr, r5
 800b73c:	f04f 0a00 	mov.w	sl, #0
 800b740:	f8bc b000 	ldrh.w	fp, [ip]
 800b744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b748:	fb09 220b 	mla	r2, r9, fp, r2
 800b74c:	4452      	add	r2, sl
 800b74e:	b289      	uxth	r1, r1
 800b750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b754:	f84e 1b04 	str.w	r1, [lr], #4
 800b758:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b75c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b760:	f8be 1000 	ldrh.w	r1, [lr]
 800b764:	fb09 110a 	mla	r1, r9, sl, r1
 800b768:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b76c:	4567      	cmp	r7, ip
 800b76e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b772:	d8e5      	bhi.n	800b740 <__multiply+0x10c>
 800b774:	9a01      	ldr	r2, [sp, #4]
 800b776:	50a9      	str	r1, [r5, r2]
 800b778:	3504      	adds	r5, #4
 800b77a:	e799      	b.n	800b6b0 <__multiply+0x7c>
 800b77c:	3e01      	subs	r6, #1
 800b77e:	e79b      	b.n	800b6b8 <__multiply+0x84>
 800b780:	0800d47e 	.word	0x0800d47e
 800b784:	0800d4ef 	.word	0x0800d4ef

0800b788 <__pow5mult>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	4615      	mov	r5, r2
 800b78e:	f012 0203 	ands.w	r2, r2, #3
 800b792:	4606      	mov	r6, r0
 800b794:	460f      	mov	r7, r1
 800b796:	d007      	beq.n	800b7a8 <__pow5mult+0x20>
 800b798:	4c25      	ldr	r4, [pc, #148]	; (800b830 <__pow5mult+0xa8>)
 800b79a:	3a01      	subs	r2, #1
 800b79c:	2300      	movs	r3, #0
 800b79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7a2:	f7ff fe53 	bl	800b44c <__multadd>
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	10ad      	asrs	r5, r5, #2
 800b7aa:	d03d      	beq.n	800b828 <__pow5mult+0xa0>
 800b7ac:	69f4      	ldr	r4, [r6, #28]
 800b7ae:	b97c      	cbnz	r4, 800b7d0 <__pow5mult+0x48>
 800b7b0:	2010      	movs	r0, #16
 800b7b2:	f7ff fd23 	bl	800b1fc <malloc>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	61f0      	str	r0, [r6, #28]
 800b7ba:	b928      	cbnz	r0, 800b7c8 <__pow5mult+0x40>
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <__pow5mult+0xac>)
 800b7be:	481e      	ldr	r0, [pc, #120]	; (800b838 <__pow5mult+0xb0>)
 800b7c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7c4:	f000 fcca 	bl	800c15c <__assert_func>
 800b7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7cc:	6004      	str	r4, [r0, #0]
 800b7ce:	60c4      	str	r4, [r0, #12]
 800b7d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7d8:	b94c      	cbnz	r4, 800b7ee <__pow5mult+0x66>
 800b7da:	f240 2171 	movw	r1, #625	; 0x271
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ff12 	bl	800b608 <__i2b>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	f04f 0900 	mov.w	r9, #0
 800b7f2:	07eb      	lsls	r3, r5, #31
 800b7f4:	d50a      	bpl.n	800b80c <__pow5mult+0x84>
 800b7f6:	4639      	mov	r1, r7
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7ff ff1a 	bl	800b634 <__multiply>
 800b800:	4639      	mov	r1, r7
 800b802:	4680      	mov	r8, r0
 800b804:	4630      	mov	r0, r6
 800b806:	f7ff fdff 	bl	800b408 <_Bfree>
 800b80a:	4647      	mov	r7, r8
 800b80c:	106d      	asrs	r5, r5, #1
 800b80e:	d00b      	beq.n	800b828 <__pow5mult+0xa0>
 800b810:	6820      	ldr	r0, [r4, #0]
 800b812:	b938      	cbnz	r0, 800b824 <__pow5mult+0x9c>
 800b814:	4622      	mov	r2, r4
 800b816:	4621      	mov	r1, r4
 800b818:	4630      	mov	r0, r6
 800b81a:	f7ff ff0b 	bl	800b634 <__multiply>
 800b81e:	6020      	str	r0, [r4, #0]
 800b820:	f8c0 9000 	str.w	r9, [r0]
 800b824:	4604      	mov	r4, r0
 800b826:	e7e4      	b.n	800b7f2 <__pow5mult+0x6a>
 800b828:	4638      	mov	r0, r7
 800b82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b82e:	bf00      	nop
 800b830:	0800d638 	.word	0x0800d638
 800b834:	0800d40f 	.word	0x0800d40f
 800b838:	0800d4ef 	.word	0x0800d4ef

0800b83c <__lshift>:
 800b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	460c      	mov	r4, r1
 800b842:	6849      	ldr	r1, [r1, #4]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	4607      	mov	r7, r0
 800b84e:	4691      	mov	r9, r2
 800b850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b854:	f108 0601 	add.w	r6, r8, #1
 800b858:	42b3      	cmp	r3, r6
 800b85a:	db0b      	blt.n	800b874 <__lshift+0x38>
 800b85c:	4638      	mov	r0, r7
 800b85e:	f7ff fd93 	bl	800b388 <_Balloc>
 800b862:	4605      	mov	r5, r0
 800b864:	b948      	cbnz	r0, 800b87a <__lshift+0x3e>
 800b866:	4602      	mov	r2, r0
 800b868:	4b28      	ldr	r3, [pc, #160]	; (800b90c <__lshift+0xd0>)
 800b86a:	4829      	ldr	r0, [pc, #164]	; (800b910 <__lshift+0xd4>)
 800b86c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b870:	f000 fc74 	bl	800c15c <__assert_func>
 800b874:	3101      	adds	r1, #1
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	e7ee      	b.n	800b858 <__lshift+0x1c>
 800b87a:	2300      	movs	r3, #0
 800b87c:	f100 0114 	add.w	r1, r0, #20
 800b880:	f100 0210 	add.w	r2, r0, #16
 800b884:	4618      	mov	r0, r3
 800b886:	4553      	cmp	r3, sl
 800b888:	db33      	blt.n	800b8f2 <__lshift+0xb6>
 800b88a:	6920      	ldr	r0, [r4, #16]
 800b88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b890:	f104 0314 	add.w	r3, r4, #20
 800b894:	f019 091f 	ands.w	r9, r9, #31
 800b898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b89c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8a0:	d02b      	beq.n	800b8fa <__lshift+0xbe>
 800b8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8a6:	468a      	mov	sl, r1
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b8b0:	4310      	orrs	r0, r2
 800b8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ba:	459c      	cmp	ip, r3
 800b8bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8c0:	d8f3      	bhi.n	800b8aa <__lshift+0x6e>
 800b8c2:	ebac 0304 	sub.w	r3, ip, r4
 800b8c6:	3b15      	subs	r3, #21
 800b8c8:	f023 0303 	bic.w	r3, r3, #3
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	f104 0015 	add.w	r0, r4, #21
 800b8d2:	4584      	cmp	ip, r0
 800b8d4:	bf38      	it	cc
 800b8d6:	2304      	movcc	r3, #4
 800b8d8:	50ca      	str	r2, [r1, r3]
 800b8da:	b10a      	cbz	r2, 800b8e0 <__lshift+0xa4>
 800b8dc:	f108 0602 	add.w	r6, r8, #2
 800b8e0:	3e01      	subs	r6, #1
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	612e      	str	r6, [r5, #16]
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	f7ff fd8e 	bl	800b408 <_Bfree>
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	e7c5      	b.n	800b886 <__lshift+0x4a>
 800b8fa:	3904      	subs	r1, #4
 800b8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b900:	f841 2f04 	str.w	r2, [r1, #4]!
 800b904:	459c      	cmp	ip, r3
 800b906:	d8f9      	bhi.n	800b8fc <__lshift+0xc0>
 800b908:	e7ea      	b.n	800b8e0 <__lshift+0xa4>
 800b90a:	bf00      	nop
 800b90c:	0800d47e 	.word	0x0800d47e
 800b910:	0800d4ef 	.word	0x0800d4ef

0800b914 <__mcmp>:
 800b914:	b530      	push	{r4, r5, lr}
 800b916:	6902      	ldr	r2, [r0, #16]
 800b918:	690c      	ldr	r4, [r1, #16]
 800b91a:	1b12      	subs	r2, r2, r4
 800b91c:	d10e      	bne.n	800b93c <__mcmp+0x28>
 800b91e:	f100 0314 	add.w	r3, r0, #20
 800b922:	3114      	adds	r1, #20
 800b924:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b928:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b92c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b930:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b934:	42a5      	cmp	r5, r4
 800b936:	d003      	beq.n	800b940 <__mcmp+0x2c>
 800b938:	d305      	bcc.n	800b946 <__mcmp+0x32>
 800b93a:	2201      	movs	r2, #1
 800b93c:	4610      	mov	r0, r2
 800b93e:	bd30      	pop	{r4, r5, pc}
 800b940:	4283      	cmp	r3, r0
 800b942:	d3f3      	bcc.n	800b92c <__mcmp+0x18>
 800b944:	e7fa      	b.n	800b93c <__mcmp+0x28>
 800b946:	f04f 32ff 	mov.w	r2, #4294967295
 800b94a:	e7f7      	b.n	800b93c <__mcmp+0x28>

0800b94c <__mdiff>:
 800b94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	4606      	mov	r6, r0
 800b954:	4611      	mov	r1, r2
 800b956:	4620      	mov	r0, r4
 800b958:	4690      	mov	r8, r2
 800b95a:	f7ff ffdb 	bl	800b914 <__mcmp>
 800b95e:	1e05      	subs	r5, r0, #0
 800b960:	d110      	bne.n	800b984 <__mdiff+0x38>
 800b962:	4629      	mov	r1, r5
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff fd0f 	bl	800b388 <_Balloc>
 800b96a:	b930      	cbnz	r0, 800b97a <__mdiff+0x2e>
 800b96c:	4b3a      	ldr	r3, [pc, #232]	; (800ba58 <__mdiff+0x10c>)
 800b96e:	4602      	mov	r2, r0
 800b970:	f240 2137 	movw	r1, #567	; 0x237
 800b974:	4839      	ldr	r0, [pc, #228]	; (800ba5c <__mdiff+0x110>)
 800b976:	f000 fbf1 	bl	800c15c <__assert_func>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b984:	bfa4      	itt	ge
 800b986:	4643      	movge	r3, r8
 800b988:	46a0      	movge	r8, r4
 800b98a:	4630      	mov	r0, r6
 800b98c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b990:	bfa6      	itte	ge
 800b992:	461c      	movge	r4, r3
 800b994:	2500      	movge	r5, #0
 800b996:	2501      	movlt	r5, #1
 800b998:	f7ff fcf6 	bl	800b388 <_Balloc>
 800b99c:	b920      	cbnz	r0, 800b9a8 <__mdiff+0x5c>
 800b99e:	4b2e      	ldr	r3, [pc, #184]	; (800ba58 <__mdiff+0x10c>)
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	f240 2145 	movw	r1, #581	; 0x245
 800b9a6:	e7e5      	b.n	800b974 <__mdiff+0x28>
 800b9a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9ac:	6926      	ldr	r6, [r4, #16]
 800b9ae:	60c5      	str	r5, [r0, #12]
 800b9b0:	f104 0914 	add.w	r9, r4, #20
 800b9b4:	f108 0514 	add.w	r5, r8, #20
 800b9b8:	f100 0e14 	add.w	lr, r0, #20
 800b9bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9c4:	f108 0210 	add.w	r2, r8, #16
 800b9c8:	46f2      	mov	sl, lr
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9d4:	fa11 f88b 	uxtah	r8, r1, fp
 800b9d8:	b299      	uxth	r1, r3
 800b9da:	0c1b      	lsrs	r3, r3, #16
 800b9dc:	eba8 0801 	sub.w	r8, r8, r1
 800b9e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9e8:	fa1f f888 	uxth.w	r8, r8
 800b9ec:	1419      	asrs	r1, r3, #16
 800b9ee:	454e      	cmp	r6, r9
 800b9f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9f4:	f84a 3b04 	str.w	r3, [sl], #4
 800b9f8:	d8e8      	bhi.n	800b9cc <__mdiff+0x80>
 800b9fa:	1b33      	subs	r3, r6, r4
 800b9fc:	3b15      	subs	r3, #21
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	3304      	adds	r3, #4
 800ba04:	3415      	adds	r4, #21
 800ba06:	42a6      	cmp	r6, r4
 800ba08:	bf38      	it	cc
 800ba0a:	2304      	movcc	r3, #4
 800ba0c:	441d      	add	r5, r3
 800ba0e:	4473      	add	r3, lr
 800ba10:	469e      	mov	lr, r3
 800ba12:	462e      	mov	r6, r5
 800ba14:	4566      	cmp	r6, ip
 800ba16:	d30e      	bcc.n	800ba36 <__mdiff+0xea>
 800ba18:	f10c 0203 	add.w	r2, ip, #3
 800ba1c:	1b52      	subs	r2, r2, r5
 800ba1e:	f022 0203 	bic.w	r2, r2, #3
 800ba22:	3d03      	subs	r5, #3
 800ba24:	45ac      	cmp	ip, r5
 800ba26:	bf38      	it	cc
 800ba28:	2200      	movcc	r2, #0
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba30:	b17a      	cbz	r2, 800ba52 <__mdiff+0x106>
 800ba32:	6107      	str	r7, [r0, #16]
 800ba34:	e7a4      	b.n	800b980 <__mdiff+0x34>
 800ba36:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba3a:	fa11 f288 	uxtah	r2, r1, r8
 800ba3e:	1414      	asrs	r4, r2, #16
 800ba40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba44:	b292      	uxth	r2, r2
 800ba46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba4a:	f84e 2b04 	str.w	r2, [lr], #4
 800ba4e:	1421      	asrs	r1, r4, #16
 800ba50:	e7e0      	b.n	800ba14 <__mdiff+0xc8>
 800ba52:	3f01      	subs	r7, #1
 800ba54:	e7ea      	b.n	800ba2c <__mdiff+0xe0>
 800ba56:	bf00      	nop
 800ba58:	0800d47e 	.word	0x0800d47e
 800ba5c:	0800d4ef 	.word	0x0800d4ef

0800ba60 <__ulp>:
 800ba60:	b082      	sub	sp, #8
 800ba62:	ed8d 0b00 	vstr	d0, [sp]
 800ba66:	9a01      	ldr	r2, [sp, #4]
 800ba68:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <__ulp+0x48>)
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	dc08      	bgt.n	800ba86 <__ulp+0x26>
 800ba74:	425b      	negs	r3, r3
 800ba76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ba7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba7e:	da04      	bge.n	800ba8a <__ulp+0x2a>
 800ba80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba84:	4113      	asrs	r3, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	e008      	b.n	800ba9c <__ulp+0x3c>
 800ba8a:	f1a2 0314 	sub.w	r3, r2, #20
 800ba8e:	2b1e      	cmp	r3, #30
 800ba90:	bfda      	itte	le
 800ba92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ba96:	40da      	lsrle	r2, r3
 800ba98:	2201      	movgt	r2, #1
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	ec41 0b10 	vmov	d0, r0, r1
 800baa4:	b002      	add	sp, #8
 800baa6:	4770      	bx	lr
 800baa8:	7ff00000 	.word	0x7ff00000

0800baac <__b2d>:
 800baac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab0:	6906      	ldr	r6, [r0, #16]
 800bab2:	f100 0814 	add.w	r8, r0, #20
 800bab6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800baba:	1f37      	subs	r7, r6, #4
 800babc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bac0:	4610      	mov	r0, r2
 800bac2:	f7ff fd53 	bl	800b56c <__hi0bits>
 800bac6:	f1c0 0320 	rsb	r3, r0, #32
 800baca:	280a      	cmp	r0, #10
 800bacc:	600b      	str	r3, [r1, #0]
 800bace:	491b      	ldr	r1, [pc, #108]	; (800bb3c <__b2d+0x90>)
 800bad0:	dc15      	bgt.n	800bafe <__b2d+0x52>
 800bad2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bad6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bada:	45b8      	cmp	r8, r7
 800badc:	ea43 0501 	orr.w	r5, r3, r1
 800bae0:	bf34      	ite	cc
 800bae2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bae6:	2300      	movcs	r3, #0
 800bae8:	3015      	adds	r0, #21
 800baea:	fa02 f000 	lsl.w	r0, r2, r0
 800baee:	fa23 f30c 	lsr.w	r3, r3, ip
 800baf2:	4303      	orrs	r3, r0
 800baf4:	461c      	mov	r4, r3
 800baf6:	ec45 4b10 	vmov	d0, r4, r5
 800bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafe:	45b8      	cmp	r8, r7
 800bb00:	bf3a      	itte	cc
 800bb02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb06:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb0a:	2300      	movcs	r3, #0
 800bb0c:	380b      	subs	r0, #11
 800bb0e:	d012      	beq.n	800bb36 <__b2d+0x8a>
 800bb10:	f1c0 0120 	rsb	r1, r0, #32
 800bb14:	fa23 f401 	lsr.w	r4, r3, r1
 800bb18:	4082      	lsls	r2, r0
 800bb1a:	4322      	orrs	r2, r4
 800bb1c:	4547      	cmp	r7, r8
 800bb1e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bb22:	bf8c      	ite	hi
 800bb24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb28:	2200      	movls	r2, #0
 800bb2a:	4083      	lsls	r3, r0
 800bb2c:	40ca      	lsrs	r2, r1
 800bb2e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb32:	4313      	orrs	r3, r2
 800bb34:	e7de      	b.n	800baf4 <__b2d+0x48>
 800bb36:	ea42 0501 	orr.w	r5, r2, r1
 800bb3a:	e7db      	b.n	800baf4 <__b2d+0x48>
 800bb3c:	3ff00000 	.word	0x3ff00000

0800bb40 <__d2b>:
 800bb40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb44:	460f      	mov	r7, r1
 800bb46:	2101      	movs	r1, #1
 800bb48:	ec59 8b10 	vmov	r8, r9, d0
 800bb4c:	4616      	mov	r6, r2
 800bb4e:	f7ff fc1b 	bl	800b388 <_Balloc>
 800bb52:	4604      	mov	r4, r0
 800bb54:	b930      	cbnz	r0, 800bb64 <__d2b+0x24>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b24      	ldr	r3, [pc, #144]	; (800bbec <__d2b+0xac>)
 800bb5a:	4825      	ldr	r0, [pc, #148]	; (800bbf0 <__d2b+0xb0>)
 800bb5c:	f240 310f 	movw	r1, #783	; 0x30f
 800bb60:	f000 fafc 	bl	800c15c <__assert_func>
 800bb64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb6c:	bb2d      	cbnz	r5, 800bbba <__d2b+0x7a>
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	f1b8 0300 	subs.w	r3, r8, #0
 800bb74:	d026      	beq.n	800bbc4 <__d2b+0x84>
 800bb76:	4668      	mov	r0, sp
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	f7ff fd17 	bl	800b5ac <__lo0bits>
 800bb7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb82:	b1e8      	cbz	r0, 800bbc0 <__d2b+0x80>
 800bb84:	f1c0 0320 	rsb	r3, r0, #32
 800bb88:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	40c2      	lsrs	r2, r0
 800bb90:	6163      	str	r3, [r4, #20]
 800bb92:	9201      	str	r2, [sp, #4]
 800bb94:	9b01      	ldr	r3, [sp, #4]
 800bb96:	61a3      	str	r3, [r4, #24]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bf14      	ite	ne
 800bb9c:	2202      	movne	r2, #2
 800bb9e:	2201      	moveq	r2, #1
 800bba0:	6122      	str	r2, [r4, #16]
 800bba2:	b1bd      	cbz	r5, 800bbd4 <__d2b+0x94>
 800bba4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bba8:	4405      	add	r5, r0
 800bbaa:	603d      	str	r5, [r7, #0]
 800bbac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbb0:	6030      	str	r0, [r6, #0]
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	b003      	add	sp, #12
 800bbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbbe:	e7d6      	b.n	800bb6e <__d2b+0x2e>
 800bbc0:	6161      	str	r1, [r4, #20]
 800bbc2:	e7e7      	b.n	800bb94 <__d2b+0x54>
 800bbc4:	a801      	add	r0, sp, #4
 800bbc6:	f7ff fcf1 	bl	800b5ac <__lo0bits>
 800bbca:	9b01      	ldr	r3, [sp, #4]
 800bbcc:	6163      	str	r3, [r4, #20]
 800bbce:	3020      	adds	r0, #32
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	e7e5      	b.n	800bba0 <__d2b+0x60>
 800bbd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbdc:	6038      	str	r0, [r7, #0]
 800bbde:	6918      	ldr	r0, [r3, #16]
 800bbe0:	f7ff fcc4 	bl	800b56c <__hi0bits>
 800bbe4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbe8:	e7e2      	b.n	800bbb0 <__d2b+0x70>
 800bbea:	bf00      	nop
 800bbec:	0800d47e 	.word	0x0800d47e
 800bbf0:	0800d4ef 	.word	0x0800d4ef

0800bbf4 <__ratio>:
 800bbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	4688      	mov	r8, r1
 800bbfa:	4669      	mov	r1, sp
 800bbfc:	4681      	mov	r9, r0
 800bbfe:	f7ff ff55 	bl	800baac <__b2d>
 800bc02:	a901      	add	r1, sp, #4
 800bc04:	4640      	mov	r0, r8
 800bc06:	ec55 4b10 	vmov	r4, r5, d0
 800bc0a:	f7ff ff4f 	bl	800baac <__b2d>
 800bc0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bc16:	eba3 0c02 	sub.w	ip, r3, r2
 800bc1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc24:	ec51 0b10 	vmov	r0, r1, d0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	bfd6      	itet	le
 800bc2c:	460a      	movle	r2, r1
 800bc2e:	462a      	movgt	r2, r5
 800bc30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc34:	468b      	mov	fp, r1
 800bc36:	462f      	mov	r7, r5
 800bc38:	bfd4      	ite	le
 800bc3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc42:	4620      	mov	r0, r4
 800bc44:	ee10 2a10 	vmov	r2, s0
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4639      	mov	r1, r7
 800bc4c:	f7f4 fe16 	bl	800087c <__aeabi_ddiv>
 800bc50:	ec41 0b10 	vmov	d0, r0, r1
 800bc54:	b003      	add	sp, #12
 800bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc5a <__copybits>:
 800bc5a:	3901      	subs	r1, #1
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	1149      	asrs	r1, r1, #5
 800bc60:	6914      	ldr	r4, [r2, #16]
 800bc62:	3101      	adds	r1, #1
 800bc64:	f102 0314 	add.w	r3, r2, #20
 800bc68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc70:	1f05      	subs	r5, r0, #4
 800bc72:	42a3      	cmp	r3, r4
 800bc74:	d30c      	bcc.n	800bc90 <__copybits+0x36>
 800bc76:	1aa3      	subs	r3, r4, r2
 800bc78:	3b11      	subs	r3, #17
 800bc7a:	f023 0303 	bic.w	r3, r3, #3
 800bc7e:	3211      	adds	r2, #17
 800bc80:	42a2      	cmp	r2, r4
 800bc82:	bf88      	it	hi
 800bc84:	2300      	movhi	r3, #0
 800bc86:	4418      	add	r0, r3
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4288      	cmp	r0, r1
 800bc8c:	d305      	bcc.n	800bc9a <__copybits+0x40>
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}
 800bc90:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc94:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc98:	e7eb      	b.n	800bc72 <__copybits+0x18>
 800bc9a:	f840 3b04 	str.w	r3, [r0], #4
 800bc9e:	e7f4      	b.n	800bc8a <__copybits+0x30>

0800bca0 <__any_on>:
 800bca0:	f100 0214 	add.w	r2, r0, #20
 800bca4:	6900      	ldr	r0, [r0, #16]
 800bca6:	114b      	asrs	r3, r1, #5
 800bca8:	4298      	cmp	r0, r3
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	db11      	blt.n	800bcd2 <__any_on+0x32>
 800bcae:	dd0a      	ble.n	800bcc6 <__any_on+0x26>
 800bcb0:	f011 011f 	ands.w	r1, r1, #31
 800bcb4:	d007      	beq.n	800bcc6 <__any_on+0x26>
 800bcb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcba:	fa24 f001 	lsr.w	r0, r4, r1
 800bcbe:	fa00 f101 	lsl.w	r1, r0, r1
 800bcc2:	428c      	cmp	r4, r1
 800bcc4:	d10b      	bne.n	800bcde <__any_on+0x3e>
 800bcc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d803      	bhi.n	800bcd6 <__any_on+0x36>
 800bcce:	2000      	movs	r0, #0
 800bcd0:	bd10      	pop	{r4, pc}
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	e7f7      	b.n	800bcc6 <__any_on+0x26>
 800bcd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcda:	2900      	cmp	r1, #0
 800bcdc:	d0f5      	beq.n	800bcca <__any_on+0x2a>
 800bcde:	2001      	movs	r0, #1
 800bce0:	e7f6      	b.n	800bcd0 <__any_on+0x30>

0800bce2 <__ascii_wctomb>:
 800bce2:	b149      	cbz	r1, 800bcf8 <__ascii_wctomb+0x16>
 800bce4:	2aff      	cmp	r2, #255	; 0xff
 800bce6:	bf85      	ittet	hi
 800bce8:	238a      	movhi	r3, #138	; 0x8a
 800bcea:	6003      	strhi	r3, [r0, #0]
 800bcec:	700a      	strbls	r2, [r1, #0]
 800bcee:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcf2:	bf98      	it	ls
 800bcf4:	2001      	movls	r0, #1
 800bcf6:	4770      	bx	lr
 800bcf8:	4608      	mov	r0, r1
 800bcfa:	4770      	bx	lr

0800bcfc <__ssputs_r>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	688e      	ldr	r6, [r1, #8]
 800bd02:	461f      	mov	r7, r3
 800bd04:	42be      	cmp	r6, r7
 800bd06:	680b      	ldr	r3, [r1, #0]
 800bd08:	4682      	mov	sl, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	4690      	mov	r8, r2
 800bd0e:	d82c      	bhi.n	800bd6a <__ssputs_r+0x6e>
 800bd10:	898a      	ldrh	r2, [r1, #12]
 800bd12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd16:	d026      	beq.n	800bd66 <__ssputs_r+0x6a>
 800bd18:	6965      	ldr	r5, [r4, #20]
 800bd1a:	6909      	ldr	r1, [r1, #16]
 800bd1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd20:	eba3 0901 	sub.w	r9, r3, r1
 800bd24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd28:	1c7b      	adds	r3, r7, #1
 800bd2a:	444b      	add	r3, r9
 800bd2c:	106d      	asrs	r5, r5, #1
 800bd2e:	429d      	cmp	r5, r3
 800bd30:	bf38      	it	cc
 800bd32:	461d      	movcc	r5, r3
 800bd34:	0553      	lsls	r3, r2, #21
 800bd36:	d527      	bpl.n	800bd88 <__ssputs_r+0x8c>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7ff fa87 	bl	800b24c <_malloc_r>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	b360      	cbz	r0, 800bd9c <__ssputs_r+0xa0>
 800bd42:	6921      	ldr	r1, [r4, #16]
 800bd44:	464a      	mov	r2, r9
 800bd46:	f7fe f81c 	bl	8009d82 <memcpy>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	6126      	str	r6, [r4, #16]
 800bd58:	6165      	str	r5, [r4, #20]
 800bd5a:	444e      	add	r6, r9
 800bd5c:	eba5 0509 	sub.w	r5, r5, r9
 800bd60:	6026      	str	r6, [r4, #0]
 800bd62:	60a5      	str	r5, [r4, #8]
 800bd64:	463e      	mov	r6, r7
 800bd66:	42be      	cmp	r6, r7
 800bd68:	d900      	bls.n	800bd6c <__ssputs_r+0x70>
 800bd6a:	463e      	mov	r6, r7
 800bd6c:	6820      	ldr	r0, [r4, #0]
 800bd6e:	4632      	mov	r2, r6
 800bd70:	4641      	mov	r1, r8
 800bd72:	f000 f9c9 	bl	800c108 <memmove>
 800bd76:	68a3      	ldr	r3, [r4, #8]
 800bd78:	1b9b      	subs	r3, r3, r6
 800bd7a:	60a3      	str	r3, [r4, #8]
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	4433      	add	r3, r6
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	2000      	movs	r0, #0
 800bd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd88:	462a      	mov	r2, r5
 800bd8a:	f000 fa1b 	bl	800c1c4 <_realloc_r>
 800bd8e:	4606      	mov	r6, r0
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d1e0      	bne.n	800bd56 <__ssputs_r+0x5a>
 800bd94:	6921      	ldr	r1, [r4, #16]
 800bd96:	4650      	mov	r0, sl
 800bd98:	f7fe fe8c 	bl	800aab4 <_free_r>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	f8ca 3000 	str.w	r3, [sl]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda8:	81a3      	strh	r3, [r4, #12]
 800bdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bdae:	e7e9      	b.n	800bd84 <__ssputs_r+0x88>

0800bdb0 <_svfiprintf_r>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	4698      	mov	r8, r3
 800bdb6:	898b      	ldrh	r3, [r1, #12]
 800bdb8:	061b      	lsls	r3, r3, #24
 800bdba:	b09d      	sub	sp, #116	; 0x74
 800bdbc:	4607      	mov	r7, r0
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	d50e      	bpl.n	800bde2 <_svfiprintf_r+0x32>
 800bdc4:	690b      	ldr	r3, [r1, #16]
 800bdc6:	b963      	cbnz	r3, 800bde2 <_svfiprintf_r+0x32>
 800bdc8:	2140      	movs	r1, #64	; 0x40
 800bdca:	f7ff fa3f 	bl	800b24c <_malloc_r>
 800bdce:	6028      	str	r0, [r5, #0]
 800bdd0:	6128      	str	r0, [r5, #16]
 800bdd2:	b920      	cbnz	r0, 800bdde <_svfiprintf_r+0x2e>
 800bdd4:	230c      	movs	r3, #12
 800bdd6:	603b      	str	r3, [r7, #0]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bddc:	e0d0      	b.n	800bf80 <_svfiprintf_r+0x1d0>
 800bdde:	2340      	movs	r3, #64	; 0x40
 800bde0:	616b      	str	r3, [r5, #20]
 800bde2:	2300      	movs	r3, #0
 800bde4:	9309      	str	r3, [sp, #36]	; 0x24
 800bde6:	2320      	movs	r3, #32
 800bde8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdf0:	2330      	movs	r3, #48	; 0x30
 800bdf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf98 <_svfiprintf_r+0x1e8>
 800bdf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdfa:	f04f 0901 	mov.w	r9, #1
 800bdfe:	4623      	mov	r3, r4
 800be00:	469a      	mov	sl, r3
 800be02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be06:	b10a      	cbz	r2, 800be0c <_svfiprintf_r+0x5c>
 800be08:	2a25      	cmp	r2, #37	; 0x25
 800be0a:	d1f9      	bne.n	800be00 <_svfiprintf_r+0x50>
 800be0c:	ebba 0b04 	subs.w	fp, sl, r4
 800be10:	d00b      	beq.n	800be2a <_svfiprintf_r+0x7a>
 800be12:	465b      	mov	r3, fp
 800be14:	4622      	mov	r2, r4
 800be16:	4629      	mov	r1, r5
 800be18:	4638      	mov	r0, r7
 800be1a:	f7ff ff6f 	bl	800bcfc <__ssputs_r>
 800be1e:	3001      	adds	r0, #1
 800be20:	f000 80a9 	beq.w	800bf76 <_svfiprintf_r+0x1c6>
 800be24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be26:	445a      	add	r2, fp
 800be28:	9209      	str	r2, [sp, #36]	; 0x24
 800be2a:	f89a 3000 	ldrb.w	r3, [sl]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80a1 	beq.w	800bf76 <_svfiprintf_r+0x1c6>
 800be34:	2300      	movs	r3, #0
 800be36:	f04f 32ff 	mov.w	r2, #4294967295
 800be3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3e:	f10a 0a01 	add.w	sl, sl, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	9307      	str	r3, [sp, #28]
 800be46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be4a:	931a      	str	r3, [sp, #104]	; 0x68
 800be4c:	4654      	mov	r4, sl
 800be4e:	2205      	movs	r2, #5
 800be50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be54:	4850      	ldr	r0, [pc, #320]	; (800bf98 <_svfiprintf_r+0x1e8>)
 800be56:	f7f4 f9d3 	bl	8000200 <memchr>
 800be5a:	9a04      	ldr	r2, [sp, #16]
 800be5c:	b9d8      	cbnz	r0, 800be96 <_svfiprintf_r+0xe6>
 800be5e:	06d0      	lsls	r0, r2, #27
 800be60:	bf44      	itt	mi
 800be62:	2320      	movmi	r3, #32
 800be64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be68:	0711      	lsls	r1, r2, #28
 800be6a:	bf44      	itt	mi
 800be6c:	232b      	movmi	r3, #43	; 0x2b
 800be6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be72:	f89a 3000 	ldrb.w	r3, [sl]
 800be76:	2b2a      	cmp	r3, #42	; 0x2a
 800be78:	d015      	beq.n	800bea6 <_svfiprintf_r+0xf6>
 800be7a:	9a07      	ldr	r2, [sp, #28]
 800be7c:	4654      	mov	r4, sl
 800be7e:	2000      	movs	r0, #0
 800be80:	f04f 0c0a 	mov.w	ip, #10
 800be84:	4621      	mov	r1, r4
 800be86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be8a:	3b30      	subs	r3, #48	; 0x30
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	d94d      	bls.n	800bf2c <_svfiprintf_r+0x17c>
 800be90:	b1b0      	cbz	r0, 800bec0 <_svfiprintf_r+0x110>
 800be92:	9207      	str	r2, [sp, #28]
 800be94:	e014      	b.n	800bec0 <_svfiprintf_r+0x110>
 800be96:	eba0 0308 	sub.w	r3, r0, r8
 800be9a:	fa09 f303 	lsl.w	r3, r9, r3
 800be9e:	4313      	orrs	r3, r2
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	46a2      	mov	sl, r4
 800bea4:	e7d2      	b.n	800be4c <_svfiprintf_r+0x9c>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	1d19      	adds	r1, r3, #4
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	9103      	str	r1, [sp, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	bfbb      	ittet	lt
 800beb2:	425b      	neglt	r3, r3
 800beb4:	f042 0202 	orrlt.w	r2, r2, #2
 800beb8:	9307      	strge	r3, [sp, #28]
 800beba:	9307      	strlt	r3, [sp, #28]
 800bebc:	bfb8      	it	lt
 800bebe:	9204      	strlt	r2, [sp, #16]
 800bec0:	7823      	ldrb	r3, [r4, #0]
 800bec2:	2b2e      	cmp	r3, #46	; 0x2e
 800bec4:	d10c      	bne.n	800bee0 <_svfiprintf_r+0x130>
 800bec6:	7863      	ldrb	r3, [r4, #1]
 800bec8:	2b2a      	cmp	r3, #42	; 0x2a
 800beca:	d134      	bne.n	800bf36 <_svfiprintf_r+0x186>
 800becc:	9b03      	ldr	r3, [sp, #12]
 800bece:	1d1a      	adds	r2, r3, #4
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	9203      	str	r2, [sp, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bfb8      	it	lt
 800bed8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bedc:	3402      	adds	r4, #2
 800bede:	9305      	str	r3, [sp, #20]
 800bee0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bfa8 <_svfiprintf_r+0x1f8>
 800bee4:	7821      	ldrb	r1, [r4, #0]
 800bee6:	2203      	movs	r2, #3
 800bee8:	4650      	mov	r0, sl
 800beea:	f7f4 f989 	bl	8000200 <memchr>
 800beee:	b138      	cbz	r0, 800bf00 <_svfiprintf_r+0x150>
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	eba0 000a 	sub.w	r0, r0, sl
 800bef6:	2240      	movs	r2, #64	; 0x40
 800bef8:	4082      	lsls	r2, r0
 800befa:	4313      	orrs	r3, r2
 800befc:	3401      	adds	r4, #1
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf04:	4825      	ldr	r0, [pc, #148]	; (800bf9c <_svfiprintf_r+0x1ec>)
 800bf06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf0a:	2206      	movs	r2, #6
 800bf0c:	f7f4 f978 	bl	8000200 <memchr>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d038      	beq.n	800bf86 <_svfiprintf_r+0x1d6>
 800bf14:	4b22      	ldr	r3, [pc, #136]	; (800bfa0 <_svfiprintf_r+0x1f0>)
 800bf16:	bb1b      	cbnz	r3, 800bf60 <_svfiprintf_r+0x1b0>
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	3307      	adds	r3, #7
 800bf1c:	f023 0307 	bic.w	r3, r3, #7
 800bf20:	3308      	adds	r3, #8
 800bf22:	9303      	str	r3, [sp, #12]
 800bf24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf26:	4433      	add	r3, r6
 800bf28:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2a:	e768      	b.n	800bdfe <_svfiprintf_r+0x4e>
 800bf2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf30:	460c      	mov	r4, r1
 800bf32:	2001      	movs	r0, #1
 800bf34:	e7a6      	b.n	800be84 <_svfiprintf_r+0xd4>
 800bf36:	2300      	movs	r3, #0
 800bf38:	3401      	adds	r4, #1
 800bf3a:	9305      	str	r3, [sp, #20]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	f04f 0c0a 	mov.w	ip, #10
 800bf42:	4620      	mov	r0, r4
 800bf44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf48:	3a30      	subs	r2, #48	; 0x30
 800bf4a:	2a09      	cmp	r2, #9
 800bf4c:	d903      	bls.n	800bf56 <_svfiprintf_r+0x1a6>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d0c6      	beq.n	800bee0 <_svfiprintf_r+0x130>
 800bf52:	9105      	str	r1, [sp, #20]
 800bf54:	e7c4      	b.n	800bee0 <_svfiprintf_r+0x130>
 800bf56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	e7f0      	b.n	800bf42 <_svfiprintf_r+0x192>
 800bf60:	ab03      	add	r3, sp, #12
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	462a      	mov	r2, r5
 800bf66:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <_svfiprintf_r+0x1f4>)
 800bf68:	a904      	add	r1, sp, #16
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	f7fc ff0c 	bl	8008d88 <_printf_float>
 800bf70:	1c42      	adds	r2, r0, #1
 800bf72:	4606      	mov	r6, r0
 800bf74:	d1d6      	bne.n	800bf24 <_svfiprintf_r+0x174>
 800bf76:	89ab      	ldrh	r3, [r5, #12]
 800bf78:	065b      	lsls	r3, r3, #25
 800bf7a:	f53f af2d 	bmi.w	800bdd8 <_svfiprintf_r+0x28>
 800bf7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf80:	b01d      	add	sp, #116	; 0x74
 800bf82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf86:	ab03      	add	r3, sp, #12
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <_svfiprintf_r+0x1f4>)
 800bf8e:	a904      	add	r1, sp, #16
 800bf90:	4638      	mov	r0, r7
 800bf92:	f7fd f99d 	bl	80092d0 <_printf_i>
 800bf96:	e7eb      	b.n	800bf70 <_svfiprintf_r+0x1c0>
 800bf98:	0800d644 	.word	0x0800d644
 800bf9c:	0800d64e 	.word	0x0800d64e
 800bfa0:	08008d89 	.word	0x08008d89
 800bfa4:	0800bcfd 	.word	0x0800bcfd
 800bfa8:	0800d64a 	.word	0x0800d64a

0800bfac <__sflush_r>:
 800bfac:	898a      	ldrh	r2, [r1, #12]
 800bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	0710      	lsls	r0, r2, #28
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	d458      	bmi.n	800c06c <__sflush_r+0xc0>
 800bfba:	684b      	ldr	r3, [r1, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dc05      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc02      	bgt.n	800bfcc <__sflush_r+0x20>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d0f9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfd8:	682f      	ldr	r7, [r5, #0]
 800bfda:	6a21      	ldr	r1, [r4, #32]
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	d032      	beq.n	800c046 <__sflush_r+0x9a>
 800bfe0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	075a      	lsls	r2, r3, #29
 800bfe6:	d505      	bpl.n	800bff4 <__sflush_r+0x48>
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfee:	b10b      	cbz	r3, 800bff4 <__sflush_r+0x48>
 800bff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bff2:	1ac0      	subs	r0, r0, r3
 800bff4:	2300      	movs	r3, #0
 800bff6:	4602      	mov	r2, r0
 800bff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bffa:	6a21      	ldr	r1, [r4, #32]
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b0      	blx	r6
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	d106      	bne.n	800c014 <__sflush_r+0x68>
 800c006:	6829      	ldr	r1, [r5, #0]
 800c008:	291d      	cmp	r1, #29
 800c00a:	d82b      	bhi.n	800c064 <__sflush_r+0xb8>
 800c00c:	4a29      	ldr	r2, [pc, #164]	; (800c0b4 <__sflush_r+0x108>)
 800c00e:	410a      	asrs	r2, r1
 800c010:	07d6      	lsls	r6, r2, #31
 800c012:	d427      	bmi.n	800c064 <__sflush_r+0xb8>
 800c014:	2200      	movs	r2, #0
 800c016:	6062      	str	r2, [r4, #4]
 800c018:	04d9      	lsls	r1, r3, #19
 800c01a:	6922      	ldr	r2, [r4, #16]
 800c01c:	6022      	str	r2, [r4, #0]
 800c01e:	d504      	bpl.n	800c02a <__sflush_r+0x7e>
 800c020:	1c42      	adds	r2, r0, #1
 800c022:	d101      	bne.n	800c028 <__sflush_r+0x7c>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b903      	cbnz	r3, 800c02a <__sflush_r+0x7e>
 800c028:	6560      	str	r0, [r4, #84]	; 0x54
 800c02a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c02c:	602f      	str	r7, [r5, #0]
 800c02e:	2900      	cmp	r1, #0
 800c030:	d0c9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c036:	4299      	cmp	r1, r3
 800c038:	d002      	beq.n	800c040 <__sflush_r+0x94>
 800c03a:	4628      	mov	r0, r5
 800c03c:	f7fe fd3a 	bl	800aab4 <_free_r>
 800c040:	2000      	movs	r0, #0
 800c042:	6360      	str	r0, [r4, #52]	; 0x34
 800c044:	e7c0      	b.n	800bfc8 <__sflush_r+0x1c>
 800c046:	2301      	movs	r3, #1
 800c048:	4628      	mov	r0, r5
 800c04a:	47b0      	blx	r6
 800c04c:	1c41      	adds	r1, r0, #1
 800c04e:	d1c8      	bne.n	800bfe2 <__sflush_r+0x36>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0c5      	beq.n	800bfe2 <__sflush_r+0x36>
 800c056:	2b1d      	cmp	r3, #29
 800c058:	d001      	beq.n	800c05e <__sflush_r+0xb2>
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	d101      	bne.n	800c062 <__sflush_r+0xb6>
 800c05e:	602f      	str	r7, [r5, #0]
 800c060:	e7b1      	b.n	800bfc6 <__sflush_r+0x1a>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c068:	81a3      	strh	r3, [r4, #12]
 800c06a:	e7ad      	b.n	800bfc8 <__sflush_r+0x1c>
 800c06c:	690f      	ldr	r7, [r1, #16]
 800c06e:	2f00      	cmp	r7, #0
 800c070:	d0a9      	beq.n	800bfc6 <__sflush_r+0x1a>
 800c072:	0793      	lsls	r3, r2, #30
 800c074:	680e      	ldr	r6, [r1, #0]
 800c076:	bf08      	it	eq
 800c078:	694b      	ldreq	r3, [r1, #20]
 800c07a:	600f      	str	r7, [r1, #0]
 800c07c:	bf18      	it	ne
 800c07e:	2300      	movne	r3, #0
 800c080:	eba6 0807 	sub.w	r8, r6, r7
 800c084:	608b      	str	r3, [r1, #8]
 800c086:	f1b8 0f00 	cmp.w	r8, #0
 800c08a:	dd9c      	ble.n	800bfc6 <__sflush_r+0x1a>
 800c08c:	6a21      	ldr	r1, [r4, #32]
 800c08e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c090:	4643      	mov	r3, r8
 800c092:	463a      	mov	r2, r7
 800c094:	4628      	mov	r0, r5
 800c096:	47b0      	blx	r6
 800c098:	2800      	cmp	r0, #0
 800c09a:	dc06      	bgt.n	800c0aa <__sflush_r+0xfe>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	e78e      	b.n	800bfc8 <__sflush_r+0x1c>
 800c0aa:	4407      	add	r7, r0
 800c0ac:	eba8 0800 	sub.w	r8, r8, r0
 800c0b0:	e7e9      	b.n	800c086 <__sflush_r+0xda>
 800c0b2:	bf00      	nop
 800c0b4:	dfbffffe 	.word	0xdfbffffe

0800c0b8 <_fflush_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	690b      	ldr	r3, [r1, #16]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b913      	cbnz	r3, 800c0c8 <_fflush_r+0x10>
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	b118      	cbz	r0, 800c0d2 <_fflush_r+0x1a>
 800c0ca:	6a03      	ldr	r3, [r0, #32]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <_fflush_r+0x1a>
 800c0ce:	f7fd fcbd 	bl	8009a4c <__sinit>
 800c0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0f3      	beq.n	800c0c2 <_fflush_r+0xa>
 800c0da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0dc:	07d0      	lsls	r0, r2, #31
 800c0de:	d404      	bmi.n	800c0ea <_fflush_r+0x32>
 800c0e0:	0599      	lsls	r1, r3, #22
 800c0e2:	d402      	bmi.n	800c0ea <_fflush_r+0x32>
 800c0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0e6:	f7fd fe4a 	bl	8009d7e <__retarget_lock_acquire_recursive>
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f7ff ff5d 	bl	800bfac <__sflush_r>
 800c0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0f4:	07da      	lsls	r2, r3, #31
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	d4e4      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	059b      	lsls	r3, r3, #22
 800c0fe:	d4e1      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c102:	f7fd fe3d 	bl	8009d80 <__retarget_lock_release_recursive>
 800c106:	e7dd      	b.n	800c0c4 <_fflush_r+0xc>

0800c108 <memmove>:
 800c108:	4288      	cmp	r0, r1
 800c10a:	b510      	push	{r4, lr}
 800c10c:	eb01 0402 	add.w	r4, r1, r2
 800c110:	d902      	bls.n	800c118 <memmove+0x10>
 800c112:	4284      	cmp	r4, r0
 800c114:	4623      	mov	r3, r4
 800c116:	d807      	bhi.n	800c128 <memmove+0x20>
 800c118:	1e43      	subs	r3, r0, #1
 800c11a:	42a1      	cmp	r1, r4
 800c11c:	d008      	beq.n	800c130 <memmove+0x28>
 800c11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c126:	e7f8      	b.n	800c11a <memmove+0x12>
 800c128:	4402      	add	r2, r0
 800c12a:	4601      	mov	r1, r0
 800c12c:	428a      	cmp	r2, r1
 800c12e:	d100      	bne.n	800c132 <memmove+0x2a>
 800c130:	bd10      	pop	{r4, pc}
 800c132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c13a:	e7f7      	b.n	800c12c <memmove+0x24>

0800c13c <_sbrk_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	; (800c158 <_sbrk_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f6 faf4 	bl	8002734 <_sbrk>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_sbrk_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_sbrk_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20004818 	.word	0x20004818

0800c15c <__assert_func>:
 800c15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c15e:	4614      	mov	r4, r2
 800c160:	461a      	mov	r2, r3
 800c162:	4b09      	ldr	r3, [pc, #36]	; (800c188 <__assert_func+0x2c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4605      	mov	r5, r0
 800c168:	68d8      	ldr	r0, [r3, #12]
 800c16a:	b14c      	cbz	r4, 800c180 <__assert_func+0x24>
 800c16c:	4b07      	ldr	r3, [pc, #28]	; (800c18c <__assert_func+0x30>)
 800c16e:	9100      	str	r1, [sp, #0]
 800c170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c174:	4906      	ldr	r1, [pc, #24]	; (800c190 <__assert_func+0x34>)
 800c176:	462b      	mov	r3, r5
 800c178:	f000 f854 	bl	800c224 <fiprintf>
 800c17c:	f000 f864 	bl	800c248 <abort>
 800c180:	4b04      	ldr	r3, [pc, #16]	; (800c194 <__assert_func+0x38>)
 800c182:	461c      	mov	r4, r3
 800c184:	e7f3      	b.n	800c16e <__assert_func+0x12>
 800c186:	bf00      	nop
 800c188:	200001e4 	.word	0x200001e4
 800c18c:	0800d655 	.word	0x0800d655
 800c190:	0800d662 	.word	0x0800d662
 800c194:	0800d690 	.word	0x0800d690

0800c198 <_calloc_r>:
 800c198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c19a:	fba1 2402 	umull	r2, r4, r1, r2
 800c19e:	b94c      	cbnz	r4, 800c1b4 <_calloc_r+0x1c>
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	9201      	str	r2, [sp, #4]
 800c1a4:	f7ff f852 	bl	800b24c <_malloc_r>
 800c1a8:	9a01      	ldr	r2, [sp, #4]
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	b930      	cbnz	r0, 800c1bc <_calloc_r+0x24>
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	b003      	add	sp, #12
 800c1b2:	bd30      	pop	{r4, r5, pc}
 800c1b4:	220c      	movs	r2, #12
 800c1b6:	6002      	str	r2, [r0, #0]
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	e7f8      	b.n	800c1ae <_calloc_r+0x16>
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f7fd fcde 	bl	8009b7e <memset>
 800c1c2:	e7f4      	b.n	800c1ae <_calloc_r+0x16>

0800c1c4 <_realloc_r>:
 800c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	4614      	mov	r4, r2
 800c1cc:	460e      	mov	r6, r1
 800c1ce:	b921      	cbnz	r1, 800c1da <_realloc_r+0x16>
 800c1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	f7ff b839 	b.w	800b24c <_malloc_r>
 800c1da:	b92a      	cbnz	r2, 800c1e8 <_realloc_r+0x24>
 800c1dc:	f7fe fc6a 	bl	800aab4 <_free_r>
 800c1e0:	4625      	mov	r5, r4
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e8:	f000 f835 	bl	800c256 <_malloc_usable_size_r>
 800c1ec:	4284      	cmp	r4, r0
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	d802      	bhi.n	800c1f8 <_realloc_r+0x34>
 800c1f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1f6:	d812      	bhi.n	800c21e <_realloc_r+0x5a>
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f7ff f826 	bl	800b24c <_malloc_r>
 800c200:	4605      	mov	r5, r0
 800c202:	2800      	cmp	r0, #0
 800c204:	d0ed      	beq.n	800c1e2 <_realloc_r+0x1e>
 800c206:	42bc      	cmp	r4, r7
 800c208:	4622      	mov	r2, r4
 800c20a:	4631      	mov	r1, r6
 800c20c:	bf28      	it	cs
 800c20e:	463a      	movcs	r2, r7
 800c210:	f7fd fdb7 	bl	8009d82 <memcpy>
 800c214:	4631      	mov	r1, r6
 800c216:	4640      	mov	r0, r8
 800c218:	f7fe fc4c 	bl	800aab4 <_free_r>
 800c21c:	e7e1      	b.n	800c1e2 <_realloc_r+0x1e>
 800c21e:	4635      	mov	r5, r6
 800c220:	e7df      	b.n	800c1e2 <_realloc_r+0x1e>
	...

0800c224 <fiprintf>:
 800c224:	b40e      	push	{r1, r2, r3}
 800c226:	b503      	push	{r0, r1, lr}
 800c228:	4601      	mov	r1, r0
 800c22a:	ab03      	add	r3, sp, #12
 800c22c:	4805      	ldr	r0, [pc, #20]	; (800c244 <fiprintf+0x20>)
 800c22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c232:	6800      	ldr	r0, [r0, #0]
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	f000 f83f 	bl	800c2b8 <_vfiprintf_r>
 800c23a:	b002      	add	sp, #8
 800c23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c240:	b003      	add	sp, #12
 800c242:	4770      	bx	lr
 800c244:	200001e4 	.word	0x200001e4

0800c248 <abort>:
 800c248:	b508      	push	{r3, lr}
 800c24a:	2006      	movs	r0, #6
 800c24c:	f000 fa0c 	bl	800c668 <raise>
 800c250:	2001      	movs	r0, #1
 800c252:	f7f6 f9f7 	bl	8002644 <_exit>

0800c256 <_malloc_usable_size_r>:
 800c256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25a:	1f18      	subs	r0, r3, #4
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bfbc      	itt	lt
 800c260:	580b      	ldrlt	r3, [r1, r0]
 800c262:	18c0      	addlt	r0, r0, r3
 800c264:	4770      	bx	lr

0800c266 <__sfputc_r>:
 800c266:	6893      	ldr	r3, [r2, #8]
 800c268:	3b01      	subs	r3, #1
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	b410      	push	{r4}
 800c26e:	6093      	str	r3, [r2, #8]
 800c270:	da08      	bge.n	800c284 <__sfputc_r+0x1e>
 800c272:	6994      	ldr	r4, [r2, #24]
 800c274:	42a3      	cmp	r3, r4
 800c276:	db01      	blt.n	800c27c <__sfputc_r+0x16>
 800c278:	290a      	cmp	r1, #10
 800c27a:	d103      	bne.n	800c284 <__sfputc_r+0x1e>
 800c27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c280:	f000 b934 	b.w	800c4ec <__swbuf_r>
 800c284:	6813      	ldr	r3, [r2, #0]
 800c286:	1c58      	adds	r0, r3, #1
 800c288:	6010      	str	r0, [r2, #0]
 800c28a:	7019      	strb	r1, [r3, #0]
 800c28c:	4608      	mov	r0, r1
 800c28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <__sfputs_r>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	4606      	mov	r6, r0
 800c298:	460f      	mov	r7, r1
 800c29a:	4614      	mov	r4, r2
 800c29c:	18d5      	adds	r5, r2, r3
 800c29e:	42ac      	cmp	r4, r5
 800c2a0:	d101      	bne.n	800c2a6 <__sfputs_r+0x12>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e007      	b.n	800c2b6 <__sfputs_r+0x22>
 800c2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	f7ff ffda 	bl	800c266 <__sfputc_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	d1f3      	bne.n	800c29e <__sfputs_r+0xa>
 800c2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c2b8 <_vfiprintf_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	460d      	mov	r5, r1
 800c2be:	b09d      	sub	sp, #116	; 0x74
 800c2c0:	4614      	mov	r4, r2
 800c2c2:	4698      	mov	r8, r3
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	b118      	cbz	r0, 800c2d0 <_vfiprintf_r+0x18>
 800c2c8:	6a03      	ldr	r3, [r0, #32]
 800c2ca:	b90b      	cbnz	r3, 800c2d0 <_vfiprintf_r+0x18>
 800c2cc:	f7fd fbbe 	bl	8009a4c <__sinit>
 800c2d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d2:	07d9      	lsls	r1, r3, #31
 800c2d4:	d405      	bmi.n	800c2e2 <_vfiprintf_r+0x2a>
 800c2d6:	89ab      	ldrh	r3, [r5, #12]
 800c2d8:	059a      	lsls	r2, r3, #22
 800c2da:	d402      	bmi.n	800c2e2 <_vfiprintf_r+0x2a>
 800c2dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2de:	f7fd fd4e 	bl	8009d7e <__retarget_lock_acquire_recursive>
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	071b      	lsls	r3, r3, #28
 800c2e6:	d501      	bpl.n	800c2ec <_vfiprintf_r+0x34>
 800c2e8:	692b      	ldr	r3, [r5, #16]
 800c2ea:	b99b      	cbnz	r3, 800c314 <_vfiprintf_r+0x5c>
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f000 f93a 	bl	800c568 <__swsetup_r>
 800c2f4:	b170      	cbz	r0, 800c314 <_vfiprintf_r+0x5c>
 800c2f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2f8:	07dc      	lsls	r4, r3, #31
 800c2fa:	d504      	bpl.n	800c306 <_vfiprintf_r+0x4e>
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	b01d      	add	sp, #116	; 0x74
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	89ab      	ldrh	r3, [r5, #12]
 800c308:	0598      	lsls	r0, r3, #22
 800c30a:	d4f7      	bmi.n	800c2fc <_vfiprintf_r+0x44>
 800c30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c30e:	f7fd fd37 	bl	8009d80 <__retarget_lock_release_recursive>
 800c312:	e7f3      	b.n	800c2fc <_vfiprintf_r+0x44>
 800c314:	2300      	movs	r3, #0
 800c316:	9309      	str	r3, [sp, #36]	; 0x24
 800c318:	2320      	movs	r3, #32
 800c31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c31e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c322:	2330      	movs	r3, #48	; 0x30
 800c324:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4d8 <_vfiprintf_r+0x220>
 800c328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c32c:	f04f 0901 	mov.w	r9, #1
 800c330:	4623      	mov	r3, r4
 800c332:	469a      	mov	sl, r3
 800c334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c338:	b10a      	cbz	r2, 800c33e <_vfiprintf_r+0x86>
 800c33a:	2a25      	cmp	r2, #37	; 0x25
 800c33c:	d1f9      	bne.n	800c332 <_vfiprintf_r+0x7a>
 800c33e:	ebba 0b04 	subs.w	fp, sl, r4
 800c342:	d00b      	beq.n	800c35c <_vfiprintf_r+0xa4>
 800c344:	465b      	mov	r3, fp
 800c346:	4622      	mov	r2, r4
 800c348:	4629      	mov	r1, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	f7ff ffa2 	bl	800c294 <__sfputs_r>
 800c350:	3001      	adds	r0, #1
 800c352:	f000 80a9 	beq.w	800c4a8 <_vfiprintf_r+0x1f0>
 800c356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c358:	445a      	add	r2, fp
 800c35a:	9209      	str	r2, [sp, #36]	; 0x24
 800c35c:	f89a 3000 	ldrb.w	r3, [sl]
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 80a1 	beq.w	800c4a8 <_vfiprintf_r+0x1f0>
 800c366:	2300      	movs	r3, #0
 800c368:	f04f 32ff 	mov.w	r2, #4294967295
 800c36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c370:	f10a 0a01 	add.w	sl, sl, #1
 800c374:	9304      	str	r3, [sp, #16]
 800c376:	9307      	str	r3, [sp, #28]
 800c378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c37c:	931a      	str	r3, [sp, #104]	; 0x68
 800c37e:	4654      	mov	r4, sl
 800c380:	2205      	movs	r2, #5
 800c382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c386:	4854      	ldr	r0, [pc, #336]	; (800c4d8 <_vfiprintf_r+0x220>)
 800c388:	f7f3 ff3a 	bl	8000200 <memchr>
 800c38c:	9a04      	ldr	r2, [sp, #16]
 800c38e:	b9d8      	cbnz	r0, 800c3c8 <_vfiprintf_r+0x110>
 800c390:	06d1      	lsls	r1, r2, #27
 800c392:	bf44      	itt	mi
 800c394:	2320      	movmi	r3, #32
 800c396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c39a:	0713      	lsls	r3, r2, #28
 800c39c:	bf44      	itt	mi
 800c39e:	232b      	movmi	r3, #43	; 0x2b
 800c3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3aa:	d015      	beq.n	800c3d8 <_vfiprintf_r+0x120>
 800c3ac:	9a07      	ldr	r2, [sp, #28]
 800c3ae:	4654      	mov	r4, sl
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	f04f 0c0a 	mov.w	ip, #10
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3bc:	3b30      	subs	r3, #48	; 0x30
 800c3be:	2b09      	cmp	r3, #9
 800c3c0:	d94d      	bls.n	800c45e <_vfiprintf_r+0x1a6>
 800c3c2:	b1b0      	cbz	r0, 800c3f2 <_vfiprintf_r+0x13a>
 800c3c4:	9207      	str	r2, [sp, #28]
 800c3c6:	e014      	b.n	800c3f2 <_vfiprintf_r+0x13a>
 800c3c8:	eba0 0308 	sub.w	r3, r0, r8
 800c3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	9304      	str	r3, [sp, #16]
 800c3d4:	46a2      	mov	sl, r4
 800c3d6:	e7d2      	b.n	800c37e <_vfiprintf_r+0xc6>
 800c3d8:	9b03      	ldr	r3, [sp, #12]
 800c3da:	1d19      	adds	r1, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	9103      	str	r1, [sp, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	bfbb      	ittet	lt
 800c3e4:	425b      	neglt	r3, r3
 800c3e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3ea:	9307      	strge	r3, [sp, #28]
 800c3ec:	9307      	strlt	r3, [sp, #28]
 800c3ee:	bfb8      	it	lt
 800c3f0:	9204      	strlt	r2, [sp, #16]
 800c3f2:	7823      	ldrb	r3, [r4, #0]
 800c3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c3f6:	d10c      	bne.n	800c412 <_vfiprintf_r+0x15a>
 800c3f8:	7863      	ldrb	r3, [r4, #1]
 800c3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c3fc:	d134      	bne.n	800c468 <_vfiprintf_r+0x1b0>
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	1d1a      	adds	r2, r3, #4
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	9203      	str	r2, [sp, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	bfb8      	it	lt
 800c40a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c40e:	3402      	adds	r4, #2
 800c410:	9305      	str	r3, [sp, #20]
 800c412:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4e8 <_vfiprintf_r+0x230>
 800c416:	7821      	ldrb	r1, [r4, #0]
 800c418:	2203      	movs	r2, #3
 800c41a:	4650      	mov	r0, sl
 800c41c:	f7f3 fef0 	bl	8000200 <memchr>
 800c420:	b138      	cbz	r0, 800c432 <_vfiprintf_r+0x17a>
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	eba0 000a 	sub.w	r0, r0, sl
 800c428:	2240      	movs	r2, #64	; 0x40
 800c42a:	4082      	lsls	r2, r0
 800c42c:	4313      	orrs	r3, r2
 800c42e:	3401      	adds	r4, #1
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c436:	4829      	ldr	r0, [pc, #164]	; (800c4dc <_vfiprintf_r+0x224>)
 800c438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c43c:	2206      	movs	r2, #6
 800c43e:	f7f3 fedf 	bl	8000200 <memchr>
 800c442:	2800      	cmp	r0, #0
 800c444:	d03f      	beq.n	800c4c6 <_vfiprintf_r+0x20e>
 800c446:	4b26      	ldr	r3, [pc, #152]	; (800c4e0 <_vfiprintf_r+0x228>)
 800c448:	bb1b      	cbnz	r3, 800c492 <_vfiprintf_r+0x1da>
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	3307      	adds	r3, #7
 800c44e:	f023 0307 	bic.w	r3, r3, #7
 800c452:	3308      	adds	r3, #8
 800c454:	9303      	str	r3, [sp, #12]
 800c456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c458:	443b      	add	r3, r7
 800c45a:	9309      	str	r3, [sp, #36]	; 0x24
 800c45c:	e768      	b.n	800c330 <_vfiprintf_r+0x78>
 800c45e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c462:	460c      	mov	r4, r1
 800c464:	2001      	movs	r0, #1
 800c466:	e7a6      	b.n	800c3b6 <_vfiprintf_r+0xfe>
 800c468:	2300      	movs	r3, #0
 800c46a:	3401      	adds	r4, #1
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	4619      	mov	r1, r3
 800c470:	f04f 0c0a 	mov.w	ip, #10
 800c474:	4620      	mov	r0, r4
 800c476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c47a:	3a30      	subs	r2, #48	; 0x30
 800c47c:	2a09      	cmp	r2, #9
 800c47e:	d903      	bls.n	800c488 <_vfiprintf_r+0x1d0>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0c6      	beq.n	800c412 <_vfiprintf_r+0x15a>
 800c484:	9105      	str	r1, [sp, #20]
 800c486:	e7c4      	b.n	800c412 <_vfiprintf_r+0x15a>
 800c488:	fb0c 2101 	mla	r1, ip, r1, r2
 800c48c:	4604      	mov	r4, r0
 800c48e:	2301      	movs	r3, #1
 800c490:	e7f0      	b.n	800c474 <_vfiprintf_r+0x1bc>
 800c492:	ab03      	add	r3, sp, #12
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	462a      	mov	r2, r5
 800c498:	4b12      	ldr	r3, [pc, #72]	; (800c4e4 <_vfiprintf_r+0x22c>)
 800c49a:	a904      	add	r1, sp, #16
 800c49c:	4630      	mov	r0, r6
 800c49e:	f7fc fc73 	bl	8008d88 <_printf_float>
 800c4a2:	4607      	mov	r7, r0
 800c4a4:	1c78      	adds	r0, r7, #1
 800c4a6:	d1d6      	bne.n	800c456 <_vfiprintf_r+0x19e>
 800c4a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4aa:	07d9      	lsls	r1, r3, #31
 800c4ac:	d405      	bmi.n	800c4ba <_vfiprintf_r+0x202>
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	059a      	lsls	r2, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_vfiprintf_r+0x202>
 800c4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4b6:	f7fd fc63 	bl	8009d80 <__retarget_lock_release_recursive>
 800c4ba:	89ab      	ldrh	r3, [r5, #12]
 800c4bc:	065b      	lsls	r3, r3, #25
 800c4be:	f53f af1d 	bmi.w	800c2fc <_vfiprintf_r+0x44>
 800c4c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4c4:	e71c      	b.n	800c300 <_vfiprintf_r+0x48>
 800c4c6:	ab03      	add	r3, sp, #12
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	462a      	mov	r2, r5
 800c4cc:	4b05      	ldr	r3, [pc, #20]	; (800c4e4 <_vfiprintf_r+0x22c>)
 800c4ce:	a904      	add	r1, sp, #16
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7fc fefd 	bl	80092d0 <_printf_i>
 800c4d6:	e7e4      	b.n	800c4a2 <_vfiprintf_r+0x1ea>
 800c4d8:	0800d644 	.word	0x0800d644
 800c4dc:	0800d64e 	.word	0x0800d64e
 800c4e0:	08008d89 	.word	0x08008d89
 800c4e4:	0800c295 	.word	0x0800c295
 800c4e8:	0800d64a 	.word	0x0800d64a

0800c4ec <__swbuf_r>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	460e      	mov	r6, r1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	b118      	cbz	r0, 800c4fe <__swbuf_r+0x12>
 800c4f6:	6a03      	ldr	r3, [r0, #32]
 800c4f8:	b90b      	cbnz	r3, 800c4fe <__swbuf_r+0x12>
 800c4fa:	f7fd faa7 	bl	8009a4c <__sinit>
 800c4fe:	69a3      	ldr	r3, [r4, #24]
 800c500:	60a3      	str	r3, [r4, #8]
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	071a      	lsls	r2, r3, #28
 800c506:	d525      	bpl.n	800c554 <__swbuf_r+0x68>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	b31b      	cbz	r3, 800c554 <__swbuf_r+0x68>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	6922      	ldr	r2, [r4, #16]
 800c510:	1a98      	subs	r0, r3, r2
 800c512:	6963      	ldr	r3, [r4, #20]
 800c514:	b2f6      	uxtb	r6, r6
 800c516:	4283      	cmp	r3, r0
 800c518:	4637      	mov	r7, r6
 800c51a:	dc04      	bgt.n	800c526 <__swbuf_r+0x3a>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4628      	mov	r0, r5
 800c520:	f7ff fdca 	bl	800c0b8 <_fflush_r>
 800c524:	b9e0      	cbnz	r0, 800c560 <__swbuf_r+0x74>
 800c526:	68a3      	ldr	r3, [r4, #8]
 800c528:	3b01      	subs	r3, #1
 800c52a:	60a3      	str	r3, [r4, #8]
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	6022      	str	r2, [r4, #0]
 800c532:	701e      	strb	r6, [r3, #0]
 800c534:	6962      	ldr	r2, [r4, #20]
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	429a      	cmp	r2, r3
 800c53a:	d004      	beq.n	800c546 <__swbuf_r+0x5a>
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	07db      	lsls	r3, r3, #31
 800c540:	d506      	bpl.n	800c550 <__swbuf_r+0x64>
 800c542:	2e0a      	cmp	r6, #10
 800c544:	d104      	bne.n	800c550 <__swbuf_r+0x64>
 800c546:	4621      	mov	r1, r4
 800c548:	4628      	mov	r0, r5
 800c54a:	f7ff fdb5 	bl	800c0b8 <_fflush_r>
 800c54e:	b938      	cbnz	r0, 800c560 <__swbuf_r+0x74>
 800c550:	4638      	mov	r0, r7
 800c552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c554:	4621      	mov	r1, r4
 800c556:	4628      	mov	r0, r5
 800c558:	f000 f806 	bl	800c568 <__swsetup_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	d0d5      	beq.n	800c50c <__swbuf_r+0x20>
 800c560:	f04f 37ff 	mov.w	r7, #4294967295
 800c564:	e7f4      	b.n	800c550 <__swbuf_r+0x64>
	...

0800c568 <__swsetup_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4b2a      	ldr	r3, [pc, #168]	; (800c614 <__swsetup_r+0xac>)
 800c56c:	4605      	mov	r5, r0
 800c56e:	6818      	ldr	r0, [r3, #0]
 800c570:	460c      	mov	r4, r1
 800c572:	b118      	cbz	r0, 800c57c <__swsetup_r+0x14>
 800c574:	6a03      	ldr	r3, [r0, #32]
 800c576:	b90b      	cbnz	r3, 800c57c <__swsetup_r+0x14>
 800c578:	f7fd fa68 	bl	8009a4c <__sinit>
 800c57c:	89a3      	ldrh	r3, [r4, #12]
 800c57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c582:	0718      	lsls	r0, r3, #28
 800c584:	d422      	bmi.n	800c5cc <__swsetup_r+0x64>
 800c586:	06d9      	lsls	r1, r3, #27
 800c588:	d407      	bmi.n	800c59a <__swsetup_r+0x32>
 800c58a:	2309      	movs	r3, #9
 800c58c:	602b      	str	r3, [r5, #0]
 800c58e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	e034      	b.n	800c604 <__swsetup_r+0x9c>
 800c59a:	0758      	lsls	r0, r3, #29
 800c59c:	d512      	bpl.n	800c5c4 <__swsetup_r+0x5c>
 800c59e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5a0:	b141      	cbz	r1, 800c5b4 <__swsetup_r+0x4c>
 800c5a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5a6:	4299      	cmp	r1, r3
 800c5a8:	d002      	beq.n	800c5b0 <__swsetup_r+0x48>
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f7fe fa82 	bl	800aab4 <_free_r>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	6063      	str	r3, [r4, #4]
 800c5c0:	6923      	ldr	r3, [r4, #16]
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	f043 0308 	orr.w	r3, r3, #8
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	b94b      	cbnz	r3, 800c5e4 <__swsetup_r+0x7c>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5da:	d003      	beq.n	800c5e4 <__swsetup_r+0x7c>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f000 f884 	bl	800c6ec <__smakebuf_r>
 800c5e4:	89a0      	ldrh	r0, [r4, #12]
 800c5e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5ea:	f010 0301 	ands.w	r3, r0, #1
 800c5ee:	d00a      	beq.n	800c606 <__swsetup_r+0x9e>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60a3      	str	r3, [r4, #8]
 800c5f4:	6963      	ldr	r3, [r4, #20]
 800c5f6:	425b      	negs	r3, r3
 800c5f8:	61a3      	str	r3, [r4, #24]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	b943      	cbnz	r3, 800c610 <__swsetup_r+0xa8>
 800c5fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c602:	d1c4      	bne.n	800c58e <__swsetup_r+0x26>
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	0781      	lsls	r1, r0, #30
 800c608:	bf58      	it	pl
 800c60a:	6963      	ldrpl	r3, [r4, #20]
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	e7f4      	b.n	800c5fa <__swsetup_r+0x92>
 800c610:	2000      	movs	r0, #0
 800c612:	e7f7      	b.n	800c604 <__swsetup_r+0x9c>
 800c614:	200001e4 	.word	0x200001e4

0800c618 <_raise_r>:
 800c618:	291f      	cmp	r1, #31
 800c61a:	b538      	push	{r3, r4, r5, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	d904      	bls.n	800c62c <_raise_r+0x14>
 800c622:	2316      	movs	r3, #22
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	f04f 30ff 	mov.w	r0, #4294967295
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c62e:	b112      	cbz	r2, 800c636 <_raise_r+0x1e>
 800c630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c634:	b94b      	cbnz	r3, 800c64a <_raise_r+0x32>
 800c636:	4620      	mov	r0, r4
 800c638:	f000 f830 	bl	800c69c <_getpid_r>
 800c63c:	462a      	mov	r2, r5
 800c63e:	4601      	mov	r1, r0
 800c640:	4620      	mov	r0, r4
 800c642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c646:	f000 b817 	b.w	800c678 <_kill_r>
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d00a      	beq.n	800c664 <_raise_r+0x4c>
 800c64e:	1c59      	adds	r1, r3, #1
 800c650:	d103      	bne.n	800c65a <_raise_r+0x42>
 800c652:	2316      	movs	r3, #22
 800c654:	6003      	str	r3, [r0, #0]
 800c656:	2001      	movs	r0, #1
 800c658:	e7e7      	b.n	800c62a <_raise_r+0x12>
 800c65a:	2400      	movs	r4, #0
 800c65c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c660:	4628      	mov	r0, r5
 800c662:	4798      	blx	r3
 800c664:	2000      	movs	r0, #0
 800c666:	e7e0      	b.n	800c62a <_raise_r+0x12>

0800c668 <raise>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <raise+0xc>)
 800c66a:	4601      	mov	r1, r0
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	f7ff bfd3 	b.w	800c618 <_raise_r>
 800c672:	bf00      	nop
 800c674:	200001e4 	.word	0x200001e4

0800c678 <_kill_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d07      	ldr	r5, [pc, #28]	; (800c698 <_kill_r+0x20>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	f7f5 ffcd 	bl	8002624 <_kill>
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d102      	bne.n	800c694 <_kill_r+0x1c>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	b103      	cbz	r3, 800c694 <_kill_r+0x1c>
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	20004818 	.word	0x20004818

0800c69c <_getpid_r>:
 800c69c:	f7f5 bfba 	b.w	8002614 <_getpid>

0800c6a0 <__swhatbuf_r>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	2900      	cmp	r1, #0
 800c6aa:	b096      	sub	sp, #88	; 0x58
 800c6ac:	4615      	mov	r5, r2
 800c6ae:	461e      	mov	r6, r3
 800c6b0:	da0d      	bge.n	800c6ce <__swhatbuf_r+0x2e>
 800c6b2:	89a3      	ldrh	r3, [r4, #12]
 800c6b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c6b8:	f04f 0100 	mov.w	r1, #0
 800c6bc:	bf0c      	ite	eq
 800c6be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c6c2:	2340      	movne	r3, #64	; 0x40
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	6031      	str	r1, [r6, #0]
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	b016      	add	sp, #88	; 0x58
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	466a      	mov	r2, sp
 800c6d0:	f000 f848 	bl	800c764 <_fstat_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	dbec      	blt.n	800c6b2 <__swhatbuf_r+0x12>
 800c6d8:	9901      	ldr	r1, [sp, #4]
 800c6da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c6de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c6e2:	4259      	negs	r1, r3
 800c6e4:	4159      	adcs	r1, r3
 800c6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ea:	e7eb      	b.n	800c6c4 <__swhatbuf_r+0x24>

0800c6ec <__smakebuf_r>:
 800c6ec:	898b      	ldrh	r3, [r1, #12]
 800c6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6f0:	079d      	lsls	r5, r3, #30
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	d507      	bpl.n	800c708 <__smakebuf_r+0x1c>
 800c6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	6123      	str	r3, [r4, #16]
 800c700:	2301      	movs	r3, #1
 800c702:	6163      	str	r3, [r4, #20]
 800c704:	b002      	add	sp, #8
 800c706:	bd70      	pop	{r4, r5, r6, pc}
 800c708:	ab01      	add	r3, sp, #4
 800c70a:	466a      	mov	r2, sp
 800c70c:	f7ff ffc8 	bl	800c6a0 <__swhatbuf_r>
 800c710:	9900      	ldr	r1, [sp, #0]
 800c712:	4605      	mov	r5, r0
 800c714:	4630      	mov	r0, r6
 800c716:	f7fe fd99 	bl	800b24c <_malloc_r>
 800c71a:	b948      	cbnz	r0, 800c730 <__smakebuf_r+0x44>
 800c71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c720:	059a      	lsls	r2, r3, #22
 800c722:	d4ef      	bmi.n	800c704 <__smakebuf_r+0x18>
 800c724:	f023 0303 	bic.w	r3, r3, #3
 800c728:	f043 0302 	orr.w	r3, r3, #2
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	e7e3      	b.n	800c6f8 <__smakebuf_r+0xc>
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	6020      	str	r0, [r4, #0]
 800c734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	9b00      	ldr	r3, [sp, #0]
 800c73c:	6163      	str	r3, [r4, #20]
 800c73e:	9b01      	ldr	r3, [sp, #4]
 800c740:	6120      	str	r0, [r4, #16]
 800c742:	b15b      	cbz	r3, 800c75c <__smakebuf_r+0x70>
 800c744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c748:	4630      	mov	r0, r6
 800c74a:	f000 f81d 	bl	800c788 <_isatty_r>
 800c74e:	b128      	cbz	r0, 800c75c <__smakebuf_r+0x70>
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	f023 0303 	bic.w	r3, r3, #3
 800c756:	f043 0301 	orr.w	r3, r3, #1
 800c75a:	81a3      	strh	r3, [r4, #12]
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	431d      	orrs	r5, r3
 800c760:	81a5      	strh	r5, [r4, #12]
 800c762:	e7cf      	b.n	800c704 <__smakebuf_r+0x18>

0800c764 <_fstat_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d07      	ldr	r5, [pc, #28]	; (800c784 <_fstat_r+0x20>)
 800c768:	2300      	movs	r3, #0
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	f7f5 ffb6 	bl	80026e2 <_fstat>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	d102      	bne.n	800c780 <_fstat_r+0x1c>
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	b103      	cbz	r3, 800c780 <_fstat_r+0x1c>
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
 800c784:	20004818 	.word	0x20004818

0800c788 <_isatty_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	; (800c7a4 <_isatty_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f5 ffb5 	bl	8002702 <_isatty>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_isatty_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_isatty_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20004818 	.word	0x20004818

0800c7a8 <powf>:
 800c7a8:	b508      	push	{r3, lr}
 800c7aa:	ed2d 8b04 	vpush	{d8-d9}
 800c7ae:	eeb0 8a60 	vmov.f32	s16, s1
 800c7b2:	eeb0 9a40 	vmov.f32	s18, s0
 800c7b6:	f000 f87d 	bl	800c8b4 <__ieee754_powf>
 800c7ba:	eeb4 8a48 	vcmp.f32	s16, s16
 800c7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c2:	eef0 8a40 	vmov.f32	s17, s0
 800c7c6:	d63e      	bvs.n	800c846 <powf+0x9e>
 800c7c8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d0:	d112      	bne.n	800c7f8 <powf+0x50>
 800c7d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7da:	d039      	beq.n	800c850 <powf+0xa8>
 800c7dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e0:	f000 f858 	bl	800c894 <finitef>
 800c7e4:	b378      	cbz	r0, 800c846 <powf+0x9e>
 800c7e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ee:	d52a      	bpl.n	800c846 <powf+0x9e>
 800c7f0:	f7fd fa9a 	bl	8009d28 <__errno>
 800c7f4:	2322      	movs	r3, #34	; 0x22
 800c7f6:	e014      	b.n	800c822 <powf+0x7a>
 800c7f8:	f000 f84c 	bl	800c894 <finitef>
 800c7fc:	b998      	cbnz	r0, 800c826 <powf+0x7e>
 800c7fe:	eeb0 0a49 	vmov.f32	s0, s18
 800c802:	f000 f847 	bl	800c894 <finitef>
 800c806:	b170      	cbz	r0, 800c826 <powf+0x7e>
 800c808:	eeb0 0a48 	vmov.f32	s0, s16
 800c80c:	f000 f842 	bl	800c894 <finitef>
 800c810:	b148      	cbz	r0, 800c826 <powf+0x7e>
 800c812:	eef4 8a68 	vcmp.f32	s17, s17
 800c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81a:	d7e9      	bvc.n	800c7f0 <powf+0x48>
 800c81c:	f7fd fa84 	bl	8009d28 <__errno>
 800c820:	2321      	movs	r3, #33	; 0x21
 800c822:	6003      	str	r3, [r0, #0]
 800c824:	e00f      	b.n	800c846 <powf+0x9e>
 800c826:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c82e:	d10a      	bne.n	800c846 <powf+0x9e>
 800c830:	eeb0 0a49 	vmov.f32	s0, s18
 800c834:	f000 f82e 	bl	800c894 <finitef>
 800c838:	b128      	cbz	r0, 800c846 <powf+0x9e>
 800c83a:	eeb0 0a48 	vmov.f32	s0, s16
 800c83e:	f000 f829 	bl	800c894 <finitef>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1d4      	bne.n	800c7f0 <powf+0x48>
 800c846:	eeb0 0a68 	vmov.f32	s0, s17
 800c84a:	ecbd 8b04 	vpop	{d8-d9}
 800c84e:	bd08      	pop	{r3, pc}
 800c850:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c854:	e7f7      	b.n	800c846 <powf+0x9e>
	...

0800c858 <sqrtf>:
 800c858:	b508      	push	{r3, lr}
 800c85a:	ed2d 8b02 	vpush	{d8}
 800c85e:	eeb0 8a40 	vmov.f32	s16, s0
 800c862:	f000 f824 	bl	800c8ae <__ieee754_sqrtf>
 800c866:	eeb4 8a48 	vcmp.f32	s16, s16
 800c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86e:	d60c      	bvs.n	800c88a <sqrtf+0x32>
 800c870:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c890 <sqrtf+0x38>
 800c874:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87c:	d505      	bpl.n	800c88a <sqrtf+0x32>
 800c87e:	f7fd fa53 	bl	8009d28 <__errno>
 800c882:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c886:	2321      	movs	r3, #33	; 0x21
 800c888:	6003      	str	r3, [r0, #0]
 800c88a:	ecbd 8b02 	vpop	{d8}
 800c88e:	bd08      	pop	{r3, pc}
 800c890:	00000000 	.word	0x00000000

0800c894 <finitef>:
 800c894:	b082      	sub	sp, #8
 800c896:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c89a:	9801      	ldr	r0, [sp, #4]
 800c89c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c8a0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c8a4:	bfac      	ite	ge
 800c8a6:	2000      	movge	r0, #0
 800c8a8:	2001      	movlt	r0, #1
 800c8aa:	b002      	add	sp, #8
 800c8ac:	4770      	bx	lr

0800c8ae <__ieee754_sqrtf>:
 800c8ae:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c8b2:	4770      	bx	lr

0800c8b4 <__ieee754_powf>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	ee10 4a90 	vmov	r4, s1
 800c8bc:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800c8c0:	ed2d 8b02 	vpush	{d8}
 800c8c4:	ee10 7a10 	vmov	r7, s0
 800c8c8:	eeb0 8a40 	vmov.f32	s16, s0
 800c8cc:	eef0 8a60 	vmov.f32	s17, s1
 800c8d0:	d10c      	bne.n	800c8ec <__ieee754_powf+0x38>
 800c8d2:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800c8d6:	007f      	lsls	r7, r7, #1
 800c8d8:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800c8dc:	f240 8292 	bls.w	800ce04 <__ieee754_powf+0x550>
 800c8e0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c8e4:	ecbd 8b02 	vpop	{d8}
 800c8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ec:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800c8f0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c8f4:	dcf4      	bgt.n	800c8e0 <__ieee754_powf+0x2c>
 800c8f6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c8fa:	dd08      	ble.n	800c90e <__ieee754_powf+0x5a>
 800c8fc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c900:	d1ee      	bne.n	800c8e0 <__ieee754_powf+0x2c>
 800c902:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c906:	0064      	lsls	r4, r4, #1
 800c908:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c90c:	e7e6      	b.n	800c8dc <__ieee754_powf+0x28>
 800c90e:	2f00      	cmp	r7, #0
 800c910:	da20      	bge.n	800c954 <__ieee754_powf+0xa0>
 800c912:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800c916:	da2d      	bge.n	800c974 <__ieee754_powf+0xc0>
 800c918:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c91c:	f2c0 827b 	blt.w	800ce16 <__ieee754_powf+0x562>
 800c920:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800c924:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c928:	fa48 f603 	asr.w	r6, r8, r3
 800c92c:	fa06 f303 	lsl.w	r3, r6, r3
 800c930:	4543      	cmp	r3, r8
 800c932:	f040 8270 	bne.w	800ce16 <__ieee754_powf+0x562>
 800c936:	f006 0601 	and.w	r6, r6, #1
 800c93a:	f1c6 0602 	rsb	r6, r6, #2
 800c93e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c942:	d11f      	bne.n	800c984 <__ieee754_powf+0xd0>
 800c944:	2c00      	cmp	r4, #0
 800c946:	f280 8263 	bge.w	800ce10 <__ieee754_powf+0x55c>
 800c94a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c94e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c952:	e7c7      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c954:	2600      	movs	r6, #0
 800c956:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800c95a:	d1f0      	bne.n	800c93e <__ieee754_powf+0x8a>
 800c95c:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800c960:	f000 8250 	beq.w	800ce04 <__ieee754_powf+0x550>
 800c964:	dd08      	ble.n	800c978 <__ieee754_powf+0xc4>
 800c966:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800cc6c <__ieee754_powf+0x3b8>
 800c96a:	2c00      	cmp	r4, #0
 800c96c:	bfa8      	it	ge
 800c96e:	eeb0 0a68 	vmovge.f32	s0, s17
 800c972:	e7b7      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c974:	2602      	movs	r6, #2
 800c976:	e7ee      	b.n	800c956 <__ieee754_powf+0xa2>
 800c978:	2c00      	cmp	r4, #0
 800c97a:	f280 8246 	bge.w	800ce0a <__ieee754_powf+0x556>
 800c97e:	eeb1 0a68 	vneg.f32	s0, s17
 800c982:	e7af      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c984:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c988:	d102      	bne.n	800c990 <__ieee754_powf+0xdc>
 800c98a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c98e:	e7a9      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c990:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c994:	eeb0 0a48 	vmov.f32	s0, s16
 800c998:	d107      	bne.n	800c9aa <__ieee754_powf+0xf6>
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	db05      	blt.n	800c9aa <__ieee754_powf+0xf6>
 800c99e:	ecbd 8b02 	vpop	{d8}
 800c9a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a6:	f7ff bf82 	b.w	800c8ae <__ieee754_sqrtf>
 800c9aa:	f000 fa4d 	bl	800ce48 <fabsf>
 800c9ae:	b125      	cbz	r5, 800c9ba <__ieee754_powf+0x106>
 800c9b0:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800c9b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c9b8:	d115      	bne.n	800c9e6 <__ieee754_powf+0x132>
 800c9ba:	2c00      	cmp	r4, #0
 800c9bc:	bfbc      	itt	lt
 800c9be:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c9c2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c9c6:	2f00      	cmp	r7, #0
 800c9c8:	da8c      	bge.n	800c8e4 <__ieee754_powf+0x30>
 800c9ca:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800c9ce:	4335      	orrs	r5, r6
 800c9d0:	d104      	bne.n	800c9dc <__ieee754_powf+0x128>
 800c9d2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c9d6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c9da:	e783      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c9dc:	2e01      	cmp	r6, #1
 800c9de:	d181      	bne.n	800c8e4 <__ieee754_powf+0x30>
 800c9e0:	eeb1 0a40 	vneg.f32	s0, s0
 800c9e4:	e77e      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c9e6:	0ff8      	lsrs	r0, r7, #31
 800c9e8:	3801      	subs	r0, #1
 800c9ea:	ea56 0300 	orrs.w	r3, r6, r0
 800c9ee:	d104      	bne.n	800c9fa <__ieee754_powf+0x146>
 800c9f0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c9f4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c9f8:	e774      	b.n	800c8e4 <__ieee754_powf+0x30>
 800c9fa:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800c9fe:	dd73      	ble.n	800cae8 <__ieee754_powf+0x234>
 800ca00:	4b9b      	ldr	r3, [pc, #620]	; (800cc70 <__ieee754_powf+0x3bc>)
 800ca02:	429d      	cmp	r5, r3
 800ca04:	dc08      	bgt.n	800ca18 <__ieee754_powf+0x164>
 800ca06:	2c00      	cmp	r4, #0
 800ca08:	da0b      	bge.n	800ca22 <__ieee754_powf+0x16e>
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	ecbd 8b02 	vpop	{d8}
 800ca10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca14:	f000 baa2 	b.w	800cf5c <__math_oflowf>
 800ca18:	4b96      	ldr	r3, [pc, #600]	; (800cc74 <__ieee754_powf+0x3c0>)
 800ca1a:	429d      	cmp	r5, r3
 800ca1c:	dd08      	ble.n	800ca30 <__ieee754_powf+0x17c>
 800ca1e:	2c00      	cmp	r4, #0
 800ca20:	dcf3      	bgt.n	800ca0a <__ieee754_powf+0x156>
 800ca22:	2000      	movs	r0, #0
 800ca24:	ecbd 8b02 	vpop	{d8}
 800ca28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2c:	f000 ba90 	b.w	800cf50 <__math_uflowf>
 800ca30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca34:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca38:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800cc78 <__ieee754_powf+0x3c4>
 800ca3c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ca40:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ca44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca48:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ca4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca54:	eddf 7a89 	vldr	s15, [pc, #548]	; 800cc7c <__ieee754_powf+0x3c8>
 800ca58:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ca5c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800cc80 <__ieee754_powf+0x3cc>
 800ca60:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ca64:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800cc84 <__ieee754_powf+0x3d0>
 800ca68:	eef0 6a67 	vmov.f32	s13, s15
 800ca6c:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ca70:	ee16 3a90 	vmov	r3, s13
 800ca74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ca78:	f023 030f 	bic.w	r3, r3, #15
 800ca7c:	ee06 3a90 	vmov	s13, r3
 800ca80:	eee0 6a47 	vfms.f32	s13, s0, s14
 800ca84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca88:	3e01      	subs	r6, #1
 800ca8a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ca8e:	4306      	orrs	r6, r0
 800ca90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ca94:	f024 040f 	bic.w	r4, r4, #15
 800ca98:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ca9c:	bf08      	it	eq
 800ca9e:	eeb0 8a47 	vmoveq.f32	s16, s14
 800caa2:	ee07 4a10 	vmov	s14, r4
 800caa6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800caaa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cab6:	ee07 4a10 	vmov	s14, r4
 800caba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cabe:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cac2:	ee17 1a10 	vmov	r1, s14
 800cac6:	2900      	cmp	r1, #0
 800cac8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cacc:	f340 817c 	ble.w	800cdc8 <__ieee754_powf+0x514>
 800cad0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800cad4:	f340 80f8 	ble.w	800ccc8 <__ieee754_powf+0x414>
 800cad8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae0:	bf4c      	ite	mi
 800cae2:	2001      	movmi	r0, #1
 800cae4:	2000      	movpl	r0, #0
 800cae6:	e791      	b.n	800ca0c <__ieee754_powf+0x158>
 800cae8:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800caec:	bf01      	itttt	eq
 800caee:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800cc88 <__ieee754_powf+0x3d4>
 800caf2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800caf6:	f06f 0317 	mvneq.w	r3, #23
 800cafa:	ee17 5a90 	vmoveq	r5, s15
 800cafe:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800cb02:	bf18      	it	ne
 800cb04:	2300      	movne	r3, #0
 800cb06:	3a7f      	subs	r2, #127	; 0x7f
 800cb08:	441a      	add	r2, r3
 800cb0a:	4b60      	ldr	r3, [pc, #384]	; (800cc8c <__ieee754_powf+0x3d8>)
 800cb0c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800cb10:	429d      	cmp	r5, r3
 800cb12:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800cb16:	dd06      	ble.n	800cb26 <__ieee754_powf+0x272>
 800cb18:	4b5d      	ldr	r3, [pc, #372]	; (800cc90 <__ieee754_powf+0x3dc>)
 800cb1a:	429d      	cmp	r5, r3
 800cb1c:	f340 80a4 	ble.w	800cc68 <__ieee754_powf+0x3b4>
 800cb20:	3201      	adds	r2, #1
 800cb22:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800cb26:	2500      	movs	r5, #0
 800cb28:	4b5a      	ldr	r3, [pc, #360]	; (800cc94 <__ieee754_powf+0x3e0>)
 800cb2a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800cb2e:	ee07 1a10 	vmov	s14, r1
 800cb32:	edd3 5a00 	vldr	s11, [r3]
 800cb36:	4b58      	ldr	r3, [pc, #352]	; (800cc98 <__ieee754_powf+0x3e4>)
 800cb38:	ee75 7a87 	vadd.f32	s15, s11, s14
 800cb3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb40:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800cb44:	1049      	asrs	r1, r1, #1
 800cb46:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800cb4a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800cb4e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800cb52:	ee37 6a65 	vsub.f32	s12, s14, s11
 800cb56:	ee07 1a90 	vmov	s15, r1
 800cb5a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800cb5e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800cb62:	ee15 7a10 	vmov	r7, s10
 800cb66:	401f      	ands	r7, r3
 800cb68:	ee06 7a90 	vmov	s13, r7
 800cb6c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800cb70:	ee37 7a65 	vsub.f32	s14, s14, s11
 800cb74:	ee65 7a05 	vmul.f32	s15, s10, s10
 800cb78:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cb7c:	eddf 5a47 	vldr	s11, [pc, #284]	; 800cc9c <__ieee754_powf+0x3e8>
 800cb80:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800cca0 <__ieee754_powf+0x3ec>
 800cb84:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cb88:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cca4 <__ieee754_powf+0x3f0>
 800cb8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cb90:	eddf 5a39 	vldr	s11, [pc, #228]	; 800cc78 <__ieee754_powf+0x3c4>
 800cb94:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cb98:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800cca8 <__ieee754_powf+0x3f4>
 800cb9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cba0:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ccac <__ieee754_powf+0x3f8>
 800cba4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cba8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cbac:	ee35 7a26 	vadd.f32	s14, s10, s13
 800cbb0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cbb4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cbb8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800cbbc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800cbc0:	eef0 5a67 	vmov.f32	s11, s15
 800cbc4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800cbc8:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cbcc:	ee15 1a90 	vmov	r1, s11
 800cbd0:	4019      	ands	r1, r3
 800cbd2:	ee05 1a90 	vmov	s11, r1
 800cbd6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cbda:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800cbde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbe2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cbe6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cbea:	eeb0 6a67 	vmov.f32	s12, s15
 800cbee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cbf2:	ee16 1a10 	vmov	r1, s12
 800cbf6:	4019      	ands	r1, r3
 800cbf8:	ee07 1a10 	vmov	s14, r1
 800cbfc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800cc00:	ee06 1a10 	vmov	s12, r1
 800cc04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc08:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ccb0 <__ieee754_powf+0x3fc>
 800cc0c:	4929      	ldr	r1, [pc, #164]	; (800ccb4 <__ieee754_powf+0x400>)
 800cc0e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ccb8 <__ieee754_powf+0x404>
 800cc12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc16:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ccbc <__ieee754_powf+0x408>
 800cc1a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cc1e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800cc22:	ed91 7a00 	vldr	s14, [r1]
 800cc26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc2a:	ee07 2a10 	vmov	s14, r2
 800cc2e:	eef0 6a67 	vmov.f32	s13, s15
 800cc32:	4a23      	ldr	r2, [pc, #140]	; (800ccc0 <__ieee754_powf+0x40c>)
 800cc34:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cc38:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cc3c:	ed92 5a00 	vldr	s10, [r2]
 800cc40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cc44:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cc48:	ee76 6a87 	vadd.f32	s13, s13, s14
 800cc4c:	ee16 2a90 	vmov	r2, s13
 800cc50:	4013      	ands	r3, r2
 800cc52:	ee06 3a90 	vmov	s13, r3
 800cc56:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cc5a:	ee37 7a45 	vsub.f32	s14, s14, s10
 800cc5e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800cc62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc66:	e70f      	b.n	800ca88 <__ieee754_powf+0x1d4>
 800cc68:	2501      	movs	r5, #1
 800cc6a:	e75d      	b.n	800cb28 <__ieee754_powf+0x274>
 800cc6c:	00000000 	.word	0x00000000
 800cc70:	3f7ffff3 	.word	0x3f7ffff3
 800cc74:	3f800007 	.word	0x3f800007
 800cc78:	3eaaaaab 	.word	0x3eaaaaab
 800cc7c:	3fb8aa3b 	.word	0x3fb8aa3b
 800cc80:	36eca570 	.word	0x36eca570
 800cc84:	3fb8aa00 	.word	0x3fb8aa00
 800cc88:	4b800000 	.word	0x4b800000
 800cc8c:	001cc471 	.word	0x001cc471
 800cc90:	005db3d6 	.word	0x005db3d6
 800cc94:	0800d694 	.word	0x0800d694
 800cc98:	fffff000 	.word	0xfffff000
 800cc9c:	3e6c3255 	.word	0x3e6c3255
 800cca0:	3e53f142 	.word	0x3e53f142
 800cca4:	3e8ba305 	.word	0x3e8ba305
 800cca8:	3edb6db7 	.word	0x3edb6db7
 800ccac:	3f19999a 	.word	0x3f19999a
 800ccb0:	3f76384f 	.word	0x3f76384f
 800ccb4:	0800d6a4 	.word	0x0800d6a4
 800ccb8:	3f763800 	.word	0x3f763800
 800ccbc:	369dc3a0 	.word	0x369dc3a0
 800ccc0:	0800d69c 	.word	0x0800d69c
 800ccc4:	3338aa3c 	.word	0x3338aa3c
 800ccc8:	f040 8093 	bne.w	800cdf2 <__ieee754_powf+0x53e>
 800cccc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ccc4 <__ieee754_powf+0x410>
 800ccd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccd4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ccd8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ccdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce0:	f73f aefa 	bgt.w	800cad8 <__ieee754_powf+0x224>
 800cce4:	15db      	asrs	r3, r3, #23
 800cce6:	3b7e      	subs	r3, #126	; 0x7e
 800cce8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ccec:	4118      	asrs	r0, r3
 800ccee:	4408      	add	r0, r1
 800ccf0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ccf4:	4a49      	ldr	r2, [pc, #292]	; (800ce1c <__ieee754_powf+0x568>)
 800ccf6:	3b7f      	subs	r3, #127	; 0x7f
 800ccf8:	411a      	asrs	r2, r3
 800ccfa:	4002      	ands	r2, r0
 800ccfc:	ee07 2a10 	vmov	s14, r2
 800cd00:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800cd04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cd08:	f1c3 0317 	rsb	r3, r3, #23
 800cd0c:	4118      	asrs	r0, r3
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd14:	bfb8      	it	lt
 800cd16:	4240      	neglt	r0, r0
 800cd18:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cd1c:	eddf 6a40 	vldr	s13, [pc, #256]	; 800ce20 <__ieee754_powf+0x56c>
 800cd20:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ce24 <__ieee754_powf+0x570>
 800cd24:	ee17 3a10 	vmov	r3, s14
 800cd28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd2c:	f023 030f 	bic.w	r3, r3, #15
 800cd30:	ee07 3a10 	vmov	s14, r3
 800cd34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cd3c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cd40:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ce28 <__ieee754_powf+0x574>
 800cd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd48:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cd4c:	eef0 6a67 	vmov.f32	s13, s15
 800cd50:	eee7 6a06 	vfma.f32	s13, s14, s12
 800cd54:	eef0 5a66 	vmov.f32	s11, s13
 800cd58:	eee7 5a46 	vfms.f32	s11, s14, s12
 800cd5c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cd60:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cd64:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800ce2c <__ieee754_powf+0x578>
 800cd68:	eddf 5a31 	vldr	s11, [pc, #196]	; 800ce30 <__ieee754_powf+0x57c>
 800cd6c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800cd70:	eddf 5a30 	vldr	s11, [pc, #192]	; 800ce34 <__ieee754_powf+0x580>
 800cd74:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cd78:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800ce38 <__ieee754_powf+0x584>
 800cd7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cd80:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ce3c <__ieee754_powf+0x588>
 800cd84:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cd88:	eeb0 6a66 	vmov.f32	s12, s13
 800cd8c:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800cd90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800cd94:	ee66 5a86 	vmul.f32	s11, s13, s12
 800cd98:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cd9c:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800cda0:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800cda4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cda8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cdac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cdb0:	ee10 3a10 	vmov	r3, s0
 800cdb4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cdb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cdbc:	da1f      	bge.n	800cdfe <__ieee754_powf+0x54a>
 800cdbe:	f000 f84b 	bl	800ce58 <scalbnf>
 800cdc2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cdc6:	e58d      	b.n	800c8e4 <__ieee754_powf+0x30>
 800cdc8:	4a1d      	ldr	r2, [pc, #116]	; (800ce40 <__ieee754_powf+0x58c>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	dd07      	ble.n	800cdde <__ieee754_powf+0x52a>
 800cdce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd6:	bf4c      	ite	mi
 800cdd8:	2001      	movmi	r0, #1
 800cdda:	2000      	movpl	r0, #0
 800cddc:	e622      	b.n	800ca24 <__ieee754_powf+0x170>
 800cdde:	d108      	bne.n	800cdf2 <__ieee754_powf+0x53e>
 800cde0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cde4:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdec:	f6ff af7a 	blt.w	800cce4 <__ieee754_powf+0x430>
 800cdf0:	e7ed      	b.n	800cdce <__ieee754_powf+0x51a>
 800cdf2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cdf6:	f73f af75 	bgt.w	800cce4 <__ieee754_powf+0x430>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e78c      	b.n	800cd18 <__ieee754_powf+0x464>
 800cdfe:	ee00 3a10 	vmov	s0, r3
 800ce02:	e7de      	b.n	800cdc2 <__ieee754_powf+0x50e>
 800ce04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce08:	e56c      	b.n	800c8e4 <__ieee754_powf+0x30>
 800ce0a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ce44 <__ieee754_powf+0x590>
 800ce0e:	e569      	b.n	800c8e4 <__ieee754_powf+0x30>
 800ce10:	eeb0 0a48 	vmov.f32	s0, s16
 800ce14:	e566      	b.n	800c8e4 <__ieee754_powf+0x30>
 800ce16:	2600      	movs	r6, #0
 800ce18:	e591      	b.n	800c93e <__ieee754_powf+0x8a>
 800ce1a:	bf00      	nop
 800ce1c:	ff800000 	.word	0xff800000
 800ce20:	3f317218 	.word	0x3f317218
 800ce24:	3f317200 	.word	0x3f317200
 800ce28:	35bfbe8c 	.word	0x35bfbe8c
 800ce2c:	b5ddea0e 	.word	0xb5ddea0e
 800ce30:	3331bb4c 	.word	0x3331bb4c
 800ce34:	388ab355 	.word	0x388ab355
 800ce38:	bb360b61 	.word	0xbb360b61
 800ce3c:	3e2aaaab 	.word	0x3e2aaaab
 800ce40:	43160000 	.word	0x43160000
 800ce44:	00000000 	.word	0x00000000

0800ce48 <fabsf>:
 800ce48:	ee10 3a10 	vmov	r3, s0
 800ce4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce50:	ee00 3a10 	vmov	s0, r3
 800ce54:	4770      	bx	lr
	...

0800ce58 <scalbnf>:
 800ce58:	ee10 3a10 	vmov	r3, s0
 800ce5c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ce60:	d02b      	beq.n	800ceba <scalbnf+0x62>
 800ce62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ce66:	d302      	bcc.n	800ce6e <scalbnf+0x16>
 800ce68:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ce6c:	4770      	bx	lr
 800ce6e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ce72:	d123      	bne.n	800cebc <scalbnf+0x64>
 800ce74:	4b24      	ldr	r3, [pc, #144]	; (800cf08 <scalbnf+0xb0>)
 800ce76:	eddf 7a25 	vldr	s15, [pc, #148]	; 800cf0c <scalbnf+0xb4>
 800ce7a:	4298      	cmp	r0, r3
 800ce7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ce80:	db17      	blt.n	800ceb2 <scalbnf+0x5a>
 800ce82:	ee10 3a10 	vmov	r3, s0
 800ce86:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ce8a:	3a19      	subs	r2, #25
 800ce8c:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ce90:	4288      	cmp	r0, r1
 800ce92:	dd15      	ble.n	800cec0 <scalbnf+0x68>
 800ce94:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800cf10 <scalbnf+0xb8>
 800ce98:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800cf14 <scalbnf+0xbc>
 800ce9c:	ee10 3a10 	vmov	r3, s0
 800cea0:	eeb0 7a67 	vmov.f32	s14, s15
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bfb8      	it	lt
 800cea8:	eef0 7a66 	vmovlt.f32	s15, s13
 800ceac:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ceb0:	4770      	bx	lr
 800ceb2:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cf18 <scalbnf+0xc0>
 800ceb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ceba:	4770      	bx	lr
 800cebc:	0dd2      	lsrs	r2, r2, #23
 800cebe:	e7e5      	b.n	800ce8c <scalbnf+0x34>
 800cec0:	4410      	add	r0, r2
 800cec2:	28fe      	cmp	r0, #254	; 0xfe
 800cec4:	dce6      	bgt.n	800ce94 <scalbnf+0x3c>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	dd06      	ble.n	800ced8 <scalbnf+0x80>
 800ceca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cece:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ced2:	ee00 3a10 	vmov	s0, r3
 800ced6:	4770      	bx	lr
 800ced8:	f110 0f16 	cmn.w	r0, #22
 800cedc:	da09      	bge.n	800cef2 <scalbnf+0x9a>
 800cede:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cf18 <scalbnf+0xc0>
 800cee2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800cf1c <scalbnf+0xc4>
 800cee6:	ee10 3a10 	vmov	r3, s0
 800ceea:	eeb0 7a67 	vmov.f32	s14, s15
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	e7d9      	b.n	800cea6 <scalbnf+0x4e>
 800cef2:	3019      	adds	r0, #25
 800cef4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cef8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cefc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800cf20 <scalbnf+0xc8>
 800cf00:	ee07 3a90 	vmov	s15, r3
 800cf04:	e7d7      	b.n	800ceb6 <scalbnf+0x5e>
 800cf06:	bf00      	nop
 800cf08:	ffff3cb0 	.word	0xffff3cb0
 800cf0c:	4c000000 	.word	0x4c000000
 800cf10:	7149f2ca 	.word	0x7149f2ca
 800cf14:	f149f2ca 	.word	0xf149f2ca
 800cf18:	0da24260 	.word	0x0da24260
 800cf1c:	8da24260 	.word	0x8da24260
 800cf20:	33000000 	.word	0x33000000

0800cf24 <with_errnof>:
 800cf24:	b513      	push	{r0, r1, r4, lr}
 800cf26:	4604      	mov	r4, r0
 800cf28:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cf2c:	f7fc fefc 	bl	8009d28 <__errno>
 800cf30:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cf34:	6004      	str	r4, [r0, #0]
 800cf36:	b002      	add	sp, #8
 800cf38:	bd10      	pop	{r4, pc}

0800cf3a <xflowf>:
 800cf3a:	b130      	cbz	r0, 800cf4a <xflowf+0x10>
 800cf3c:	eef1 7a40 	vneg.f32	s15, s0
 800cf40:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cf44:	2022      	movs	r0, #34	; 0x22
 800cf46:	f7ff bfed 	b.w	800cf24 <with_errnof>
 800cf4a:	eef0 7a40 	vmov.f32	s15, s0
 800cf4e:	e7f7      	b.n	800cf40 <xflowf+0x6>

0800cf50 <__math_uflowf>:
 800cf50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf58 <__math_uflowf+0x8>
 800cf54:	f7ff bff1 	b.w	800cf3a <xflowf>
 800cf58:	10000000 	.word	0x10000000

0800cf5c <__math_oflowf>:
 800cf5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf64 <__math_oflowf+0x8>
 800cf60:	f7ff bfeb 	b.w	800cf3a <xflowf>
 800cf64:	70000000 	.word	0x70000000

0800cf68 <_init>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr

0800cf74 <_fini>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr
